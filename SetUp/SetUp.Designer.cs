//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("SetUp", "FK_Approvals_Universities", "Universities", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SetUp.University), "Approvals", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SetUp.Approval), true)]
[assembly: EdmRelationshipAttribute("SetUp", "FK_CountriesLGA", "Countries", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SetUp.Country), "LGAs", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SetUp.LGA), true)]
[assembly: EdmRelationshipAttribute("SetUp", "FK_CountriesStates", "Countries", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SetUp.Country), "States", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SetUp.State), true)]
[assembly: EdmRelationshipAttribute("SetUp", "FK_CourseNumbering_Universities", "Universities", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SetUp.University), "CourseNumbering", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SetUp.CourseNumbering), true)]
[assembly: EdmRelationshipAttribute("SetUp", "FK_SubCourses_CourseNumbering", "CourseNumbering", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SetUp.CourseNumbering), "SubCourses", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SetUp.SubCours), true)]
[assembly: EdmRelationshipAttribute("SetUp", "FK_Courses_Departments", "Departments", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SetUp.Department), "Courses", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SetUp.Cours), true)]
[assembly: EdmRelationshipAttribute("SetUp", "FK_Programs_Courses", "Courses", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SetUp.Cours), "Programs", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SetUp.Program), true)]
[assembly: EdmRelationshipAttribute("SetUp", "FK_Departments_Faculties", "Faculties", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SetUp.Faculty), "Departments", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SetUp.Department), true)]
[assembly: EdmRelationshipAttribute("SetUp", "FK_Designations_Staff", "Staff", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SetUp.Staff), "Designations", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SetUp.Designation), true)]
[assembly: EdmRelationshipAttribute("SetUp", "FK_Durations_Programs", "Programs", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SetUp.Program), "Durations", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SetUp.Duration), true)]
[assembly: EdmRelationshipAttribute("SetUp", "FK_Faculties_Universities", "Universities", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SetUp.University), "Faculties", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SetUp.Faculty), true)]
[assembly: EdmRelationshipAttribute("SetUp", "FK_GradingSystem_Universities", "Universities", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SetUp.University), "GradingSystem", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SetUp.GradingSystem), true)]
[assembly: EdmRelationshipAttribute("SetUp", "FK_StatesLGA", "States", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SetUp.State), "LGAs", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SetUp.LGA), true)]
[assembly: EdmRelationshipAttribute("SetUp", "FK_Modules_Universities", "Universities", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SetUp.University), "Modules", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SetUp.Module), true)]
[assembly: EdmRelationshipAttribute("SetUp", "FK_Screens_Screens", "Modules", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SetUp.Module), "Screens", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SetUp.Screen), true)]
[assembly: EdmRelationshipAttribute("SetUp", "FK_Staff_Universities", "Universities", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SetUp.University), "Staff", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SetUp.Staff), true)]
[assembly: EdmRelationshipAttribute("SetUp", "FK_SubjectRequirementDetails_SubjectRequirements", "SubjectRequirements", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SetUp.SubjectRequirement), "SubjectRequirementDetails", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SetUp.SubjectRequirementDetail), true)]
[assembly: EdmRelationshipAttribute("SetUp", "FK_ParametersDescriptions", "Parameter", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SetUp.Parameter), "Description", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SetUp.Description), true)]

#endregion

namespace SetUp
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class SetUpEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new SetUpEntities object using the connection string found in the 'SetUpEntities' section of the application configuration file.
        /// </summary>
        public SetUpEntities() : base("name=SetUpEntities", "SetUpEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new SetUpEntities object.
        /// </summary>
        public SetUpEntities(string connectionString) : base(connectionString, "SetUpEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new SetUpEntities object.
        /// </summary>
        public SetUpEntities(EntityConnection connection) : base(connection, "SetUpEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Approval> Approvals
        {
            get
            {
                if ((_Approvals == null))
                {
                    _Approvals = base.CreateObjectSet<Approval>("Approvals");
                }
                return _Approvals;
            }
        }
        private ObjectSet<Approval> _Approvals;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<AreasOfSpecialization> AreasOfSpecializations
        {
            get
            {
                if ((_AreasOfSpecializations == null))
                {
                    _AreasOfSpecializations = base.CreateObjectSet<AreasOfSpecialization>("AreasOfSpecializations");
                }
                return _AreasOfSpecializations;
            }
        }
        private ObjectSet<AreasOfSpecialization> _AreasOfSpecializations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Country> Countries
        {
            get
            {
                if ((_Countries == null))
                {
                    _Countries = base.CreateObjectSet<Country>("Countries");
                }
                return _Countries;
            }
        }
        private ObjectSet<Country> _Countries;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CourseNumbering> CourseNumberings
        {
            get
            {
                if ((_CourseNumberings == null))
                {
                    _CourseNumberings = base.CreateObjectSet<CourseNumbering>("CourseNumberings");
                }
                return _CourseNumberings;
            }
        }
        private ObjectSet<CourseNumbering> _CourseNumberings;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CourseRegulation> CourseRegulations
        {
            get
            {
                if ((_CourseRegulations == null))
                {
                    _CourseRegulations = base.CreateObjectSet<CourseRegulation>("CourseRegulations");
                }
                return _CourseRegulations;
            }
        }
        private ObjectSet<CourseRegulation> _CourseRegulations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Cours> Courses
        {
            get
            {
                if ((_Courses == null))
                {
                    _Courses = base.CreateObjectSet<Cours>("Courses");
                }
                return _Courses;
            }
        }
        private ObjectSet<Cours> _Courses;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Department> Departments
        {
            get
            {
                if ((_Departments == null))
                {
                    _Departments = base.CreateObjectSet<Department>("Departments");
                }
                return _Departments;
            }
        }
        private ObjectSet<Department> _Departments;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Designation> Designations
        {
            get
            {
                if ((_Designations == null))
                {
                    _Designations = base.CreateObjectSet<Designation>("Designations");
                }
                return _Designations;
            }
        }
        private ObjectSet<Designation> _Designations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Duration> Durations
        {
            get
            {
                if ((_Durations == null))
                {
                    _Durations = base.CreateObjectSet<Duration>("Durations");
                }
                return _Durations;
            }
        }
        private ObjectSet<Duration> _Durations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<EntryRequirement> EntryRequirements
        {
            get
            {
                if ((_EntryRequirements == null))
                {
                    _EntryRequirements = base.CreateObjectSet<EntryRequirement>("EntryRequirements");
                }
                return _EntryRequirements;
            }
        }
        private ObjectSet<EntryRequirement> _EntryRequirements;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Faculty> Faculties
        {
            get
            {
                if ((_Faculties == null))
                {
                    _Faculties = base.CreateObjectSet<Faculty>("Faculties");
                }
                return _Faculties;
            }
        }
        private ObjectSet<Faculty> _Faculties;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<GradingSystem> GradingSystems
        {
            get
            {
                if ((_GradingSystems == null))
                {
                    _GradingSystems = base.CreateObjectSet<GradingSystem>("GradingSystems");
                }
                return _GradingSystems;
            }
        }
        private ObjectSet<GradingSystem> _GradingSystems;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<LGA> LGAs
        {
            get
            {
                if ((_LGAs == null))
                {
                    _LGAs = base.CreateObjectSet<LGA>("LGAs");
                }
                return _LGAs;
            }
        }
        private ObjectSet<LGA> _LGAs;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Locking> Lockings
        {
            get
            {
                if ((_Lockings == null))
                {
                    _Lockings = base.CreateObjectSet<Locking>("Lockings");
                }
                return _Lockings;
            }
        }
        private ObjectSet<Locking> _Lockings;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Module> Modules
        {
            get
            {
                if ((_Modules == null))
                {
                    _Modules = base.CreateObjectSet<Module>("Modules");
                }
                return _Modules;
            }
        }
        private ObjectSet<Module> _Modules;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Parameter> Parameters
        {
            get
            {
                if ((_Parameters == null))
                {
                    _Parameters = base.CreateObjectSet<Parameter>("Parameters");
                }
                return _Parameters;
            }
        }
        private ObjectSet<Parameter> _Parameters;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ProgramRequirement> ProgramRequirements
        {
            get
            {
                if ((_ProgramRequirements == null))
                {
                    _ProgramRequirements = base.CreateObjectSet<ProgramRequirement>("ProgramRequirements");
                }
                return _ProgramRequirements;
            }
        }
        private ObjectSet<ProgramRequirement> _ProgramRequirements;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Program> Programs
        {
            get
            {
                if ((_Programs == null))
                {
                    _Programs = base.CreateObjectSet<Program>("Programs");
                }
                return _Programs;
            }
        }
        private ObjectSet<Program> _Programs;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Schedule> Schedules
        {
            get
            {
                if ((_Schedules == null))
                {
                    _Schedules = base.CreateObjectSet<Schedule>("Schedules");
                }
                return _Schedules;
            }
        }
        private ObjectSet<Schedule> _Schedules;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Screen> Screens
        {
            get
            {
                if ((_Screens == null))
                {
                    _Screens = base.CreateObjectSet<Screen>("Screens");
                }
                return _Screens;
            }
        }
        private ObjectSet<Screen> _Screens;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Staff> Staffs
        {
            get
            {
                if ((_Staffs == null))
                {
                    _Staffs = base.CreateObjectSet<Staff>("Staffs");
                }
                return _Staffs;
            }
        }
        private ObjectSet<Staff> _Staffs;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<State> States
        {
            get
            {
                if ((_States == null))
                {
                    _States = base.CreateObjectSet<State>("States");
                }
                return _States;
            }
        }
        private ObjectSet<State> _States;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SubCours> SubCourses
        {
            get
            {
                if ((_SubCourses == null))
                {
                    _SubCourses = base.CreateObjectSet<SubCours>("SubCourses");
                }
                return _SubCourses;
            }
        }
        private ObjectSet<SubCours> _SubCourses;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SubjectRequirementDetail> SubjectRequirementDetails
        {
            get
            {
                if ((_SubjectRequirementDetails == null))
                {
                    _SubjectRequirementDetails = base.CreateObjectSet<SubjectRequirementDetail>("SubjectRequirementDetails");
                }
                return _SubjectRequirementDetails;
            }
        }
        private ObjectSet<SubjectRequirementDetail> _SubjectRequirementDetails;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SubjectRequirement> SubjectRequirements
        {
            get
            {
                if ((_SubjectRequirements == null))
                {
                    _SubjectRequirements = base.CreateObjectSet<SubjectRequirement>("SubjectRequirements");
                }
                return _SubjectRequirements;
            }
        }
        private ObjectSet<SubjectRequirement> _SubjectRequirements;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<University> Universities
        {
            get
            {
                if ((_Universities == null))
                {
                    _Universities = base.CreateObjectSet<University>("Universities");
                }
                return _Universities;
            }
        }
        private ObjectSet<University> _Universities;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Description> Descriptions
        {
            get
            {
                if ((_Descriptions == null))
                {
                    _Descriptions = base.CreateObjectSet<Description>("Descriptions");
                }
                return _Descriptions;
            }
        }
        private ObjectSet<Description> _Descriptions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Permission> Permissions
        {
            get
            {
                if ((_Permissions == null))
                {
                    _Permissions = base.CreateObjectSet<Permission>("Permissions");
                }
                return _Permissions;
            }
        }
        private ObjectSet<Permission> _Permissions;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Approvals EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToApprovals(Approval approval)
        {
            base.AddObject("Approvals", approval);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the AreasOfSpecializations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAreasOfSpecializations(AreasOfSpecialization areasOfSpecialization)
        {
            base.AddObject("AreasOfSpecializations", areasOfSpecialization);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Countries EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCountries(Country country)
        {
            base.AddObject("Countries", country);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CourseNumberings EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCourseNumberings(CourseNumbering courseNumbering)
        {
            base.AddObject("CourseNumberings", courseNumbering);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CourseRegulations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCourseRegulations(CourseRegulation courseRegulation)
        {
            base.AddObject("CourseRegulations", courseRegulation);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Courses EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCourses(Cours cours)
        {
            base.AddObject("Courses", cours);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Departments EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDepartments(Department department)
        {
            base.AddObject("Departments", department);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Designations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDesignations(Designation designation)
        {
            base.AddObject("Designations", designation);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Durations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDurations(Duration duration)
        {
            base.AddObject("Durations", duration);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the EntryRequirements EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToEntryRequirements(EntryRequirement entryRequirement)
        {
            base.AddObject("EntryRequirements", entryRequirement);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Faculties EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFaculties(Faculty faculty)
        {
            base.AddObject("Faculties", faculty);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the GradingSystems EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGradingSystems(GradingSystem gradingSystem)
        {
            base.AddObject("GradingSystems", gradingSystem);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the LGAs EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLGAs(LGA lGA)
        {
            base.AddObject("LGAs", lGA);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Lockings EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLockings(Locking locking)
        {
            base.AddObject("Lockings", locking);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Modules EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToModules(Module module)
        {
            base.AddObject("Modules", module);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Parameters EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToParameters(Parameter parameter)
        {
            base.AddObject("Parameters", parameter);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ProgramRequirements EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToProgramRequirements(ProgramRequirement programRequirement)
        {
            base.AddObject("ProgramRequirements", programRequirement);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Programs EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPrograms(Program program)
        {
            base.AddObject("Programs", program);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Schedules EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSchedules(Schedule schedule)
        {
            base.AddObject("Schedules", schedule);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Screens EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToScreens(Screen screen)
        {
            base.AddObject("Screens", screen);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Staffs EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToStaffs(Staff staff)
        {
            base.AddObject("Staffs", staff);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the States EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToStates(State state)
        {
            base.AddObject("States", state);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SubCourses EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSubCourses(SubCours subCours)
        {
            base.AddObject("SubCourses", subCours);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SubjectRequirementDetails EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSubjectRequirementDetails(SubjectRequirementDetail subjectRequirementDetail)
        {
            base.AddObject("SubjectRequirementDetails", subjectRequirementDetail);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SubjectRequirements EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSubjectRequirements(SubjectRequirement subjectRequirement)
        {
            base.AddObject("SubjectRequirements", subjectRequirement);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Universities EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUniversities(University university)
        {
            base.AddObject("Universities", university);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Descriptions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDescriptions(Description description)
        {
            base.AddObject("Descriptions", description);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Permissions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPermissions(Permission permission)
        {
            base.AddObject("Permissions", permission);
        }

        #endregion
        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Approval> SPApprovalsDeletePermanently(Nullable<global::System.Guid> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<Approval>("SPApprovalsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Approval> SPApprovalsDeletePermanently(Nullable<global::System.Guid> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<Approval>("SPApprovalsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="sessionCode">No Metadata Documentation available.</param>
        /// <param name="moduleCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="levelCode">No Metadata Documentation available.</param>
        /// <param name="roleCode">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="entityCode">No Metadata Documentation available.</param>
        /// <param name="approvalType">No Metadata Documentation available.</param>
        /// <param name="order">No Metadata Documentation available.</param>
        /// <param name="approved">No Metadata Documentation available.</param>
        /// <param name="approvedOn">No Metadata Documentation available.</param>
        /// <param name="approvedBy">No Metadata Documentation available.</param>
        /// <param name="approvedNotes">No Metadata Documentation available.</param>
        /// <param name="requested">No Metadata Documentation available.</param>
        /// <param name="requestedOn">No Metadata Documentation available.</param>
        /// <param name="requestedBy">No Metadata Documentation available.</param>
        /// <param name="requestedNotes">No Metadata Documentation available.</param>
        /// <param name="rejected">No Metadata Documentation available.</param>
        /// <param name="rejectedOn">No Metadata Documentation available.</param>
        /// <param name="rejectedBy">No Metadata Documentation available.</param>
        /// <param name="rejectedNotes">No Metadata Documentation available.</param>
        public ObjectResult<Approval> SPApprovalsInsertUpdate(Nullable<global::System.Guid> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int32> programCode, global::System.String sessionCode, global::System.String moduleCode, global::System.String screenCode, global::System.String semesterCode, Nullable<global::System.Int32> levelCode, Nullable<global::System.Guid> roleCode, global::System.String accountCode, global::System.String entityCode, global::System.String approvalType, Nullable<global::System.Int32> order, Nullable<global::System.Boolean> approved, Nullable<global::System.DateTime> approvedOn, global::System.String approvedBy, global::System.String approvedNotes, Nullable<global::System.Boolean> requested, Nullable<global::System.DateTime> requestedOn, global::System.String requestedBy, global::System.String requestedNotes, Nullable<global::System.Boolean> rejected, Nullable<global::System.DateTime> rejectedOn, global::System.String rejectedBy, global::System.String rejectedNotes)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Guid));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int32));
            }
    
            ObjectParameter sessionCodeParameter;
            if (sessionCode != null)
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", sessionCode);
            }
            else
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", typeof(global::System.String));
            }
    
            ObjectParameter moduleCodeParameter;
            if (moduleCode != null)
            {
                moduleCodeParameter = new ObjectParameter("ModuleCode", moduleCode);
            }
            else
            {
                moduleCodeParameter = new ObjectParameter("ModuleCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode != null)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.String));
            }
    
            ObjectParameter levelCodeParameter;
            if (levelCode.HasValue)
            {
                levelCodeParameter = new ObjectParameter("LevelCode", levelCode);
            }
            else
            {
                levelCodeParameter = new ObjectParameter("LevelCode", typeof(global::System.Int32));
            }
    
            ObjectParameter roleCodeParameter;
            if (roleCode.HasValue)
            {
                roleCodeParameter = new ObjectParameter("RoleCode", roleCode);
            }
            else
            {
                roleCodeParameter = new ObjectParameter("RoleCode", typeof(global::System.Guid));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter entityCodeParameter;
            if (entityCode != null)
            {
                entityCodeParameter = new ObjectParameter("EntityCode", entityCode);
            }
            else
            {
                entityCodeParameter = new ObjectParameter("EntityCode", typeof(global::System.String));
            }
    
            ObjectParameter approvalTypeParameter;
            if (approvalType != null)
            {
                approvalTypeParameter = new ObjectParameter("ApprovalType", approvalType);
            }
            else
            {
                approvalTypeParameter = new ObjectParameter("ApprovalType", typeof(global::System.String));
            }
    
            ObjectParameter orderParameter;
            if (order.HasValue)
            {
                orderParameter = new ObjectParameter("Order", order);
            }
            else
            {
                orderParameter = new ObjectParameter("Order", typeof(global::System.Int32));
            }
    
            ObjectParameter approvedParameter;
            if (approved.HasValue)
            {
                approvedParameter = new ObjectParameter("Approved", approved);
            }
            else
            {
                approvedParameter = new ObjectParameter("Approved", typeof(global::System.Boolean));
            }
    
            ObjectParameter approvedOnParameter;
            if (approvedOn.HasValue)
            {
                approvedOnParameter = new ObjectParameter("ApprovedOn", approvedOn);
            }
            else
            {
                approvedOnParameter = new ObjectParameter("ApprovedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter approvedByParameter;
            if (approvedBy != null)
            {
                approvedByParameter = new ObjectParameter("ApprovedBy", approvedBy);
            }
            else
            {
                approvedByParameter = new ObjectParameter("ApprovedBy", typeof(global::System.String));
            }
    
            ObjectParameter approvedNotesParameter;
            if (approvedNotes != null)
            {
                approvedNotesParameter = new ObjectParameter("ApprovedNotes", approvedNotes);
            }
            else
            {
                approvedNotesParameter = new ObjectParameter("ApprovedNotes", typeof(global::System.String));
            }
    
            ObjectParameter requestedParameter;
            if (requested.HasValue)
            {
                requestedParameter = new ObjectParameter("Requested", requested);
            }
            else
            {
                requestedParameter = new ObjectParameter("Requested", typeof(global::System.Boolean));
            }
    
            ObjectParameter requestedOnParameter;
            if (requestedOn.HasValue)
            {
                requestedOnParameter = new ObjectParameter("RequestedOn", requestedOn);
            }
            else
            {
                requestedOnParameter = new ObjectParameter("RequestedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter requestedByParameter;
            if (requestedBy != null)
            {
                requestedByParameter = new ObjectParameter("RequestedBy", requestedBy);
            }
            else
            {
                requestedByParameter = new ObjectParameter("RequestedBy", typeof(global::System.String));
            }
    
            ObjectParameter requestedNotesParameter;
            if (requestedNotes != null)
            {
                requestedNotesParameter = new ObjectParameter("RequestedNotes", requestedNotes);
            }
            else
            {
                requestedNotesParameter = new ObjectParameter("RequestedNotes", typeof(global::System.String));
            }
    
            ObjectParameter rejectedParameter;
            if (rejected.HasValue)
            {
                rejectedParameter = new ObjectParameter("Rejected", rejected);
            }
            else
            {
                rejectedParameter = new ObjectParameter("Rejected", typeof(global::System.Boolean));
            }
    
            ObjectParameter rejectedOnParameter;
            if (rejectedOn.HasValue)
            {
                rejectedOnParameter = new ObjectParameter("RejectedOn", rejectedOn);
            }
            else
            {
                rejectedOnParameter = new ObjectParameter("RejectedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter rejectedByParameter;
            if (rejectedBy != null)
            {
                rejectedByParameter = new ObjectParameter("RejectedBy", rejectedBy);
            }
            else
            {
                rejectedByParameter = new ObjectParameter("RejectedBy", typeof(global::System.String));
            }
    
            ObjectParameter rejectedNotesParameter;
            if (rejectedNotes != null)
            {
                rejectedNotesParameter = new ObjectParameter("RejectedNotes", rejectedNotes);
            }
            else
            {
                rejectedNotesParameter = new ObjectParameter("RejectedNotes", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Approval>("SPApprovalsInsertUpdate", codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, sessionCodeParameter, moduleCodeParameter, screenCodeParameter, semesterCodeParameter, levelCodeParameter, roleCodeParameter, accountCodeParameter, entityCodeParameter, approvalTypeParameter, orderParameter, approvedParameter, approvedOnParameter, approvedByParameter, approvedNotesParameter, requestedParameter, requestedOnParameter, requestedByParameter, requestedNotesParameter, rejectedParameter, rejectedOnParameter, rejectedByParameter, rejectedNotesParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="sessionCode">No Metadata Documentation available.</param>
        /// <param name="moduleCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="levelCode">No Metadata Documentation available.</param>
        /// <param name="roleCode">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="entityCode">No Metadata Documentation available.</param>
        /// <param name="approvalType">No Metadata Documentation available.</param>
        /// <param name="order">No Metadata Documentation available.</param>
        /// <param name="approved">No Metadata Documentation available.</param>
        /// <param name="approvedOn">No Metadata Documentation available.</param>
        /// <param name="approvedBy">No Metadata Documentation available.</param>
        /// <param name="approvedNotes">No Metadata Documentation available.</param>
        /// <param name="requested">No Metadata Documentation available.</param>
        /// <param name="requestedOn">No Metadata Documentation available.</param>
        /// <param name="requestedBy">No Metadata Documentation available.</param>
        /// <param name="requestedNotes">No Metadata Documentation available.</param>
        /// <param name="rejected">No Metadata Documentation available.</param>
        /// <param name="rejectedOn">No Metadata Documentation available.</param>
        /// <param name="rejectedBy">No Metadata Documentation available.</param>
        /// <param name="rejectedNotes">No Metadata Documentation available.</param>
        public ObjectResult<Approval> SPApprovalsInsertUpdate(Nullable<global::System.Guid> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int32> programCode, global::System.String sessionCode, global::System.String moduleCode, global::System.String screenCode, global::System.String semesterCode, Nullable<global::System.Int32> levelCode, Nullable<global::System.Guid> roleCode, global::System.String accountCode, global::System.String entityCode, global::System.String approvalType, Nullable<global::System.Int32> order, Nullable<global::System.Boolean> approved, Nullable<global::System.DateTime> approvedOn, global::System.String approvedBy, global::System.String approvedNotes, Nullable<global::System.Boolean> requested, Nullable<global::System.DateTime> requestedOn, global::System.String requestedBy, global::System.String requestedNotes, Nullable<global::System.Boolean> rejected, Nullable<global::System.DateTime> rejectedOn, global::System.String rejectedBy, global::System.String rejectedNotes, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Guid));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int32));
            }
    
            ObjectParameter sessionCodeParameter;
            if (sessionCode != null)
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", sessionCode);
            }
            else
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", typeof(global::System.String));
            }
    
            ObjectParameter moduleCodeParameter;
            if (moduleCode != null)
            {
                moduleCodeParameter = new ObjectParameter("ModuleCode", moduleCode);
            }
            else
            {
                moduleCodeParameter = new ObjectParameter("ModuleCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode != null)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.String));
            }
    
            ObjectParameter levelCodeParameter;
            if (levelCode.HasValue)
            {
                levelCodeParameter = new ObjectParameter("LevelCode", levelCode);
            }
            else
            {
                levelCodeParameter = new ObjectParameter("LevelCode", typeof(global::System.Int32));
            }
    
            ObjectParameter roleCodeParameter;
            if (roleCode.HasValue)
            {
                roleCodeParameter = new ObjectParameter("RoleCode", roleCode);
            }
            else
            {
                roleCodeParameter = new ObjectParameter("RoleCode", typeof(global::System.Guid));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter entityCodeParameter;
            if (entityCode != null)
            {
                entityCodeParameter = new ObjectParameter("EntityCode", entityCode);
            }
            else
            {
                entityCodeParameter = new ObjectParameter("EntityCode", typeof(global::System.String));
            }
    
            ObjectParameter approvalTypeParameter;
            if (approvalType != null)
            {
                approvalTypeParameter = new ObjectParameter("ApprovalType", approvalType);
            }
            else
            {
                approvalTypeParameter = new ObjectParameter("ApprovalType", typeof(global::System.String));
            }
    
            ObjectParameter orderParameter;
            if (order.HasValue)
            {
                orderParameter = new ObjectParameter("Order", order);
            }
            else
            {
                orderParameter = new ObjectParameter("Order", typeof(global::System.Int32));
            }
    
            ObjectParameter approvedParameter;
            if (approved.HasValue)
            {
                approvedParameter = new ObjectParameter("Approved", approved);
            }
            else
            {
                approvedParameter = new ObjectParameter("Approved", typeof(global::System.Boolean));
            }
    
            ObjectParameter approvedOnParameter;
            if (approvedOn.HasValue)
            {
                approvedOnParameter = new ObjectParameter("ApprovedOn", approvedOn);
            }
            else
            {
                approvedOnParameter = new ObjectParameter("ApprovedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter approvedByParameter;
            if (approvedBy != null)
            {
                approvedByParameter = new ObjectParameter("ApprovedBy", approvedBy);
            }
            else
            {
                approvedByParameter = new ObjectParameter("ApprovedBy", typeof(global::System.String));
            }
    
            ObjectParameter approvedNotesParameter;
            if (approvedNotes != null)
            {
                approvedNotesParameter = new ObjectParameter("ApprovedNotes", approvedNotes);
            }
            else
            {
                approvedNotesParameter = new ObjectParameter("ApprovedNotes", typeof(global::System.String));
            }
    
            ObjectParameter requestedParameter;
            if (requested.HasValue)
            {
                requestedParameter = new ObjectParameter("Requested", requested);
            }
            else
            {
                requestedParameter = new ObjectParameter("Requested", typeof(global::System.Boolean));
            }
    
            ObjectParameter requestedOnParameter;
            if (requestedOn.HasValue)
            {
                requestedOnParameter = new ObjectParameter("RequestedOn", requestedOn);
            }
            else
            {
                requestedOnParameter = new ObjectParameter("RequestedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter requestedByParameter;
            if (requestedBy != null)
            {
                requestedByParameter = new ObjectParameter("RequestedBy", requestedBy);
            }
            else
            {
                requestedByParameter = new ObjectParameter("RequestedBy", typeof(global::System.String));
            }
    
            ObjectParameter requestedNotesParameter;
            if (requestedNotes != null)
            {
                requestedNotesParameter = new ObjectParameter("RequestedNotes", requestedNotes);
            }
            else
            {
                requestedNotesParameter = new ObjectParameter("RequestedNotes", typeof(global::System.String));
            }
    
            ObjectParameter rejectedParameter;
            if (rejected.HasValue)
            {
                rejectedParameter = new ObjectParameter("Rejected", rejected);
            }
            else
            {
                rejectedParameter = new ObjectParameter("Rejected", typeof(global::System.Boolean));
            }
    
            ObjectParameter rejectedOnParameter;
            if (rejectedOn.HasValue)
            {
                rejectedOnParameter = new ObjectParameter("RejectedOn", rejectedOn);
            }
            else
            {
                rejectedOnParameter = new ObjectParameter("RejectedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter rejectedByParameter;
            if (rejectedBy != null)
            {
                rejectedByParameter = new ObjectParameter("RejectedBy", rejectedBy);
            }
            else
            {
                rejectedByParameter = new ObjectParameter("RejectedBy", typeof(global::System.String));
            }
    
            ObjectParameter rejectedNotesParameter;
            if (rejectedNotes != null)
            {
                rejectedNotesParameter = new ObjectParameter("RejectedNotes", rejectedNotes);
            }
            else
            {
                rejectedNotesParameter = new ObjectParameter("RejectedNotes", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Approval>("SPApprovalsInsertUpdate", mergeOption, codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, sessionCodeParameter, moduleCodeParameter, screenCodeParameter, semesterCodeParameter, levelCodeParameter, roleCodeParameter, accountCodeParameter, entityCodeParameter, approvalTypeParameter, orderParameter, approvedParameter, approvedOnParameter, approvedByParameter, approvedNotesParameter, requestedParameter, requestedOnParameter, requestedByParameter, requestedNotesParameter, rejectedParameter, rejectedOnParameter, rejectedByParameter, rejectedNotesParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        public ObjectResult<Approval> SPApprovalsSelect(Nullable<global::System.Guid> code, global::System.String universityCode, global::System.String screenCode)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Guid));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Approval>("SPApprovalsSelect", codeParameter, universityCodeParameter, screenCodeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        public ObjectResult<Approval> SPApprovalsSelect(Nullable<global::System.Guid> code, global::System.String universityCode, global::System.String screenCode, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Guid));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Approval>("SPApprovalsSelect", mergeOption, codeParameter, universityCodeParameter, screenCodeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<AreasOfSpecialization> SPAreasOfSpecializationsDeletePermanently(Nullable<global::System.Int32> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<AreasOfSpecialization>("SPAreasOfSpecializationsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<AreasOfSpecialization> SPAreasOfSpecializationsDeletePermanently(Nullable<global::System.Int32> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<AreasOfSpecialization>("SPAreasOfSpecializationsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="descriptionsCode">No Metadata Documentation available.</param>
        /// <param name="specialization">No Metadata Documentation available.</param>
        public ObjectResult<AreasOfSpecialization> SPAreasOfSpecializationsInsertUpdate(Nullable<global::System.Int32> code, global::System.String descriptionsCode, global::System.String specialization)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter descriptionsCodeParameter;
            if (descriptionsCode != null)
            {
                descriptionsCodeParameter = new ObjectParameter("DescriptionsCode", descriptionsCode);
            }
            else
            {
                descriptionsCodeParameter = new ObjectParameter("DescriptionsCode", typeof(global::System.String));
            }
    
            ObjectParameter specializationParameter;
            if (specialization != null)
            {
                specializationParameter = new ObjectParameter("Specialization", specialization);
            }
            else
            {
                specializationParameter = new ObjectParameter("Specialization", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<AreasOfSpecialization>("SPAreasOfSpecializationsInsertUpdate", codeParameter, descriptionsCodeParameter, specializationParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="descriptionsCode">No Metadata Documentation available.</param>
        /// <param name="specialization">No Metadata Documentation available.</param>
        public ObjectResult<AreasOfSpecialization> SPAreasOfSpecializationsInsertUpdate(Nullable<global::System.Int32> code, global::System.String descriptionsCode, global::System.String specialization, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter descriptionsCodeParameter;
            if (descriptionsCode != null)
            {
                descriptionsCodeParameter = new ObjectParameter("DescriptionsCode", descriptionsCode);
            }
            else
            {
                descriptionsCodeParameter = new ObjectParameter("DescriptionsCode", typeof(global::System.String));
            }
    
            ObjectParameter specializationParameter;
            if (specialization != null)
            {
                specializationParameter = new ObjectParameter("Specialization", specialization);
            }
            else
            {
                specializationParameter = new ObjectParameter("Specialization", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<AreasOfSpecialization>("SPAreasOfSpecializationsInsertUpdate", mergeOption, codeParameter, descriptionsCodeParameter, specializationParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="descriptionsCode">No Metadata Documentation available.</param>
        public ObjectResult<AreasOfSpecialization> SPAreasOfSpecializationsSelect(Nullable<global::System.Int32> code, global::System.String descriptionsCode)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter descriptionsCodeParameter;
            if (descriptionsCode != null)
            {
                descriptionsCodeParameter = new ObjectParameter("DescriptionsCode", descriptionsCode);
            }
            else
            {
                descriptionsCodeParameter = new ObjectParameter("DescriptionsCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<AreasOfSpecialization>("SPAreasOfSpecializationsSelect", codeParameter, descriptionsCodeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="descriptionsCode">No Metadata Documentation available.</param>
        public ObjectResult<AreasOfSpecialization> SPAreasOfSpecializationsSelect(Nullable<global::System.Int32> code, global::System.String descriptionsCode, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter descriptionsCodeParameter;
            if (descriptionsCode != null)
            {
                descriptionsCodeParameter = new ObjectParameter("DescriptionsCode", descriptionsCode);
            }
            else
            {
                descriptionsCodeParameter = new ObjectParameter("DescriptionsCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<AreasOfSpecialization>("SPAreasOfSpecializationsSelect", mergeOption, codeParameter, descriptionsCodeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Country> SPCountriesDeletePermanently(global::System.String code)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Country>("SPCountriesDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Country> SPCountriesDeletePermanently(global::System.String code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Country>("SPCountriesDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        public ObjectResult<Country> SPCountriesInsertUpdate(global::System.String code, global::System.String name)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Country>("SPCountriesInsertUpdate", codeParameter, nameParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        public ObjectResult<Country> SPCountriesInsertUpdate(global::System.String code, global::System.String name, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Country>("SPCountriesInsertUpdate", mergeOption, codeParameter, nameParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Country> SPCountriesSelect(global::System.String code)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Country>("SPCountriesSelect", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Country> SPCountriesSelect(global::System.String code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Country>("SPCountriesSelect", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<CourseNumbering> SPCourseNumberingDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<CourseNumbering>("SPCourseNumberingDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<CourseNumbering> SPCourseNumberingDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<CourseNumbering>("SPCourseNumberingDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="numberingLowerBound">No Metadata Documentation available.</param>
        /// <param name="numberingUpperBound">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<CourseNumbering> SPCourseNumberingInsertUpdate(Nullable<global::System.Int64> code, Nullable<global::System.Int64> numberingLowerBound, Nullable<global::System.Int64> numberingUpperBound, global::System.String notes, global::System.String universityCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter numberingLowerBoundParameter;
            if (numberingLowerBound.HasValue)
            {
                numberingLowerBoundParameter = new ObjectParameter("NumberingLowerBound", numberingLowerBound);
            }
            else
            {
                numberingLowerBoundParameter = new ObjectParameter("NumberingLowerBound", typeof(global::System.Int64));
            }
    
            ObjectParameter numberingUpperBoundParameter;
            if (numberingUpperBound.HasValue)
            {
                numberingUpperBoundParameter = new ObjectParameter("NumberingUpperBound", numberingUpperBound);
            }
            else
            {
                numberingUpperBoundParameter = new ObjectParameter("NumberingUpperBound", typeof(global::System.Int64));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<CourseNumbering>("SPCourseNumberingInsertUpdate", codeParameter, numberingLowerBoundParameter, numberingUpperBoundParameter, notesParameter, universityCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="numberingLowerBound">No Metadata Documentation available.</param>
        /// <param name="numberingUpperBound">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<CourseNumbering> SPCourseNumberingInsertUpdate(Nullable<global::System.Int64> code, Nullable<global::System.Int64> numberingLowerBound, Nullable<global::System.Int64> numberingUpperBound, global::System.String notes, global::System.String universityCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter numberingLowerBoundParameter;
            if (numberingLowerBound.HasValue)
            {
                numberingLowerBoundParameter = new ObjectParameter("NumberingLowerBound", numberingLowerBound);
            }
            else
            {
                numberingLowerBoundParameter = new ObjectParameter("NumberingLowerBound", typeof(global::System.Int64));
            }
    
            ObjectParameter numberingUpperBoundParameter;
            if (numberingUpperBound.HasValue)
            {
                numberingUpperBoundParameter = new ObjectParameter("NumberingUpperBound", numberingUpperBound);
            }
            else
            {
                numberingUpperBoundParameter = new ObjectParameter("NumberingUpperBound", typeof(global::System.Int64));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<CourseNumbering>("SPCourseNumberingInsertUpdate", mergeOption, codeParameter, numberingLowerBoundParameter, numberingUpperBoundParameter, notesParameter, universityCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<CourseNumbering> SPCourseNumberingSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<CourseNumbering>("SPCourseNumberingSelect", codeParameter, universityCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<CourseNumbering> SPCourseNumberingSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<CourseNumbering>("SPCourseNumberingSelect", mergeOption, codeParameter, universityCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<CourseRegulation> SPCourseRegulationDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<CourseRegulation>("SPCourseRegulationDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<CourseRegulation> SPCourseRegulationDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<CourseRegulation>("SPCourseRegulationDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="levelCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="creditLowerBound">No Metadata Documentation available.</param>
        /// <param name="creditUpperBound">No Metadata Documentation available.</param>
        /// <param name="modeOfStudyCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<CourseRegulation> SPCourseRegulationInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, Nullable<global::System.Int64> levelCode, global::System.String semesterCode, Nullable<global::System.Int32> creditLowerBound, Nullable<global::System.Int32> creditUpperBound, global::System.String modeOfStudyCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter levelCodeParameter;
            if (levelCode.HasValue)
            {
                levelCodeParameter = new ObjectParameter("LevelCode", levelCode);
            }
            else
            {
                levelCodeParameter = new ObjectParameter("LevelCode", typeof(global::System.Int64));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode != null)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.String));
            }
    
            ObjectParameter creditLowerBoundParameter;
            if (creditLowerBound.HasValue)
            {
                creditLowerBoundParameter = new ObjectParameter("CreditLowerBound", creditLowerBound);
            }
            else
            {
                creditLowerBoundParameter = new ObjectParameter("CreditLowerBound", typeof(global::System.Int32));
            }
    
            ObjectParameter creditUpperBoundParameter;
            if (creditUpperBound.HasValue)
            {
                creditUpperBoundParameter = new ObjectParameter("CreditUpperBound", creditUpperBound);
            }
            else
            {
                creditUpperBoundParameter = new ObjectParameter("CreditUpperBound", typeof(global::System.Int32));
            }
    
            ObjectParameter modeOfStudyCodeParameter;
            if (modeOfStudyCode != null)
            {
                modeOfStudyCodeParameter = new ObjectParameter("ModeOfStudyCode", modeOfStudyCode);
            }
            else
            {
                modeOfStudyCodeParameter = new ObjectParameter("ModeOfStudyCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<CourseRegulation>("SPCourseRegulationInsertUpdate", codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, levelCodeParameter, semesterCodeParameter, creditLowerBoundParameter, creditUpperBoundParameter, modeOfStudyCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="levelCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="creditLowerBound">No Metadata Documentation available.</param>
        /// <param name="creditUpperBound">No Metadata Documentation available.</param>
        /// <param name="modeOfStudyCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<CourseRegulation> SPCourseRegulationInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, Nullable<global::System.Int64> levelCode, global::System.String semesterCode, Nullable<global::System.Int32> creditLowerBound, Nullable<global::System.Int32> creditUpperBound, global::System.String modeOfStudyCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter levelCodeParameter;
            if (levelCode.HasValue)
            {
                levelCodeParameter = new ObjectParameter("LevelCode", levelCode);
            }
            else
            {
                levelCodeParameter = new ObjectParameter("LevelCode", typeof(global::System.Int64));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode != null)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.String));
            }
    
            ObjectParameter creditLowerBoundParameter;
            if (creditLowerBound.HasValue)
            {
                creditLowerBoundParameter = new ObjectParameter("CreditLowerBound", creditLowerBound);
            }
            else
            {
                creditLowerBoundParameter = new ObjectParameter("CreditLowerBound", typeof(global::System.Int32));
            }
    
            ObjectParameter creditUpperBoundParameter;
            if (creditUpperBound.HasValue)
            {
                creditUpperBoundParameter = new ObjectParameter("CreditUpperBound", creditUpperBound);
            }
            else
            {
                creditUpperBoundParameter = new ObjectParameter("CreditUpperBound", typeof(global::System.Int32));
            }
    
            ObjectParameter modeOfStudyCodeParameter;
            if (modeOfStudyCode != null)
            {
                modeOfStudyCodeParameter = new ObjectParameter("ModeOfStudyCode", modeOfStudyCode);
            }
            else
            {
                modeOfStudyCodeParameter = new ObjectParameter("ModeOfStudyCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<CourseRegulation>("SPCourseRegulationInsertUpdate", mergeOption, codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, levelCodeParameter, semesterCodeParameter, creditLowerBoundParameter, creditUpperBoundParameter, modeOfStudyCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<CourseRegulation> SPCourseRegulationSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<CourseRegulation>("SPCourseRegulationSelect", codeParameter, universityCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<CourseRegulation> SPCourseRegulationSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<CourseRegulation>("SPCourseRegulationSelect", mergeOption, codeParameter, universityCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Cours> SPCoursesDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Cours>("SPCoursesDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Cours> SPCoursesDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Cours>("SPCoursesDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="acronym">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Cours> SPCoursesInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, global::System.String acronym, global::System.String description, global::System.String notes, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter acronymParameter;
            if (acronym != null)
            {
                acronymParameter = new ObjectParameter("Acronym", acronym);
            }
            else
            {
                acronymParameter = new ObjectParameter("Acronym", typeof(global::System.String));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Cours>("SPCoursesInsertUpdate", codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, acronymParameter, descriptionParameter, notesParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="acronym">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Cours> SPCoursesInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, global::System.String acronym, global::System.String description, global::System.String notes, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter acronymParameter;
            if (acronym != null)
            {
                acronymParameter = new ObjectParameter("Acronym", acronym);
            }
            else
            {
                acronymParameter = new ObjectParameter("Acronym", typeof(global::System.String));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Cours>("SPCoursesInsertUpdate", mergeOption, codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, acronymParameter, descriptionParameter, notesParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Cours> SPCoursesSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Cours>("SPCoursesSelect", codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Cours> SPCoursesSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Cours>("SPCoursesSelect", mergeOption, codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Department> SPDepartmentsDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Department>("SPDepartmentsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Department> SPDepartmentsDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Department>("SPDepartmentsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="acronym">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Department> SPDepartmentsInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, global::System.String acronym, global::System.String description, global::System.String notes, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter acronymParameter;
            if (acronym != null)
            {
                acronymParameter = new ObjectParameter("Acronym", acronym);
            }
            else
            {
                acronymParameter = new ObjectParameter("Acronym", typeof(global::System.String));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Department>("SPDepartmentsInsertUpdate", codeParameter, universityCodeParameter, facultyCodeParameter, acronymParameter, descriptionParameter, notesParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="acronym">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Department> SPDepartmentsInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, global::System.String acronym, global::System.String description, global::System.String notes, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter acronymParameter;
            if (acronym != null)
            {
                acronymParameter = new ObjectParameter("Acronym", acronym);
            }
            else
            {
                acronymParameter = new ObjectParameter("Acronym", typeof(global::System.String));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Department>("SPDepartmentsInsertUpdate", mergeOption, codeParameter, universityCodeParameter, facultyCodeParameter, acronymParameter, descriptionParameter, notesParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Department> SPDepartmentsSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Department>("SPDepartmentsSelect", codeParameter, universityCodeParameter, facultyCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Department> SPDepartmentsSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Department>("SPDepartmentsSelect", mergeOption, codeParameter, universityCodeParameter, facultyCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Description> SPDescriptionsDeletePermanently(global::System.String code)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Description>("SPDescriptionsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Description> SPDescriptionsDeletePermanently(global::System.String code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Description>("SPDescriptionsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="iD">No Metadata Documentation available.</param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="parametersCode">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        public ObjectResult<Description> SPDescriptionsInsertUpdate(Nullable<global::System.Int32> iD, global::System.String code, global::System.String parametersCode, global::System.String name, global::System.String notes)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int32));
            }
    
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter parametersCodeParameter;
            if (parametersCode != null)
            {
                parametersCodeParameter = new ObjectParameter("ParametersCode", parametersCode);
            }
            else
            {
                parametersCodeParameter = new ObjectParameter("ParametersCode", typeof(global::System.String));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Description>("SPDescriptionsInsertUpdate", iDParameter, codeParameter, parametersCodeParameter, nameParameter, notesParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="iD">No Metadata Documentation available.</param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="parametersCode">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        public ObjectResult<Description> SPDescriptionsInsertUpdate(Nullable<global::System.Int32> iD, global::System.String code, global::System.String parametersCode, global::System.String name, global::System.String notes, MergeOption mergeOption)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int32));
            }
    
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter parametersCodeParameter;
            if (parametersCode != null)
            {
                parametersCodeParameter = new ObjectParameter("ParametersCode", parametersCode);
            }
            else
            {
                parametersCodeParameter = new ObjectParameter("ParametersCode", typeof(global::System.String));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Description>("SPDescriptionsInsertUpdate", mergeOption, iDParameter, codeParameter, parametersCodeParameter, nameParameter, notesParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="parametersCode">No Metadata Documentation available.</param>
        public ObjectResult<Description> SPDescriptionsSelect(global::System.String code, global::System.String parametersCode)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter parametersCodeParameter;
            if (parametersCode != null)
            {
                parametersCodeParameter = new ObjectParameter("ParametersCode", parametersCode);
            }
            else
            {
                parametersCodeParameter = new ObjectParameter("ParametersCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Description>("SPDescriptionsSelect", codeParameter, parametersCodeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="parametersCode">No Metadata Documentation available.</param>
        public ObjectResult<Description> SPDescriptionsSelect(global::System.String code, global::System.String parametersCode, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter parametersCodeParameter;
            if (parametersCode != null)
            {
                parametersCodeParameter = new ObjectParameter("ParametersCode", parametersCode);
            }
            else
            {
                parametersCodeParameter = new ObjectParameter("ParametersCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Description>("SPDescriptionsSelect", mergeOption, codeParameter, parametersCodeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Designation> SPDesignationsDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Designation>("SPDesignationsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Designation> SPDesignationsDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Designation>("SPDesignationsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="staffCode">No Metadata Documentation available.</param>
        /// <param name="comDate">No Metadata Documentation available.</param>
        /// <param name="cessDate">No Metadata Documentation available.</param>
        /// <param name="designationCode">No Metadata Documentation available.</param>
        /// <param name="typeCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Designation> SPDesignationsInsertUpdate(Nullable<global::System.Int64> code, global::System.String staffCode, Nullable<global::System.DateTime> comDate, Nullable<global::System.DateTime> cessDate, global::System.String designationCode, global::System.String typeCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter staffCodeParameter;
            if (staffCode != null)
            {
                staffCodeParameter = new ObjectParameter("StaffCode", staffCode);
            }
            else
            {
                staffCodeParameter = new ObjectParameter("StaffCode", typeof(global::System.String));
            }
    
            ObjectParameter comDateParameter;
            if (comDate.HasValue)
            {
                comDateParameter = new ObjectParameter("ComDate", comDate);
            }
            else
            {
                comDateParameter = new ObjectParameter("ComDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter cessDateParameter;
            if (cessDate.HasValue)
            {
                cessDateParameter = new ObjectParameter("CessDate", cessDate);
            }
            else
            {
                cessDateParameter = new ObjectParameter("CessDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter designationCodeParameter;
            if (designationCode != null)
            {
                designationCodeParameter = new ObjectParameter("DesignationCode", designationCode);
            }
            else
            {
                designationCodeParameter = new ObjectParameter("DesignationCode", typeof(global::System.String));
            }
    
            ObjectParameter typeCodeParameter;
            if (typeCode != null)
            {
                typeCodeParameter = new ObjectParameter("TypeCode", typeCode);
            }
            else
            {
                typeCodeParameter = new ObjectParameter("TypeCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Designation>("SPDesignationsInsertUpdate", codeParameter, staffCodeParameter, comDateParameter, cessDateParameter, designationCodeParameter, typeCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="staffCode">No Metadata Documentation available.</param>
        /// <param name="comDate">No Metadata Documentation available.</param>
        /// <param name="cessDate">No Metadata Documentation available.</param>
        /// <param name="designationCode">No Metadata Documentation available.</param>
        /// <param name="typeCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Designation> SPDesignationsInsertUpdate(Nullable<global::System.Int64> code, global::System.String staffCode, Nullable<global::System.DateTime> comDate, Nullable<global::System.DateTime> cessDate, global::System.String designationCode, global::System.String typeCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter staffCodeParameter;
            if (staffCode != null)
            {
                staffCodeParameter = new ObjectParameter("StaffCode", staffCode);
            }
            else
            {
                staffCodeParameter = new ObjectParameter("StaffCode", typeof(global::System.String));
            }
    
            ObjectParameter comDateParameter;
            if (comDate.HasValue)
            {
                comDateParameter = new ObjectParameter("ComDate", comDate);
            }
            else
            {
                comDateParameter = new ObjectParameter("ComDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter cessDateParameter;
            if (cessDate.HasValue)
            {
                cessDateParameter = new ObjectParameter("CessDate", cessDate);
            }
            else
            {
                cessDateParameter = new ObjectParameter("CessDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter designationCodeParameter;
            if (designationCode != null)
            {
                designationCodeParameter = new ObjectParameter("DesignationCode", designationCode);
            }
            else
            {
                designationCodeParameter = new ObjectParameter("DesignationCode", typeof(global::System.String));
            }
    
            ObjectParameter typeCodeParameter;
            if (typeCode != null)
            {
                typeCodeParameter = new ObjectParameter("TypeCode", typeCode);
            }
            else
            {
                typeCodeParameter = new ObjectParameter("TypeCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Designation>("SPDesignationsInsertUpdate", mergeOption, codeParameter, staffCodeParameter, comDateParameter, cessDateParameter, designationCodeParameter, typeCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="staffCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Designation> SPDesignationsSelect(Nullable<global::System.Int64> code, global::System.String staffCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter staffCodeParameter;
            if (staffCode != null)
            {
                staffCodeParameter = new ObjectParameter("StaffCode", staffCode);
            }
            else
            {
                staffCodeParameter = new ObjectParameter("StaffCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Designation>("SPDesignationsSelect", codeParameter, staffCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="staffCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Designation> SPDesignationsSelect(Nullable<global::System.Int64> code, global::System.String staffCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter staffCodeParameter;
            if (staffCode != null)
            {
                staffCodeParameter = new ObjectParameter("StaffCode", staffCode);
            }
            else
            {
                staffCodeParameter = new ObjectParameter("StaffCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Designation>("SPDesignationsSelect", mergeOption, codeParameter, staffCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Duration> SPDurationsDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Duration>("SPDurationsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Duration> SPDurationsDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Duration>("SPDurationsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="modeOfStudy">No Metadata Documentation available.</param>
        /// <param name="duration">No Metadata Documentation available.</param>
        /// <param name="durationUnit">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Duration> SPDurationsInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, global::System.String modeOfStudy, Nullable<global::System.Int64> duration, global::System.String durationUnit, global::System.String notes, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter modeOfStudyParameter;
            if (modeOfStudy != null)
            {
                modeOfStudyParameter = new ObjectParameter("ModeOfStudy", modeOfStudy);
            }
            else
            {
                modeOfStudyParameter = new ObjectParameter("ModeOfStudy", typeof(global::System.String));
            }
    
            ObjectParameter durationParameter;
            if (duration.HasValue)
            {
                durationParameter = new ObjectParameter("Duration", duration);
            }
            else
            {
                durationParameter = new ObjectParameter("Duration", typeof(global::System.Int64));
            }
    
            ObjectParameter durationUnitParameter;
            if (durationUnit != null)
            {
                durationUnitParameter = new ObjectParameter("DurationUnit", durationUnit);
            }
            else
            {
                durationUnitParameter = new ObjectParameter("DurationUnit", typeof(global::System.String));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Duration>("SPDurationsInsertUpdate", codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, modeOfStudyParameter, durationParameter, durationUnitParameter, notesParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="modeOfStudy">No Metadata Documentation available.</param>
        /// <param name="duration">No Metadata Documentation available.</param>
        /// <param name="durationUnit">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Duration> SPDurationsInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, global::System.String modeOfStudy, Nullable<global::System.Int64> duration, global::System.String durationUnit, global::System.String notes, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter modeOfStudyParameter;
            if (modeOfStudy != null)
            {
                modeOfStudyParameter = new ObjectParameter("ModeOfStudy", modeOfStudy);
            }
            else
            {
                modeOfStudyParameter = new ObjectParameter("ModeOfStudy", typeof(global::System.String));
            }
    
            ObjectParameter durationParameter;
            if (duration.HasValue)
            {
                durationParameter = new ObjectParameter("Duration", duration);
            }
            else
            {
                durationParameter = new ObjectParameter("Duration", typeof(global::System.Int64));
            }
    
            ObjectParameter durationUnitParameter;
            if (durationUnit != null)
            {
                durationUnitParameter = new ObjectParameter("DurationUnit", durationUnit);
            }
            else
            {
                durationUnitParameter = new ObjectParameter("DurationUnit", typeof(global::System.String));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Duration>("SPDurationsInsertUpdate", mergeOption, codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, modeOfStudyParameter, durationParameter, durationUnitParameter, notesParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Duration> SPDurationsSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Duration>("SPDurationsSelect", codeParameter, universityCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Duration> SPDurationsSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Duration>("SPDurationsSelect", mergeOption, codeParameter, universityCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<EntryRequirement> SPEntryRequirementsDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<EntryRequirement>("SPEntryRequirementsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<EntryRequirement> SPEntryRequirementsDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<EntryRequirement>("SPEntryRequirementsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="entryMode">No Metadata Documentation available.</param>
        /// <param name="modeOfStudy">No Metadata Documentation available.</param>
        /// <param name="noOfCredits">No Metadata Documentation available.</param>
        /// <param name="noOfSittings">No Metadata Documentation available.</param>
        /// <param name="requirementType">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<EntryRequirement> SPEntryRequirementsInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, global::System.String entryMode, global::System.String modeOfStudy, Nullable<global::System.Int32> noOfCredits, Nullable<global::System.Int32> noOfSittings, global::System.String requirementType, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter entryModeParameter;
            if (entryMode != null)
            {
                entryModeParameter = new ObjectParameter("EntryMode", entryMode);
            }
            else
            {
                entryModeParameter = new ObjectParameter("EntryMode", typeof(global::System.String));
            }
    
            ObjectParameter modeOfStudyParameter;
            if (modeOfStudy != null)
            {
                modeOfStudyParameter = new ObjectParameter("ModeOfStudy", modeOfStudy);
            }
            else
            {
                modeOfStudyParameter = new ObjectParameter("ModeOfStudy", typeof(global::System.String));
            }
    
            ObjectParameter noOfCreditsParameter;
            if (noOfCredits.HasValue)
            {
                noOfCreditsParameter = new ObjectParameter("NoOfCredits", noOfCredits);
            }
            else
            {
                noOfCreditsParameter = new ObjectParameter("NoOfCredits", typeof(global::System.Int32));
            }
    
            ObjectParameter noOfSittingsParameter;
            if (noOfSittings.HasValue)
            {
                noOfSittingsParameter = new ObjectParameter("NoOfSittings", noOfSittings);
            }
            else
            {
                noOfSittingsParameter = new ObjectParameter("NoOfSittings", typeof(global::System.Int32));
            }
    
            ObjectParameter requirementTypeParameter;
            if (requirementType != null)
            {
                requirementTypeParameter = new ObjectParameter("RequirementType", requirementType);
            }
            else
            {
                requirementTypeParameter = new ObjectParameter("RequirementType", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<EntryRequirement>("SPEntryRequirementsInsertUpdate", codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, entryModeParameter, modeOfStudyParameter, noOfCreditsParameter, noOfSittingsParameter, requirementTypeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="entryMode">No Metadata Documentation available.</param>
        /// <param name="modeOfStudy">No Metadata Documentation available.</param>
        /// <param name="noOfCredits">No Metadata Documentation available.</param>
        /// <param name="noOfSittings">No Metadata Documentation available.</param>
        /// <param name="requirementType">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<EntryRequirement> SPEntryRequirementsInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, global::System.String entryMode, global::System.String modeOfStudy, Nullable<global::System.Int32> noOfCredits, Nullable<global::System.Int32> noOfSittings, global::System.String requirementType, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter entryModeParameter;
            if (entryMode != null)
            {
                entryModeParameter = new ObjectParameter("EntryMode", entryMode);
            }
            else
            {
                entryModeParameter = new ObjectParameter("EntryMode", typeof(global::System.String));
            }
    
            ObjectParameter modeOfStudyParameter;
            if (modeOfStudy != null)
            {
                modeOfStudyParameter = new ObjectParameter("ModeOfStudy", modeOfStudy);
            }
            else
            {
                modeOfStudyParameter = new ObjectParameter("ModeOfStudy", typeof(global::System.String));
            }
    
            ObjectParameter noOfCreditsParameter;
            if (noOfCredits.HasValue)
            {
                noOfCreditsParameter = new ObjectParameter("NoOfCredits", noOfCredits);
            }
            else
            {
                noOfCreditsParameter = new ObjectParameter("NoOfCredits", typeof(global::System.Int32));
            }
    
            ObjectParameter noOfSittingsParameter;
            if (noOfSittings.HasValue)
            {
                noOfSittingsParameter = new ObjectParameter("NoOfSittings", noOfSittings);
            }
            else
            {
                noOfSittingsParameter = new ObjectParameter("NoOfSittings", typeof(global::System.Int32));
            }
    
            ObjectParameter requirementTypeParameter;
            if (requirementType != null)
            {
                requirementTypeParameter = new ObjectParameter("RequirementType", requirementType);
            }
            else
            {
                requirementTypeParameter = new ObjectParameter("RequirementType", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<EntryRequirement>("SPEntryRequirementsInsertUpdate", mergeOption, codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, entryModeParameter, modeOfStudyParameter, noOfCreditsParameter, noOfSittingsParameter, requirementTypeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<EntryRequirement> SPEntryRequirementsSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<EntryRequirement>("SPEntryRequirementsSelect", codeParameter, universityCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<EntryRequirement> SPEntryRequirementsSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<EntryRequirement>("SPEntryRequirementsSelect", mergeOption, codeParameter, universityCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Faculty> SPFacultiesDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Faculty>("SPFacultiesDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Faculty> SPFacultiesDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Faculty>("SPFacultiesDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="acronym">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Faculty> SPFacultiesInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, global::System.String acronym, global::System.String description, global::System.String notes, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter acronymParameter;
            if (acronym != null)
            {
                acronymParameter = new ObjectParameter("Acronym", acronym);
            }
            else
            {
                acronymParameter = new ObjectParameter("Acronym", typeof(global::System.String));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Faculty>("SPFacultiesInsertUpdate", codeParameter, universityCodeParameter, acronymParameter, descriptionParameter, notesParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="acronym">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Faculty> SPFacultiesInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, global::System.String acronym, global::System.String description, global::System.String notes, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter acronymParameter;
            if (acronym != null)
            {
                acronymParameter = new ObjectParameter("Acronym", acronym);
            }
            else
            {
                acronymParameter = new ObjectParameter("Acronym", typeof(global::System.String));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Faculty>("SPFacultiesInsertUpdate", mergeOption, codeParameter, universityCodeParameter, acronymParameter, descriptionParameter, notesParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Faculty> SPFacultiesSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Faculty>("SPFacultiesSelect", codeParameter, universityCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Faculty> SPFacultiesSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Faculty>("SPFacultiesSelect", mergeOption, codeParameter, universityCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<GradingSystem> SPGradingSystemDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<GradingSystem>("SPGradingSystemDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<GradingSystem> SPGradingSystemDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<GradingSystem>("SPGradingSystemDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="scoreLowerBound">No Metadata Documentation available.</param>
        /// <param name="scoreUpperBound">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="cGPALowerBound">No Metadata Documentation available.</param>
        /// <param name="cGPAUpperBound">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<GradingSystem> SPGradingSystemInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Decimal> scoreLowerBound, Nullable<global::System.Decimal> scoreUpperBound, global::System.String description, Nullable<global::System.Decimal> cGPALowerBound, Nullable<global::System.Decimal> cGPAUpperBound, global::System.String notes, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter scoreLowerBoundParameter;
            if (scoreLowerBound.HasValue)
            {
                scoreLowerBoundParameter = new ObjectParameter("ScoreLowerBound", scoreLowerBound);
            }
            else
            {
                scoreLowerBoundParameter = new ObjectParameter("ScoreLowerBound", typeof(global::System.Decimal));
            }
    
            ObjectParameter scoreUpperBoundParameter;
            if (scoreUpperBound.HasValue)
            {
                scoreUpperBoundParameter = new ObjectParameter("ScoreUpperBound", scoreUpperBound);
            }
            else
            {
                scoreUpperBoundParameter = new ObjectParameter("ScoreUpperBound", typeof(global::System.Decimal));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter cGPALowerBoundParameter;
            if (cGPALowerBound.HasValue)
            {
                cGPALowerBoundParameter = new ObjectParameter("CGPALowerBound", cGPALowerBound);
            }
            else
            {
                cGPALowerBoundParameter = new ObjectParameter("CGPALowerBound", typeof(global::System.Decimal));
            }
    
            ObjectParameter cGPAUpperBoundParameter;
            if (cGPAUpperBound.HasValue)
            {
                cGPAUpperBoundParameter = new ObjectParameter("CGPAUpperBound", cGPAUpperBound);
            }
            else
            {
                cGPAUpperBoundParameter = new ObjectParameter("CGPAUpperBound", typeof(global::System.Decimal));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<GradingSystem>("SPGradingSystemInsertUpdate", codeParameter, universityCodeParameter, scoreLowerBoundParameter, scoreUpperBoundParameter, descriptionParameter, cGPALowerBoundParameter, cGPAUpperBoundParameter, notesParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="scoreLowerBound">No Metadata Documentation available.</param>
        /// <param name="scoreUpperBound">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="cGPALowerBound">No Metadata Documentation available.</param>
        /// <param name="cGPAUpperBound">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<GradingSystem> SPGradingSystemInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Decimal> scoreLowerBound, Nullable<global::System.Decimal> scoreUpperBound, global::System.String description, Nullable<global::System.Decimal> cGPALowerBound, Nullable<global::System.Decimal> cGPAUpperBound, global::System.String notes, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter scoreLowerBoundParameter;
            if (scoreLowerBound.HasValue)
            {
                scoreLowerBoundParameter = new ObjectParameter("ScoreLowerBound", scoreLowerBound);
            }
            else
            {
                scoreLowerBoundParameter = new ObjectParameter("ScoreLowerBound", typeof(global::System.Decimal));
            }
    
            ObjectParameter scoreUpperBoundParameter;
            if (scoreUpperBound.HasValue)
            {
                scoreUpperBoundParameter = new ObjectParameter("ScoreUpperBound", scoreUpperBound);
            }
            else
            {
                scoreUpperBoundParameter = new ObjectParameter("ScoreUpperBound", typeof(global::System.Decimal));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter cGPALowerBoundParameter;
            if (cGPALowerBound.HasValue)
            {
                cGPALowerBoundParameter = new ObjectParameter("CGPALowerBound", cGPALowerBound);
            }
            else
            {
                cGPALowerBoundParameter = new ObjectParameter("CGPALowerBound", typeof(global::System.Decimal));
            }
    
            ObjectParameter cGPAUpperBoundParameter;
            if (cGPAUpperBound.HasValue)
            {
                cGPAUpperBoundParameter = new ObjectParameter("CGPAUpperBound", cGPAUpperBound);
            }
            else
            {
                cGPAUpperBoundParameter = new ObjectParameter("CGPAUpperBound", typeof(global::System.Decimal));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<GradingSystem>("SPGradingSystemInsertUpdate", mergeOption, codeParameter, universityCodeParameter, scoreLowerBoundParameter, scoreUpperBoundParameter, descriptionParameter, cGPALowerBoundParameter, cGPAUpperBoundParameter, notesParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<GradingSystem> SPGradingSystemSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<GradingSystem>("SPGradingSystemSelect", codeParameter, universityCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<GradingSystem> SPGradingSystemSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<GradingSystem>("SPGradingSystemSelect", mergeOption, codeParameter, universityCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="statesCode">No Metadata Documentation available.</param>
        /// <param name="countriesCode">No Metadata Documentation available.</param>
        public ObjectResult<LGA> SPLGAsDeletePermanently(global::System.String code, global::System.String statesCode, global::System.String countriesCode)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter statesCodeParameter;
            if (statesCode != null)
            {
                statesCodeParameter = new ObjectParameter("StatesCode", statesCode);
            }
            else
            {
                statesCodeParameter = new ObjectParameter("StatesCode", typeof(global::System.String));
            }
    
            ObjectParameter countriesCodeParameter;
            if (countriesCode != null)
            {
                countriesCodeParameter = new ObjectParameter("CountriesCode", countriesCode);
            }
            else
            {
                countriesCodeParameter = new ObjectParameter("CountriesCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<LGA>("SPLGAsDeletePermanently", codeParameter, statesCodeParameter, countriesCodeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="statesCode">No Metadata Documentation available.</param>
        /// <param name="countriesCode">No Metadata Documentation available.</param>
        public ObjectResult<LGA> SPLGAsDeletePermanently(global::System.String code, global::System.String statesCode, global::System.String countriesCode, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter statesCodeParameter;
            if (statesCode != null)
            {
                statesCodeParameter = new ObjectParameter("StatesCode", statesCode);
            }
            else
            {
                statesCodeParameter = new ObjectParameter("StatesCode", typeof(global::System.String));
            }
    
            ObjectParameter countriesCodeParameter;
            if (countriesCode != null)
            {
                countriesCodeParameter = new ObjectParameter("CountriesCode", countriesCode);
            }
            else
            {
                countriesCodeParameter = new ObjectParameter("CountriesCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<LGA>("SPLGAsDeletePermanently", mergeOption, codeParameter, statesCodeParameter, countriesCodeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="statesCode">No Metadata Documentation available.</param>
        /// <param name="countriesCode">No Metadata Documentation available.</param>
        /// <param name="lgName">No Metadata Documentation available.</param>
        public ObjectResult<LGA> SPLGAsInsertUpdate(global::System.String code, global::System.String statesCode, global::System.String countriesCode, global::System.String lgName)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter statesCodeParameter;
            if (statesCode != null)
            {
                statesCodeParameter = new ObjectParameter("StatesCode", statesCode);
            }
            else
            {
                statesCodeParameter = new ObjectParameter("StatesCode", typeof(global::System.String));
            }
    
            ObjectParameter countriesCodeParameter;
            if (countriesCode != null)
            {
                countriesCodeParameter = new ObjectParameter("CountriesCode", countriesCode);
            }
            else
            {
                countriesCodeParameter = new ObjectParameter("CountriesCode", typeof(global::System.String));
            }
    
            ObjectParameter lgNameParameter;
            if (lgName != null)
            {
                lgNameParameter = new ObjectParameter("LgName", lgName);
            }
            else
            {
                lgNameParameter = new ObjectParameter("LgName", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<LGA>("SPLGAsInsertUpdate", codeParameter, statesCodeParameter, countriesCodeParameter, lgNameParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="statesCode">No Metadata Documentation available.</param>
        /// <param name="countriesCode">No Metadata Documentation available.</param>
        /// <param name="lgName">No Metadata Documentation available.</param>
        public ObjectResult<LGA> SPLGAsInsertUpdate(global::System.String code, global::System.String statesCode, global::System.String countriesCode, global::System.String lgName, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter statesCodeParameter;
            if (statesCode != null)
            {
                statesCodeParameter = new ObjectParameter("StatesCode", statesCode);
            }
            else
            {
                statesCodeParameter = new ObjectParameter("StatesCode", typeof(global::System.String));
            }
    
            ObjectParameter countriesCodeParameter;
            if (countriesCode != null)
            {
                countriesCodeParameter = new ObjectParameter("CountriesCode", countriesCode);
            }
            else
            {
                countriesCodeParameter = new ObjectParameter("CountriesCode", typeof(global::System.String));
            }
    
            ObjectParameter lgNameParameter;
            if (lgName != null)
            {
                lgNameParameter = new ObjectParameter("LgName", lgName);
            }
            else
            {
                lgNameParameter = new ObjectParameter("LgName", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<LGA>("SPLGAsInsertUpdate", mergeOption, codeParameter, statesCodeParameter, countriesCodeParameter, lgNameParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="statesCode">No Metadata Documentation available.</param>
        /// <param name="countriesCode">No Metadata Documentation available.</param>
        public ObjectResult<LGA> SPLGAsSelect(global::System.String code, global::System.String statesCode, global::System.String countriesCode)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter statesCodeParameter;
            if (statesCode != null)
            {
                statesCodeParameter = new ObjectParameter("StatesCode", statesCode);
            }
            else
            {
                statesCodeParameter = new ObjectParameter("StatesCode", typeof(global::System.String));
            }
    
            ObjectParameter countriesCodeParameter;
            if (countriesCode != null)
            {
                countriesCodeParameter = new ObjectParameter("CountriesCode", countriesCode);
            }
            else
            {
                countriesCodeParameter = new ObjectParameter("CountriesCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<LGA>("SPLGAsSelect", codeParameter, statesCodeParameter, countriesCodeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="statesCode">No Metadata Documentation available.</param>
        /// <param name="countriesCode">No Metadata Documentation available.</param>
        public ObjectResult<LGA> SPLGAsSelect(global::System.String code, global::System.String statesCode, global::System.String countriesCode, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter statesCodeParameter;
            if (statesCode != null)
            {
                statesCodeParameter = new ObjectParameter("StatesCode", statesCode);
            }
            else
            {
                statesCodeParameter = new ObjectParameter("StatesCode", typeof(global::System.String));
            }
    
            ObjectParameter countriesCodeParameter;
            if (countriesCode != null)
            {
                countriesCodeParameter = new ObjectParameter("CountriesCode", countriesCode);
            }
            else
            {
                countriesCodeParameter = new ObjectParameter("CountriesCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<LGA>("SPLGAsSelect", mergeOption, codeParameter, statesCodeParameter, countriesCodeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Locking> SPLockingsDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Locking>("SPLockingsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Locking> SPLockingsDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Locking>("SPLockingsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="sessionCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="levelCode">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="entityCode">No Metadata Documentation available.</param>
        /// <param name="locked">No Metadata Documentation available.</param>
        /// <param name="lockedOn">No Metadata Documentation available.</param>
        /// <param name="lockedBy">No Metadata Documentation available.</param>
        /// <param name="unlockedOn">No Metadata Documentation available.</param>
        /// <param name="unlockedBy">No Metadata Documentation available.</param>
        /// <param name="lastLockedOn">No Metadata Documentation available.</param>
        /// <param name="lastLockedBy">No Metadata Documentation available.</param>
        public ObjectResult<Locking> SPLockingsInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, global::System.String sessionCode, global::System.String semesterCode, Nullable<global::System.Int32> levelCode, global::System.String accountCode, global::System.String entityCode, Nullable<global::System.Boolean> locked, Nullable<global::System.DateTime> lockedOn, global::System.String lockedBy, Nullable<global::System.DateTime> unlockedOn, global::System.String unlockedBy, Nullable<global::System.DateTime> lastLockedOn, global::System.String lastLockedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter sessionCodeParameter;
            if (sessionCode != null)
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", sessionCode);
            }
            else
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", typeof(global::System.String));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode != null)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.String));
            }
    
            ObjectParameter levelCodeParameter;
            if (levelCode.HasValue)
            {
                levelCodeParameter = new ObjectParameter("LevelCode", levelCode);
            }
            else
            {
                levelCodeParameter = new ObjectParameter("LevelCode", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter entityCodeParameter;
            if (entityCode != null)
            {
                entityCodeParameter = new ObjectParameter("EntityCode", entityCode);
            }
            else
            {
                entityCodeParameter = new ObjectParameter("EntityCode", typeof(global::System.String));
            }
    
            ObjectParameter lockedParameter;
            if (locked.HasValue)
            {
                lockedParameter = new ObjectParameter("Locked", locked);
            }
            else
            {
                lockedParameter = new ObjectParameter("Locked", typeof(global::System.Boolean));
            }
    
            ObjectParameter lockedOnParameter;
            if (lockedOn.HasValue)
            {
                lockedOnParameter = new ObjectParameter("LockedOn", lockedOn);
            }
            else
            {
                lockedOnParameter = new ObjectParameter("LockedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter lockedByParameter;
            if (lockedBy != null)
            {
                lockedByParameter = new ObjectParameter("LockedBy", lockedBy);
            }
            else
            {
                lockedByParameter = new ObjectParameter("LockedBy", typeof(global::System.String));
            }
    
            ObjectParameter unlockedOnParameter;
            if (unlockedOn.HasValue)
            {
                unlockedOnParameter = new ObjectParameter("UnlockedOn", unlockedOn);
            }
            else
            {
                unlockedOnParameter = new ObjectParameter("UnlockedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter unlockedByParameter;
            if (unlockedBy != null)
            {
                unlockedByParameter = new ObjectParameter("UnlockedBy", unlockedBy);
            }
            else
            {
                unlockedByParameter = new ObjectParameter("UnlockedBy", typeof(global::System.String));
            }
    
            ObjectParameter lastLockedOnParameter;
            if (lastLockedOn.HasValue)
            {
                lastLockedOnParameter = new ObjectParameter("LastLockedOn", lastLockedOn);
            }
            else
            {
                lastLockedOnParameter = new ObjectParameter("LastLockedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter lastLockedByParameter;
            if (lastLockedBy != null)
            {
                lastLockedByParameter = new ObjectParameter("LastLockedBy", lastLockedBy);
            }
            else
            {
                lastLockedByParameter = new ObjectParameter("LastLockedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Locking>("SPLockingsInsertUpdate", codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, sessionCodeParameter, semesterCodeParameter, levelCodeParameter, accountCodeParameter, entityCodeParameter, lockedParameter, lockedOnParameter, lockedByParameter, unlockedOnParameter, unlockedByParameter, lastLockedOnParameter, lastLockedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="sessionCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="levelCode">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="entityCode">No Metadata Documentation available.</param>
        /// <param name="locked">No Metadata Documentation available.</param>
        /// <param name="lockedOn">No Metadata Documentation available.</param>
        /// <param name="lockedBy">No Metadata Documentation available.</param>
        /// <param name="unlockedOn">No Metadata Documentation available.</param>
        /// <param name="unlockedBy">No Metadata Documentation available.</param>
        /// <param name="lastLockedOn">No Metadata Documentation available.</param>
        /// <param name="lastLockedBy">No Metadata Documentation available.</param>
        public ObjectResult<Locking> SPLockingsInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, global::System.String sessionCode, global::System.String semesterCode, Nullable<global::System.Int32> levelCode, global::System.String accountCode, global::System.String entityCode, Nullable<global::System.Boolean> locked, Nullable<global::System.DateTime> lockedOn, global::System.String lockedBy, Nullable<global::System.DateTime> unlockedOn, global::System.String unlockedBy, Nullable<global::System.DateTime> lastLockedOn, global::System.String lastLockedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter sessionCodeParameter;
            if (sessionCode != null)
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", sessionCode);
            }
            else
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", typeof(global::System.String));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode != null)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.String));
            }
    
            ObjectParameter levelCodeParameter;
            if (levelCode.HasValue)
            {
                levelCodeParameter = new ObjectParameter("LevelCode", levelCode);
            }
            else
            {
                levelCodeParameter = new ObjectParameter("LevelCode", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter entityCodeParameter;
            if (entityCode != null)
            {
                entityCodeParameter = new ObjectParameter("EntityCode", entityCode);
            }
            else
            {
                entityCodeParameter = new ObjectParameter("EntityCode", typeof(global::System.String));
            }
    
            ObjectParameter lockedParameter;
            if (locked.HasValue)
            {
                lockedParameter = new ObjectParameter("Locked", locked);
            }
            else
            {
                lockedParameter = new ObjectParameter("Locked", typeof(global::System.Boolean));
            }
    
            ObjectParameter lockedOnParameter;
            if (lockedOn.HasValue)
            {
                lockedOnParameter = new ObjectParameter("LockedOn", lockedOn);
            }
            else
            {
                lockedOnParameter = new ObjectParameter("LockedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter lockedByParameter;
            if (lockedBy != null)
            {
                lockedByParameter = new ObjectParameter("LockedBy", lockedBy);
            }
            else
            {
                lockedByParameter = new ObjectParameter("LockedBy", typeof(global::System.String));
            }
    
            ObjectParameter unlockedOnParameter;
            if (unlockedOn.HasValue)
            {
                unlockedOnParameter = new ObjectParameter("UnlockedOn", unlockedOn);
            }
            else
            {
                unlockedOnParameter = new ObjectParameter("UnlockedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter unlockedByParameter;
            if (unlockedBy != null)
            {
                unlockedByParameter = new ObjectParameter("UnlockedBy", unlockedBy);
            }
            else
            {
                unlockedByParameter = new ObjectParameter("UnlockedBy", typeof(global::System.String));
            }
    
            ObjectParameter lastLockedOnParameter;
            if (lastLockedOn.HasValue)
            {
                lastLockedOnParameter = new ObjectParameter("LastLockedOn", lastLockedOn);
            }
            else
            {
                lastLockedOnParameter = new ObjectParameter("LastLockedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter lastLockedByParameter;
            if (lastLockedBy != null)
            {
                lastLockedByParameter = new ObjectParameter("LastLockedBy", lastLockedBy);
            }
            else
            {
                lastLockedByParameter = new ObjectParameter("LastLockedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Locking>("SPLockingsInsertUpdate", mergeOption, codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, sessionCodeParameter, semesterCodeParameter, levelCodeParameter, accountCodeParameter, entityCodeParameter, lockedParameter, lockedOnParameter, lockedByParameter, unlockedOnParameter, unlockedByParameter, lastLockedOnParameter, lastLockedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        public ObjectResult<Locking> SPLockingsSelect(Nullable<global::System.Int64> code, global::System.String universityCode)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Locking>("SPLockingsSelect", codeParameter, universityCodeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        public ObjectResult<Locking> SPLockingsSelect(Nullable<global::System.Int64> code, global::System.String universityCode, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Locking>("SPLockingsSelect", mergeOption, codeParameter, universityCodeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Module> SPModulesDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Module>("SPModulesDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Module> SPModulesDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Module>("SPModulesDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="url">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Module> SPModulesInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, global::System.String description, global::System.String url, global::System.String notes, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter urlParameter;
            if (url != null)
            {
                urlParameter = new ObjectParameter("Url", url);
            }
            else
            {
                urlParameter = new ObjectParameter("Url", typeof(global::System.String));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Module>("SPModulesInsertUpdate", codeParameter, universityCodeParameter, descriptionParameter, urlParameter, notesParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="url">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Module> SPModulesInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, global::System.String description, global::System.String url, global::System.String notes, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter urlParameter;
            if (url != null)
            {
                urlParameter = new ObjectParameter("Url", url);
            }
            else
            {
                urlParameter = new ObjectParameter("Url", typeof(global::System.String));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Module>("SPModulesInsertUpdate", mergeOption, codeParameter, universityCodeParameter, descriptionParameter, urlParameter, notesParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Module> SPModulesSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Module>("SPModulesSelect", codeParameter, universityCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Module> SPModulesSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Module>("SPModulesSelect", mergeOption, codeParameter, universityCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Parameter> SPParametersDeletePermanently(global::System.String code)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Parameter>("SPParametersDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Parameter> SPParametersDeletePermanently(global::System.String code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Parameter>("SPParametersDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        public ObjectResult<Parameter> SPParametersInsertUpdate(global::System.String code, global::System.String description)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Parameter>("SPParametersInsertUpdate", codeParameter, descriptionParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        public ObjectResult<Parameter> SPParametersInsertUpdate(global::System.String code, global::System.String description, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Parameter>("SPParametersInsertUpdate", mergeOption, codeParameter, descriptionParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Parameter> SPParametersSelect(global::System.String code)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Parameter>("SPParametersSelect", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Parameter> SPParametersSelect(global::System.String code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Parameter>("SPParametersSelect", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<ProgramRequirement> SPProgramRequirementsDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<ProgramRequirement>("SPProgramRequirementsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<ProgramRequirement> SPProgramRequirementsDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<ProgramRequirement>("SPProgramRequirementsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="minimumCredit">No Metadata Documentation available.</param>
        /// <param name="maximumCredit">No Metadata Documentation available.</param>
        /// <param name="totalDuration">No Metadata Documentation available.</param>
        /// <param name="durationUnit">No Metadata Documentation available.</param>
        /// <param name="entryMode">No Metadata Documentation available.</param>
        /// <param name="modeOfStudy">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<ProgramRequirement> SPProgramRequirementsInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, Nullable<global::System.Int32> minimumCredit, Nullable<global::System.Int32> maximumCredit, Nullable<global::System.Int64> totalDuration, global::System.String durationUnit, global::System.String entryMode, global::System.String modeOfStudy, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter minimumCreditParameter;
            if (minimumCredit.HasValue)
            {
                minimumCreditParameter = new ObjectParameter("MinimumCredit", minimumCredit);
            }
            else
            {
                minimumCreditParameter = new ObjectParameter("MinimumCredit", typeof(global::System.Int32));
            }
    
            ObjectParameter maximumCreditParameter;
            if (maximumCredit.HasValue)
            {
                maximumCreditParameter = new ObjectParameter("MaximumCredit", maximumCredit);
            }
            else
            {
                maximumCreditParameter = new ObjectParameter("MaximumCredit", typeof(global::System.Int32));
            }
    
            ObjectParameter totalDurationParameter;
            if (totalDuration.HasValue)
            {
                totalDurationParameter = new ObjectParameter("TotalDuration", totalDuration);
            }
            else
            {
                totalDurationParameter = new ObjectParameter("TotalDuration", typeof(global::System.Int64));
            }
    
            ObjectParameter durationUnitParameter;
            if (durationUnit != null)
            {
                durationUnitParameter = new ObjectParameter("DurationUnit", durationUnit);
            }
            else
            {
                durationUnitParameter = new ObjectParameter("DurationUnit", typeof(global::System.String));
            }
    
            ObjectParameter entryModeParameter;
            if (entryMode != null)
            {
                entryModeParameter = new ObjectParameter("EntryMode", entryMode);
            }
            else
            {
                entryModeParameter = new ObjectParameter("EntryMode", typeof(global::System.String));
            }
    
            ObjectParameter modeOfStudyParameter;
            if (modeOfStudy != null)
            {
                modeOfStudyParameter = new ObjectParameter("ModeOfStudy", modeOfStudy);
            }
            else
            {
                modeOfStudyParameter = new ObjectParameter("ModeOfStudy", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<ProgramRequirement>("SPProgramRequirementsInsertUpdate", codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, minimumCreditParameter, maximumCreditParameter, totalDurationParameter, durationUnitParameter, entryModeParameter, modeOfStudyParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="minimumCredit">No Metadata Documentation available.</param>
        /// <param name="maximumCredit">No Metadata Documentation available.</param>
        /// <param name="totalDuration">No Metadata Documentation available.</param>
        /// <param name="durationUnit">No Metadata Documentation available.</param>
        /// <param name="entryMode">No Metadata Documentation available.</param>
        /// <param name="modeOfStudy">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<ProgramRequirement> SPProgramRequirementsInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, Nullable<global::System.Int32> minimumCredit, Nullable<global::System.Int32> maximumCredit, Nullable<global::System.Int64> totalDuration, global::System.String durationUnit, global::System.String entryMode, global::System.String modeOfStudy, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter minimumCreditParameter;
            if (minimumCredit.HasValue)
            {
                minimumCreditParameter = new ObjectParameter("MinimumCredit", minimumCredit);
            }
            else
            {
                minimumCreditParameter = new ObjectParameter("MinimumCredit", typeof(global::System.Int32));
            }
    
            ObjectParameter maximumCreditParameter;
            if (maximumCredit.HasValue)
            {
                maximumCreditParameter = new ObjectParameter("MaximumCredit", maximumCredit);
            }
            else
            {
                maximumCreditParameter = new ObjectParameter("MaximumCredit", typeof(global::System.Int32));
            }
    
            ObjectParameter totalDurationParameter;
            if (totalDuration.HasValue)
            {
                totalDurationParameter = new ObjectParameter("TotalDuration", totalDuration);
            }
            else
            {
                totalDurationParameter = new ObjectParameter("TotalDuration", typeof(global::System.Int64));
            }
    
            ObjectParameter durationUnitParameter;
            if (durationUnit != null)
            {
                durationUnitParameter = new ObjectParameter("DurationUnit", durationUnit);
            }
            else
            {
                durationUnitParameter = new ObjectParameter("DurationUnit", typeof(global::System.String));
            }
    
            ObjectParameter entryModeParameter;
            if (entryMode != null)
            {
                entryModeParameter = new ObjectParameter("EntryMode", entryMode);
            }
            else
            {
                entryModeParameter = new ObjectParameter("EntryMode", typeof(global::System.String));
            }
    
            ObjectParameter modeOfStudyParameter;
            if (modeOfStudy != null)
            {
                modeOfStudyParameter = new ObjectParameter("ModeOfStudy", modeOfStudy);
            }
            else
            {
                modeOfStudyParameter = new ObjectParameter("ModeOfStudy", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<ProgramRequirement>("SPProgramRequirementsInsertUpdate", mergeOption, codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, minimumCreditParameter, maximumCreditParameter, totalDurationParameter, durationUnitParameter, entryModeParameter, modeOfStudyParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<ProgramRequirement> SPProgramRequirementsSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<ProgramRequirement>("SPProgramRequirementsSelect", codeParameter, universityCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<ProgramRequirement> SPProgramRequirementsSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<ProgramRequirement>("SPProgramRequirementsSelect", mergeOption, codeParameter, universityCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Program> SPProgramsDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Program>("SPProgramsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Program> SPProgramsDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Program>("SPProgramsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="awardCode">No Metadata Documentation available.</param>
        /// <param name="progCode">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Program> SPProgramsInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, global::System.String awardCode, global::System.String progCode, global::System.String notes, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter awardCodeParameter;
            if (awardCode != null)
            {
                awardCodeParameter = new ObjectParameter("AwardCode", awardCode);
            }
            else
            {
                awardCodeParameter = new ObjectParameter("AwardCode", typeof(global::System.String));
            }
    
            ObjectParameter progCodeParameter;
            if (progCode != null)
            {
                progCodeParameter = new ObjectParameter("ProgCode", progCode);
            }
            else
            {
                progCodeParameter = new ObjectParameter("ProgCode", typeof(global::System.String));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Program>("SPProgramsInsertUpdate", codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, awardCodeParameter, progCodeParameter, notesParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="awardCode">No Metadata Documentation available.</param>
        /// <param name="progCode">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Program> SPProgramsInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, global::System.String awardCode, global::System.String progCode, global::System.String notes, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter awardCodeParameter;
            if (awardCode != null)
            {
                awardCodeParameter = new ObjectParameter("AwardCode", awardCode);
            }
            else
            {
                awardCodeParameter = new ObjectParameter("AwardCode", typeof(global::System.String));
            }
    
            ObjectParameter progCodeParameter;
            if (progCode != null)
            {
                progCodeParameter = new ObjectParameter("ProgCode", progCode);
            }
            else
            {
                progCodeParameter = new ObjectParameter("ProgCode", typeof(global::System.String));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Program>("SPProgramsInsertUpdate", mergeOption, codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, awardCodeParameter, progCodeParameter, notesParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Program> SPProgramsSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Program>("SPProgramsSelect", codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Program> SPProgramsSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Program>("SPProgramsSelect", mergeOption, codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Schedule> SPSchedulesDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Schedule>("SPSchedulesDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Schedule> SPSchedulesDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Schedule>("SPSchedulesDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="levelCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="subCode">No Metadata Documentation available.</param>
        /// <param name="modeOfStudy">No Metadata Documentation available.</param>
        /// <param name="staffCode">No Metadata Documentation available.</param>
        /// <param name="dateX">No Metadata Documentation available.</param>
        /// <param name="startTime">No Metadata Documentation available.</param>
        /// <param name="stopTime">No Metadata Documentation available.</param>
        /// <param name="scheduleType">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Schedule> SPSchedulesInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, Nullable<global::System.Int64> levelCode, global::System.String semesterCode, Nullable<global::System.Int64> subCode, global::System.String modeOfStudy, global::System.String staffCode, Nullable<global::System.DateTime> dateX, global::System.String startTime, global::System.String stopTime, global::System.String scheduleType, global::System.String notes, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter levelCodeParameter;
            if (levelCode.HasValue)
            {
                levelCodeParameter = new ObjectParameter("LevelCode", levelCode);
            }
            else
            {
                levelCodeParameter = new ObjectParameter("LevelCode", typeof(global::System.Int64));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode != null)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.String));
            }
    
            ObjectParameter subCodeParameter;
            if (subCode.HasValue)
            {
                subCodeParameter = new ObjectParameter("SubCode", subCode);
            }
            else
            {
                subCodeParameter = new ObjectParameter("SubCode", typeof(global::System.Int64));
            }
    
            ObjectParameter modeOfStudyParameter;
            if (modeOfStudy != null)
            {
                modeOfStudyParameter = new ObjectParameter("ModeOfStudy", modeOfStudy);
            }
            else
            {
                modeOfStudyParameter = new ObjectParameter("ModeOfStudy", typeof(global::System.String));
            }
    
            ObjectParameter staffCodeParameter;
            if (staffCode != null)
            {
                staffCodeParameter = new ObjectParameter("StaffCode", staffCode);
            }
            else
            {
                staffCodeParameter = new ObjectParameter("StaffCode", typeof(global::System.String));
            }
    
            ObjectParameter dateXParameter;
            if (dateX.HasValue)
            {
                dateXParameter = new ObjectParameter("DateX", dateX);
            }
            else
            {
                dateXParameter = new ObjectParameter("DateX", typeof(global::System.DateTime));
            }
    
            ObjectParameter startTimeParameter;
            if (startTime != null)
            {
                startTimeParameter = new ObjectParameter("StartTime", startTime);
            }
            else
            {
                startTimeParameter = new ObjectParameter("StartTime", typeof(global::System.String));
            }
    
            ObjectParameter stopTimeParameter;
            if (stopTime != null)
            {
                stopTimeParameter = new ObjectParameter("StopTime", stopTime);
            }
            else
            {
                stopTimeParameter = new ObjectParameter("StopTime", typeof(global::System.String));
            }
    
            ObjectParameter scheduleTypeParameter;
            if (scheduleType != null)
            {
                scheduleTypeParameter = new ObjectParameter("ScheduleType", scheduleType);
            }
            else
            {
                scheduleTypeParameter = new ObjectParameter("ScheduleType", typeof(global::System.String));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Schedule>("SPSchedulesInsertUpdate", codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, levelCodeParameter, semesterCodeParameter, subCodeParameter, modeOfStudyParameter, staffCodeParameter, dateXParameter, startTimeParameter, stopTimeParameter, scheduleTypeParameter, notesParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="levelCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="subCode">No Metadata Documentation available.</param>
        /// <param name="modeOfStudy">No Metadata Documentation available.</param>
        /// <param name="staffCode">No Metadata Documentation available.</param>
        /// <param name="dateX">No Metadata Documentation available.</param>
        /// <param name="startTime">No Metadata Documentation available.</param>
        /// <param name="stopTime">No Metadata Documentation available.</param>
        /// <param name="scheduleType">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Schedule> SPSchedulesInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, Nullable<global::System.Int64> levelCode, global::System.String semesterCode, Nullable<global::System.Int64> subCode, global::System.String modeOfStudy, global::System.String staffCode, Nullable<global::System.DateTime> dateX, global::System.String startTime, global::System.String stopTime, global::System.String scheduleType, global::System.String notes, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter levelCodeParameter;
            if (levelCode.HasValue)
            {
                levelCodeParameter = new ObjectParameter("LevelCode", levelCode);
            }
            else
            {
                levelCodeParameter = new ObjectParameter("LevelCode", typeof(global::System.Int64));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode != null)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.String));
            }
    
            ObjectParameter subCodeParameter;
            if (subCode.HasValue)
            {
                subCodeParameter = new ObjectParameter("SubCode", subCode);
            }
            else
            {
                subCodeParameter = new ObjectParameter("SubCode", typeof(global::System.Int64));
            }
    
            ObjectParameter modeOfStudyParameter;
            if (modeOfStudy != null)
            {
                modeOfStudyParameter = new ObjectParameter("ModeOfStudy", modeOfStudy);
            }
            else
            {
                modeOfStudyParameter = new ObjectParameter("ModeOfStudy", typeof(global::System.String));
            }
    
            ObjectParameter staffCodeParameter;
            if (staffCode != null)
            {
                staffCodeParameter = new ObjectParameter("StaffCode", staffCode);
            }
            else
            {
                staffCodeParameter = new ObjectParameter("StaffCode", typeof(global::System.String));
            }
    
            ObjectParameter dateXParameter;
            if (dateX.HasValue)
            {
                dateXParameter = new ObjectParameter("DateX", dateX);
            }
            else
            {
                dateXParameter = new ObjectParameter("DateX", typeof(global::System.DateTime));
            }
    
            ObjectParameter startTimeParameter;
            if (startTime != null)
            {
                startTimeParameter = new ObjectParameter("StartTime", startTime);
            }
            else
            {
                startTimeParameter = new ObjectParameter("StartTime", typeof(global::System.String));
            }
    
            ObjectParameter stopTimeParameter;
            if (stopTime != null)
            {
                stopTimeParameter = new ObjectParameter("StopTime", stopTime);
            }
            else
            {
                stopTimeParameter = new ObjectParameter("StopTime", typeof(global::System.String));
            }
    
            ObjectParameter scheduleTypeParameter;
            if (scheduleType != null)
            {
                scheduleTypeParameter = new ObjectParameter("ScheduleType", scheduleType);
            }
            else
            {
                scheduleTypeParameter = new ObjectParameter("ScheduleType", typeof(global::System.String));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Schedule>("SPSchedulesInsertUpdate", mergeOption, codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, levelCodeParameter, semesterCodeParameter, subCodeParameter, modeOfStudyParameter, staffCodeParameter, dateXParameter, startTimeParameter, stopTimeParameter, scheduleTypeParameter, notesParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Schedule> SPSchedulesSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Schedule>("SPSchedulesSelect", codeParameter, universityCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Schedule> SPSchedulesSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Schedule>("SPSchedulesSelect", mergeOption, codeParameter, universityCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Screen> SPScreensDeletePermanently(global::System.String code)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Screen>("SPScreensDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Screen> SPScreensDeletePermanently(global::System.String code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Screen>("SPScreensDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="moduleCode">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="screenDescription">No Metadata Documentation available.</param>
        /// <param name="url">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Screen> SPScreensInsertUpdate(global::System.String code, Nullable<global::System.Int64> moduleCode, global::System.String universityCode, global::System.String screenDescription, global::System.String url, global::System.String notes, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter moduleCodeParameter;
            if (moduleCode.HasValue)
            {
                moduleCodeParameter = new ObjectParameter("ModuleCode", moduleCode);
            }
            else
            {
                moduleCodeParameter = new ObjectParameter("ModuleCode", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter screenDescriptionParameter;
            if (screenDescription != null)
            {
                screenDescriptionParameter = new ObjectParameter("ScreenDescription", screenDescription);
            }
            else
            {
                screenDescriptionParameter = new ObjectParameter("ScreenDescription", typeof(global::System.String));
            }
    
            ObjectParameter urlParameter;
            if (url != null)
            {
                urlParameter = new ObjectParameter("Url", url);
            }
            else
            {
                urlParameter = new ObjectParameter("Url", typeof(global::System.String));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Screen>("SPScreensInsertUpdate", codeParameter, moduleCodeParameter, universityCodeParameter, screenDescriptionParameter, urlParameter, notesParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="moduleCode">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="screenDescription">No Metadata Documentation available.</param>
        /// <param name="url">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Screen> SPScreensInsertUpdate(global::System.String code, Nullable<global::System.Int64> moduleCode, global::System.String universityCode, global::System.String screenDescription, global::System.String url, global::System.String notes, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter moduleCodeParameter;
            if (moduleCode.HasValue)
            {
                moduleCodeParameter = new ObjectParameter("ModuleCode", moduleCode);
            }
            else
            {
                moduleCodeParameter = new ObjectParameter("ModuleCode", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter screenDescriptionParameter;
            if (screenDescription != null)
            {
                screenDescriptionParameter = new ObjectParameter("ScreenDescription", screenDescription);
            }
            else
            {
                screenDescriptionParameter = new ObjectParameter("ScreenDescription", typeof(global::System.String));
            }
    
            ObjectParameter urlParameter;
            if (url != null)
            {
                urlParameter = new ObjectParameter("Url", url);
            }
            else
            {
                urlParameter = new ObjectParameter("Url", typeof(global::System.String));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Screen>("SPScreensInsertUpdate", mergeOption, codeParameter, moduleCodeParameter, universityCodeParameter, screenDescriptionParameter, urlParameter, notesParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Screen> SPScreensSelect(global::System.String code, global::System.String universityCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Screen>("SPScreensSelect", codeParameter, universityCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Screen> SPScreensSelect(global::System.String code, global::System.String universityCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Screen>("SPScreensSelect", mergeOption, codeParameter, universityCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Staff> SPStaffDeletePermanently(global::System.String code)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Staff>("SPStaffDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Staff> SPStaffDeletePermanently(global::System.String code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Staff>("SPStaffDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="staffType">No Metadata Documentation available.</param>
        /// <param name="contractType">No Metadata Documentation available.</param>
        /// <param name="comDate">No Metadata Documentation available.</param>
        /// <param name="cessDate">No Metadata Documentation available.</param>
        /// <param name="statusCode">No Metadata Documentation available.</param>
        /// <param name="statusReason">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Staff> SPStaffInsertUpdate(global::System.String code, global::System.String accountCode, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, global::System.String staffType, global::System.String contractType, Nullable<global::System.DateTime> comDate, Nullable<global::System.DateTime> cessDate, global::System.String statusCode, global::System.String statusReason, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter staffTypeParameter;
            if (staffType != null)
            {
                staffTypeParameter = new ObjectParameter("StaffType", staffType);
            }
            else
            {
                staffTypeParameter = new ObjectParameter("StaffType", typeof(global::System.String));
            }
    
            ObjectParameter contractTypeParameter;
            if (contractType != null)
            {
                contractTypeParameter = new ObjectParameter("ContractType", contractType);
            }
            else
            {
                contractTypeParameter = new ObjectParameter("ContractType", typeof(global::System.String));
            }
    
            ObjectParameter comDateParameter;
            if (comDate.HasValue)
            {
                comDateParameter = new ObjectParameter("ComDate", comDate);
            }
            else
            {
                comDateParameter = new ObjectParameter("ComDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter cessDateParameter;
            if (cessDate.HasValue)
            {
                cessDateParameter = new ObjectParameter("CessDate", cessDate);
            }
            else
            {
                cessDateParameter = new ObjectParameter("CessDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter statusCodeParameter;
            if (statusCode != null)
            {
                statusCodeParameter = new ObjectParameter("StatusCode", statusCode);
            }
            else
            {
                statusCodeParameter = new ObjectParameter("StatusCode", typeof(global::System.String));
            }
    
            ObjectParameter statusReasonParameter;
            if (statusReason != null)
            {
                statusReasonParameter = new ObjectParameter("StatusReason", statusReason);
            }
            else
            {
                statusReasonParameter = new ObjectParameter("StatusReason", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Staff>("SPStaffInsertUpdate", codeParameter, accountCodeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, staffTypeParameter, contractTypeParameter, comDateParameter, cessDateParameter, statusCodeParameter, statusReasonParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="staffType">No Metadata Documentation available.</param>
        /// <param name="contractType">No Metadata Documentation available.</param>
        /// <param name="comDate">No Metadata Documentation available.</param>
        /// <param name="cessDate">No Metadata Documentation available.</param>
        /// <param name="statusCode">No Metadata Documentation available.</param>
        /// <param name="statusReason">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Staff> SPStaffInsertUpdate(global::System.String code, global::System.String accountCode, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, global::System.String staffType, global::System.String contractType, Nullable<global::System.DateTime> comDate, Nullable<global::System.DateTime> cessDate, global::System.String statusCode, global::System.String statusReason, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter staffTypeParameter;
            if (staffType != null)
            {
                staffTypeParameter = new ObjectParameter("StaffType", staffType);
            }
            else
            {
                staffTypeParameter = new ObjectParameter("StaffType", typeof(global::System.String));
            }
    
            ObjectParameter contractTypeParameter;
            if (contractType != null)
            {
                contractTypeParameter = new ObjectParameter("ContractType", contractType);
            }
            else
            {
                contractTypeParameter = new ObjectParameter("ContractType", typeof(global::System.String));
            }
    
            ObjectParameter comDateParameter;
            if (comDate.HasValue)
            {
                comDateParameter = new ObjectParameter("ComDate", comDate);
            }
            else
            {
                comDateParameter = new ObjectParameter("ComDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter cessDateParameter;
            if (cessDate.HasValue)
            {
                cessDateParameter = new ObjectParameter("CessDate", cessDate);
            }
            else
            {
                cessDateParameter = new ObjectParameter("CessDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter statusCodeParameter;
            if (statusCode != null)
            {
                statusCodeParameter = new ObjectParameter("StatusCode", statusCode);
            }
            else
            {
                statusCodeParameter = new ObjectParameter("StatusCode", typeof(global::System.String));
            }
    
            ObjectParameter statusReasonParameter;
            if (statusReason != null)
            {
                statusReasonParameter = new ObjectParameter("StatusReason", statusReason);
            }
            else
            {
                statusReasonParameter = new ObjectParameter("StatusReason", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Staff>("SPStaffInsertUpdate", mergeOption, codeParameter, accountCodeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, staffTypeParameter, contractTypeParameter, comDateParameter, cessDateParameter, statusCodeParameter, statusReasonParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Staff> SPStaffSelect(global::System.String code, global::System.String universityCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Staff>("SPStaffSelect", codeParameter, universityCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Staff> SPStaffSelect(global::System.String code, global::System.String universityCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Staff>("SPStaffSelect", mergeOption, codeParameter, universityCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="countriesCode">No Metadata Documentation available.</param>
        public ObjectResult<State> SPStatesDeletePermanently(global::System.String code, global::System.String countriesCode)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter countriesCodeParameter;
            if (countriesCode != null)
            {
                countriesCodeParameter = new ObjectParameter("CountriesCode", countriesCode);
            }
            else
            {
                countriesCodeParameter = new ObjectParameter("CountriesCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<State>("SPStatesDeletePermanently", codeParameter, countriesCodeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="countriesCode">No Metadata Documentation available.</param>
        public ObjectResult<State> SPStatesDeletePermanently(global::System.String code, global::System.String countriesCode, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter countriesCodeParameter;
            if (countriesCode != null)
            {
                countriesCodeParameter = new ObjectParameter("CountriesCode", countriesCode);
            }
            else
            {
                countriesCodeParameter = new ObjectParameter("CountriesCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<State>("SPStatesDeletePermanently", mergeOption, codeParameter, countriesCodeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        /// <param name="countriesCode">No Metadata Documentation available.</param>
        public ObjectResult<State> SPStatesInsertUpdate(global::System.String code, global::System.String name, global::System.String countriesCode)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter countriesCodeParameter;
            if (countriesCode != null)
            {
                countriesCodeParameter = new ObjectParameter("CountriesCode", countriesCode);
            }
            else
            {
                countriesCodeParameter = new ObjectParameter("CountriesCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<State>("SPStatesInsertUpdate", codeParameter, nameParameter, countriesCodeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        /// <param name="countriesCode">No Metadata Documentation available.</param>
        public ObjectResult<State> SPStatesInsertUpdate(global::System.String code, global::System.String name, global::System.String countriesCode, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter countriesCodeParameter;
            if (countriesCode != null)
            {
                countriesCodeParameter = new ObjectParameter("CountriesCode", countriesCode);
            }
            else
            {
                countriesCodeParameter = new ObjectParameter("CountriesCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<State>("SPStatesInsertUpdate", mergeOption, codeParameter, nameParameter, countriesCodeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="countriesCode">No Metadata Documentation available.</param>
        public ObjectResult<State> SPStatesSelect(global::System.String code, global::System.String countriesCode)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter countriesCodeParameter;
            if (countriesCode != null)
            {
                countriesCodeParameter = new ObjectParameter("CountriesCode", countriesCode);
            }
            else
            {
                countriesCodeParameter = new ObjectParameter("CountriesCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<State>("SPStatesSelect", codeParameter, countriesCodeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="countriesCode">No Metadata Documentation available.</param>
        public ObjectResult<State> SPStatesSelect(global::System.String code, global::System.String countriesCode, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter countriesCodeParameter;
            if (countriesCode != null)
            {
                countriesCodeParameter = new ObjectParameter("CountriesCode", countriesCode);
            }
            else
            {
                countriesCodeParameter = new ObjectParameter("CountriesCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<State>("SPStatesSelect", mergeOption, codeParameter, countriesCodeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<SubCours> SPSubCoursesDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<SubCours>("SPSubCoursesDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<SubCours> SPSubCoursesDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<SubCours>("SPSubCoursesDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="statusCode">No Metadata Documentation available.</param>
        /// <param name="levelCode">No Metadata Documentation available.</param>
        /// <param name="practical">No Metadata Documentation available.</param>
        /// <param name="laboratory">No Metadata Documentation available.</param>
        /// <param name="credit">No Metadata Documentation available.</param>
        /// <param name="title">No Metadata Documentation available.</param>
        /// <param name="prefixCode">No Metadata Documentation available.</param>
        /// <param name="subNo">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<SubCours> SPSubCoursesInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, global::System.String semesterCode, global::System.String statusCode, Nullable<global::System.Int64> levelCode, Nullable<global::System.Int32> practical, Nullable<global::System.Int32> laboratory, Nullable<global::System.Int32> credit, global::System.String title, global::System.String prefixCode, Nullable<global::System.Int32> subNo, global::System.String notes, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode != null)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.String));
            }
    
            ObjectParameter statusCodeParameter;
            if (statusCode != null)
            {
                statusCodeParameter = new ObjectParameter("StatusCode", statusCode);
            }
            else
            {
                statusCodeParameter = new ObjectParameter("StatusCode", typeof(global::System.String));
            }
    
            ObjectParameter levelCodeParameter;
            if (levelCode.HasValue)
            {
                levelCodeParameter = new ObjectParameter("LevelCode", levelCode);
            }
            else
            {
                levelCodeParameter = new ObjectParameter("LevelCode", typeof(global::System.Int64));
            }
    
            ObjectParameter practicalParameter;
            if (practical.HasValue)
            {
                practicalParameter = new ObjectParameter("Practical", practical);
            }
            else
            {
                practicalParameter = new ObjectParameter("Practical", typeof(global::System.Int32));
            }
    
            ObjectParameter laboratoryParameter;
            if (laboratory.HasValue)
            {
                laboratoryParameter = new ObjectParameter("Laboratory", laboratory);
            }
            else
            {
                laboratoryParameter = new ObjectParameter("Laboratory", typeof(global::System.Int32));
            }
    
            ObjectParameter creditParameter;
            if (credit.HasValue)
            {
                creditParameter = new ObjectParameter("Credit", credit);
            }
            else
            {
                creditParameter = new ObjectParameter("Credit", typeof(global::System.Int32));
            }
    
            ObjectParameter titleParameter;
            if (title != null)
            {
                titleParameter = new ObjectParameter("Title", title);
            }
            else
            {
                titleParameter = new ObjectParameter("Title", typeof(global::System.String));
            }
    
            ObjectParameter prefixCodeParameter;
            if (prefixCode != null)
            {
                prefixCodeParameter = new ObjectParameter("PrefixCode", prefixCode);
            }
            else
            {
                prefixCodeParameter = new ObjectParameter("PrefixCode", typeof(global::System.String));
            }
    
            ObjectParameter subNoParameter;
            if (subNo.HasValue)
            {
                subNoParameter = new ObjectParameter("SubNo", subNo);
            }
            else
            {
                subNoParameter = new ObjectParameter("SubNo", typeof(global::System.Int32));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<SubCours>("SPSubCoursesInsertUpdate", codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, semesterCodeParameter, statusCodeParameter, levelCodeParameter, practicalParameter, laboratoryParameter, creditParameter, titleParameter, prefixCodeParameter, subNoParameter, notesParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="statusCode">No Metadata Documentation available.</param>
        /// <param name="levelCode">No Metadata Documentation available.</param>
        /// <param name="practical">No Metadata Documentation available.</param>
        /// <param name="laboratory">No Metadata Documentation available.</param>
        /// <param name="credit">No Metadata Documentation available.</param>
        /// <param name="title">No Metadata Documentation available.</param>
        /// <param name="prefixCode">No Metadata Documentation available.</param>
        /// <param name="subNo">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<SubCours> SPSubCoursesInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, global::System.String semesterCode, global::System.String statusCode, Nullable<global::System.Int64> levelCode, Nullable<global::System.Int32> practical, Nullable<global::System.Int32> laboratory, Nullable<global::System.Int32> credit, global::System.String title, global::System.String prefixCode, Nullable<global::System.Int32> subNo, global::System.String notes, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode != null)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.String));
            }
    
            ObjectParameter statusCodeParameter;
            if (statusCode != null)
            {
                statusCodeParameter = new ObjectParameter("StatusCode", statusCode);
            }
            else
            {
                statusCodeParameter = new ObjectParameter("StatusCode", typeof(global::System.String));
            }
    
            ObjectParameter levelCodeParameter;
            if (levelCode.HasValue)
            {
                levelCodeParameter = new ObjectParameter("LevelCode", levelCode);
            }
            else
            {
                levelCodeParameter = new ObjectParameter("LevelCode", typeof(global::System.Int64));
            }
    
            ObjectParameter practicalParameter;
            if (practical.HasValue)
            {
                practicalParameter = new ObjectParameter("Practical", practical);
            }
            else
            {
                practicalParameter = new ObjectParameter("Practical", typeof(global::System.Int32));
            }
    
            ObjectParameter laboratoryParameter;
            if (laboratory.HasValue)
            {
                laboratoryParameter = new ObjectParameter("Laboratory", laboratory);
            }
            else
            {
                laboratoryParameter = new ObjectParameter("Laboratory", typeof(global::System.Int32));
            }
    
            ObjectParameter creditParameter;
            if (credit.HasValue)
            {
                creditParameter = new ObjectParameter("Credit", credit);
            }
            else
            {
                creditParameter = new ObjectParameter("Credit", typeof(global::System.Int32));
            }
    
            ObjectParameter titleParameter;
            if (title != null)
            {
                titleParameter = new ObjectParameter("Title", title);
            }
            else
            {
                titleParameter = new ObjectParameter("Title", typeof(global::System.String));
            }
    
            ObjectParameter prefixCodeParameter;
            if (prefixCode != null)
            {
                prefixCodeParameter = new ObjectParameter("PrefixCode", prefixCode);
            }
            else
            {
                prefixCodeParameter = new ObjectParameter("PrefixCode", typeof(global::System.String));
            }
    
            ObjectParameter subNoParameter;
            if (subNo.HasValue)
            {
                subNoParameter = new ObjectParameter("SubNo", subNo);
            }
            else
            {
                subNoParameter = new ObjectParameter("SubNo", typeof(global::System.Int32));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<SubCours>("SPSubCoursesInsertUpdate", mergeOption, codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, semesterCodeParameter, statusCodeParameter, levelCodeParameter, practicalParameter, laboratoryParameter, creditParameter, titleParameter, prefixCodeParameter, subNoParameter, notesParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="levelCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<SubCours> SPSubCoursesSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, global::System.String semesterCode, Nullable<global::System.Int64> levelCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode != null)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.String));
            }
    
            ObjectParameter levelCodeParameter;
            if (levelCode.HasValue)
            {
                levelCodeParameter = new ObjectParameter("LevelCode", levelCode);
            }
            else
            {
                levelCodeParameter = new ObjectParameter("LevelCode", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<SubCours>("SPSubCoursesSelect", codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, semesterCodeParameter, levelCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="levelCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<SubCours> SPSubCoursesSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, global::System.String semesterCode, Nullable<global::System.Int64> levelCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode != null)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.String));
            }
    
            ObjectParameter levelCodeParameter;
            if (levelCode.HasValue)
            {
                levelCodeParameter = new ObjectParameter("LevelCode", levelCode);
            }
            else
            {
                levelCodeParameter = new ObjectParameter("LevelCode", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<SubCours>("SPSubCoursesSelect", mergeOption, codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, semesterCodeParameter, levelCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<SubjectRequirementDetail> SPSubjectRequirementDetailsDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<SubjectRequirementDetail>("SPSubjectRequirementDetailsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<SubjectRequirementDetail> SPSubjectRequirementDetailsDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<SubjectRequirementDetail>("SPSubjectRequirementDetailsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="subjectRequirementCode">No Metadata Documentation available.</param>
        /// <param name="gradeCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<SubjectRequirementDetail> SPSubjectRequirementDetailsInsertUpdate(Nullable<global::System.Int64> code, Nullable<global::System.Int64> subjectRequirementCode, global::System.String gradeCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter subjectRequirementCodeParameter;
            if (subjectRequirementCode.HasValue)
            {
                subjectRequirementCodeParameter = new ObjectParameter("SubjectRequirementCode", subjectRequirementCode);
            }
            else
            {
                subjectRequirementCodeParameter = new ObjectParameter("SubjectRequirementCode", typeof(global::System.Int64));
            }
    
            ObjectParameter gradeCodeParameter;
            if (gradeCode != null)
            {
                gradeCodeParameter = new ObjectParameter("GradeCode", gradeCode);
            }
            else
            {
                gradeCodeParameter = new ObjectParameter("GradeCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<SubjectRequirementDetail>("SPSubjectRequirementDetailsInsertUpdate", codeParameter, subjectRequirementCodeParameter, gradeCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="subjectRequirementCode">No Metadata Documentation available.</param>
        /// <param name="gradeCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<SubjectRequirementDetail> SPSubjectRequirementDetailsInsertUpdate(Nullable<global::System.Int64> code, Nullable<global::System.Int64> subjectRequirementCode, global::System.String gradeCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter subjectRequirementCodeParameter;
            if (subjectRequirementCode.HasValue)
            {
                subjectRequirementCodeParameter = new ObjectParameter("SubjectRequirementCode", subjectRequirementCode);
            }
            else
            {
                subjectRequirementCodeParameter = new ObjectParameter("SubjectRequirementCode", typeof(global::System.Int64));
            }
    
            ObjectParameter gradeCodeParameter;
            if (gradeCode != null)
            {
                gradeCodeParameter = new ObjectParameter("GradeCode", gradeCode);
            }
            else
            {
                gradeCodeParameter = new ObjectParameter("GradeCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<SubjectRequirementDetail>("SPSubjectRequirementDetailsInsertUpdate", mergeOption, codeParameter, subjectRequirementCodeParameter, gradeCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<SubjectRequirementDetail> SPSubjectRequirementDetailsSelect(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<SubjectRequirementDetail>("SPSubjectRequirementDetailsSelect", codeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<SubjectRequirementDetail> SPSubjectRequirementDetailsSelect(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<SubjectRequirementDetail>("SPSubjectRequirementDetailsSelect", mergeOption, codeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<SubjectRequirement> SPSubjectRequirementsDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<SubjectRequirement>("SPSubjectRequirementsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<SubjectRequirement> SPSubjectRequirementsDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<SubjectRequirement>("SPSubjectRequirementsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="subjectCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<SubjectRequirement> SPSubjectRequirementsInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, global::System.String subjectCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter subjectCodeParameter;
            if (subjectCode != null)
            {
                subjectCodeParameter = new ObjectParameter("SubjectCode", subjectCode);
            }
            else
            {
                subjectCodeParameter = new ObjectParameter("SubjectCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<SubjectRequirement>("SPSubjectRequirementsInsertUpdate", codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, subjectCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="subjectCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<SubjectRequirement> SPSubjectRequirementsInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, global::System.String subjectCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter subjectCodeParameter;
            if (subjectCode != null)
            {
                subjectCodeParameter = new ObjectParameter("SubjectCode", subjectCode);
            }
            else
            {
                subjectCodeParameter = new ObjectParameter("SubjectCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<SubjectRequirement>("SPSubjectRequirementsInsertUpdate", mergeOption, codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, subjectCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<SubjectRequirement> SPSubjectRequirementsSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<SubjectRequirement>("SPSubjectRequirementsSelect", codeParameter, universityCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<SubjectRequirement> SPSubjectRequirementsSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<SubjectRequirement>("SPSubjectRequirementsSelect", mergeOption, codeParameter, universityCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<University> SPUniversitiesDeletePermanently(global::System.String code)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<University>("SPUniversitiesDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<University> SPUniversitiesDeletePermanently(global::System.String code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<University>("SPUniversitiesDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="universityTypeCode">No Metadata Documentation available.</param>
        /// <param name="bannerCode">No Metadata Documentation available.</param>
        /// <param name="logoCode">No Metadata Documentation available.</param>
        /// <param name="url">No Metadata Documentation available.</param>
        /// <param name="countryCode">No Metadata Documentation available.</param>
        /// <param name="stateCode">No Metadata Documentation available.</param>
        /// <param name="lgaCode">No Metadata Documentation available.</param>
        /// <param name="motto">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="establishedYear">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<University> SPUniversitiesInsertUpdate(global::System.String code, global::System.String description, global::System.String universityTypeCode, global::System.String bannerCode, global::System.String logoCode, global::System.String url, global::System.String countryCode, global::System.String stateCode, global::System.String lgaCode, global::System.String motto, global::System.String notes, Nullable<global::System.Int32> establishedYear, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter universityTypeCodeParameter;
            if (universityTypeCode != null)
            {
                universityTypeCodeParameter = new ObjectParameter("UniversityTypeCode", universityTypeCode);
            }
            else
            {
                universityTypeCodeParameter = new ObjectParameter("UniversityTypeCode", typeof(global::System.String));
            }
    
            ObjectParameter bannerCodeParameter;
            if (bannerCode != null)
            {
                bannerCodeParameter = new ObjectParameter("BannerCode", bannerCode);
            }
            else
            {
                bannerCodeParameter = new ObjectParameter("BannerCode", typeof(global::System.String));
            }
    
            ObjectParameter logoCodeParameter;
            if (logoCode != null)
            {
                logoCodeParameter = new ObjectParameter("LogoCode", logoCode);
            }
            else
            {
                logoCodeParameter = new ObjectParameter("LogoCode", typeof(global::System.String));
            }
    
            ObjectParameter urlParameter;
            if (url != null)
            {
                urlParameter = new ObjectParameter("Url", url);
            }
            else
            {
                urlParameter = new ObjectParameter("Url", typeof(global::System.String));
            }
    
            ObjectParameter countryCodeParameter;
            if (countryCode != null)
            {
                countryCodeParameter = new ObjectParameter("CountryCode", countryCode);
            }
            else
            {
                countryCodeParameter = new ObjectParameter("CountryCode", typeof(global::System.String));
            }
    
            ObjectParameter stateCodeParameter;
            if (stateCode != null)
            {
                stateCodeParameter = new ObjectParameter("StateCode", stateCode);
            }
            else
            {
                stateCodeParameter = new ObjectParameter("StateCode", typeof(global::System.String));
            }
    
            ObjectParameter lgaCodeParameter;
            if (lgaCode != null)
            {
                lgaCodeParameter = new ObjectParameter("LgaCode", lgaCode);
            }
            else
            {
                lgaCodeParameter = new ObjectParameter("LgaCode", typeof(global::System.String));
            }
    
            ObjectParameter mottoParameter;
            if (motto != null)
            {
                mottoParameter = new ObjectParameter("Motto", motto);
            }
            else
            {
                mottoParameter = new ObjectParameter("Motto", typeof(global::System.String));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter establishedYearParameter;
            if (establishedYear.HasValue)
            {
                establishedYearParameter = new ObjectParameter("EstablishedYear", establishedYear);
            }
            else
            {
                establishedYearParameter = new ObjectParameter("EstablishedYear", typeof(global::System.Int32));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<University>("SPUniversitiesInsertUpdate", codeParameter, descriptionParameter, universityTypeCodeParameter, bannerCodeParameter, logoCodeParameter, urlParameter, countryCodeParameter, stateCodeParameter, lgaCodeParameter, mottoParameter, notesParameter, establishedYearParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="universityTypeCode">No Metadata Documentation available.</param>
        /// <param name="bannerCode">No Metadata Documentation available.</param>
        /// <param name="logoCode">No Metadata Documentation available.</param>
        /// <param name="url">No Metadata Documentation available.</param>
        /// <param name="countryCode">No Metadata Documentation available.</param>
        /// <param name="stateCode">No Metadata Documentation available.</param>
        /// <param name="lgaCode">No Metadata Documentation available.</param>
        /// <param name="motto">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="establishedYear">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<University> SPUniversitiesInsertUpdate(global::System.String code, global::System.String description, global::System.String universityTypeCode, global::System.String bannerCode, global::System.String logoCode, global::System.String url, global::System.String countryCode, global::System.String stateCode, global::System.String lgaCode, global::System.String motto, global::System.String notes, Nullable<global::System.Int32> establishedYear, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter universityTypeCodeParameter;
            if (universityTypeCode != null)
            {
                universityTypeCodeParameter = new ObjectParameter("UniversityTypeCode", universityTypeCode);
            }
            else
            {
                universityTypeCodeParameter = new ObjectParameter("UniversityTypeCode", typeof(global::System.String));
            }
    
            ObjectParameter bannerCodeParameter;
            if (bannerCode != null)
            {
                bannerCodeParameter = new ObjectParameter("BannerCode", bannerCode);
            }
            else
            {
                bannerCodeParameter = new ObjectParameter("BannerCode", typeof(global::System.String));
            }
    
            ObjectParameter logoCodeParameter;
            if (logoCode != null)
            {
                logoCodeParameter = new ObjectParameter("LogoCode", logoCode);
            }
            else
            {
                logoCodeParameter = new ObjectParameter("LogoCode", typeof(global::System.String));
            }
    
            ObjectParameter urlParameter;
            if (url != null)
            {
                urlParameter = new ObjectParameter("Url", url);
            }
            else
            {
                urlParameter = new ObjectParameter("Url", typeof(global::System.String));
            }
    
            ObjectParameter countryCodeParameter;
            if (countryCode != null)
            {
                countryCodeParameter = new ObjectParameter("CountryCode", countryCode);
            }
            else
            {
                countryCodeParameter = new ObjectParameter("CountryCode", typeof(global::System.String));
            }
    
            ObjectParameter stateCodeParameter;
            if (stateCode != null)
            {
                stateCodeParameter = new ObjectParameter("StateCode", stateCode);
            }
            else
            {
                stateCodeParameter = new ObjectParameter("StateCode", typeof(global::System.String));
            }
    
            ObjectParameter lgaCodeParameter;
            if (lgaCode != null)
            {
                lgaCodeParameter = new ObjectParameter("LgaCode", lgaCode);
            }
            else
            {
                lgaCodeParameter = new ObjectParameter("LgaCode", typeof(global::System.String));
            }
    
            ObjectParameter mottoParameter;
            if (motto != null)
            {
                mottoParameter = new ObjectParameter("Motto", motto);
            }
            else
            {
                mottoParameter = new ObjectParameter("Motto", typeof(global::System.String));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter establishedYearParameter;
            if (establishedYear.HasValue)
            {
                establishedYearParameter = new ObjectParameter("EstablishedYear", establishedYear);
            }
            else
            {
                establishedYearParameter = new ObjectParameter("EstablishedYear", typeof(global::System.Int32));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<University>("SPUniversitiesInsertUpdate", mergeOption, codeParameter, descriptionParameter, universityTypeCodeParameter, bannerCodeParameter, logoCodeParameter, urlParameter, countryCodeParameter, stateCodeParameter, lgaCodeParameter, mottoParameter, notesParameter, establishedYearParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<University> SPUniversitiesSelect(global::System.String code, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<University>("SPUniversitiesSelect", codeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<University> SPUniversitiesSelect(global::System.String code, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<University>("SPUniversitiesSelect", mergeOption, codeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<University> SPUniversitiesDelete(global::System.String code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<University>("SPUniversitiesDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<University> SPUniversitiesDelete(global::System.String code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<University>("SPUniversitiesDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<CourseRegulation> SPCourseRegulationDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<CourseRegulation>("SPCourseRegulationDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<CourseRegulation> SPCourseRegulationDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<CourseRegulation>("SPCourseRegulationDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Cours> SPCoursesDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Cours>("SPCoursesDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Cours> SPCoursesDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Cours>("SPCoursesDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Department> SPDepartmentsDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Department>("SPDepartmentsDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Department> SPDepartmentsDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Department>("SPDepartmentsDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Designation> SPDesignationsDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Designation>("SPDesignationsDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Designation> SPDesignationsDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Designation>("SPDesignationsDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Duration> SPDurationsDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Duration>("SPDurationsDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Duration> SPDurationsDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Duration>("SPDurationsDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<EntryRequirement> SPEntryRequirementsDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<EntryRequirement>("SPEntryRequirementsDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<EntryRequirement> SPEntryRequirementsDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<EntryRequirement>("SPEntryRequirementsDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Faculty> SPFacultiesDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Faculty>("SPFacultiesDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Faculty> SPFacultiesDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Faculty>("SPFacultiesDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<GradingSystem> SPGradingSystemDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<GradingSystem>("SPGradingSystemDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<GradingSystem> SPGradingSystemDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<GradingSystem>("SPGradingSystemDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Module> SPModulesDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Module>("SPModulesDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Module> SPModulesDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Module>("SPModulesDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<ProgramRequirement> SPProgramRequirementsDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<ProgramRequirement>("SPProgramRequirementsDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<ProgramRequirement> SPProgramRequirementsDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<ProgramRequirement>("SPProgramRequirementsDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Program> SPProgramsDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Program>("SPProgramsDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Program> SPProgramsDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Program>("SPProgramsDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Schedule> SPSchedulesDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Schedule>("SPSchedulesDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Schedule> SPSchedulesDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Schedule>("SPSchedulesDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Screen> SPScreensDelete(global::System.String code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Screen>("SPScreensDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Screen> SPScreensDelete(global::System.String code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Screen>("SPScreensDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Staff> SPStaffDelete(global::System.String code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Staff>("SPStaffDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Staff> SPStaffDelete(global::System.String code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Staff>("SPStaffDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<SubCours> SPSubCoursesDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<SubCours>("SPSubCoursesDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<SubCours> SPSubCoursesDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<SubCours>("SPSubCoursesDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<SubjectRequirementDetail> SPSubjectRequirementDetailsDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<SubjectRequirementDetail>("SPSubjectRequirementDetailsDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<SubjectRequirementDetail> SPSubjectRequirementDetailsDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<SubjectRequirementDetail>("SPSubjectRequirementDetailsDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<SubjectRequirement> SPSubjectRequirementsDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<SubjectRequirement>("SPSubjectRequirementsDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<SubjectRequirement> SPSubjectRequirementsDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<SubjectRequirement>("SPSubjectRequirementsDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Permission> SPPermissionsDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Permission>("SPPermissionsDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Permission> SPPermissionsDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Permission>("SPPermissionsDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Permission> SPPermissionsDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Permission>("SPPermissionsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Permission> SPPermissionsDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Permission>("SPPermissionsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="moduleCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="roleCode">No Metadata Documentation available.</param>
        /// <param name="actionCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Permission> SPPermissionsInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, global::System.String moduleCode, global::System.String screenCode, Nullable<global::System.Guid> roleCode, global::System.String actionCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter moduleCodeParameter;
            if (moduleCode != null)
            {
                moduleCodeParameter = new ObjectParameter("ModuleCode", moduleCode);
            }
            else
            {
                moduleCodeParameter = new ObjectParameter("ModuleCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter roleCodeParameter;
            if (roleCode.HasValue)
            {
                roleCodeParameter = new ObjectParameter("RoleCode", roleCode);
            }
            else
            {
                roleCodeParameter = new ObjectParameter("RoleCode", typeof(global::System.Guid));
            }
    
            ObjectParameter actionCodeParameter;
            if (actionCode != null)
            {
                actionCodeParameter = new ObjectParameter("ActionCode", actionCode);
            }
            else
            {
                actionCodeParameter = new ObjectParameter("ActionCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Permission>("SPPermissionsInsertUpdate", codeParameter, universityCodeParameter, moduleCodeParameter, screenCodeParameter, roleCodeParameter, actionCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="moduleCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="roleCode">No Metadata Documentation available.</param>
        /// <param name="actionCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Permission> SPPermissionsInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, global::System.String moduleCode, global::System.String screenCode, Nullable<global::System.Guid> roleCode, global::System.String actionCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter moduleCodeParameter;
            if (moduleCode != null)
            {
                moduleCodeParameter = new ObjectParameter("ModuleCode", moduleCode);
            }
            else
            {
                moduleCodeParameter = new ObjectParameter("ModuleCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter roleCodeParameter;
            if (roleCode.HasValue)
            {
                roleCodeParameter = new ObjectParameter("RoleCode", roleCode);
            }
            else
            {
                roleCodeParameter = new ObjectParameter("RoleCode", typeof(global::System.Guid));
            }
    
            ObjectParameter actionCodeParameter;
            if (actionCode != null)
            {
                actionCodeParameter = new ObjectParameter("ActionCode", actionCode);
            }
            else
            {
                actionCodeParameter = new ObjectParameter("ActionCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Permission>("SPPermissionsInsertUpdate", mergeOption, codeParameter, universityCodeParameter, moduleCodeParameter, screenCodeParameter, roleCodeParameter, actionCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Permission> SPPermissionsSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Permission>("SPPermissionsSelect", codeParameter, universityCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Permission> SPPermissionsSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Permission>("SPPermissionsSelect", mergeOption, codeParameter, universityCodeParameter, deletedParameter);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SetUp", Name="Approval")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Approval : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Approval object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Approval CreateApproval(global::System.Guid code)
        {
            Approval approval = new Approval();
            approval.Code = code;
            return approval;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Guid _Code;
        partial void OnCodeChanging(global::System.Guid value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> FacultyCode
        {
            get
            {
                return _FacultyCode;
            }
            set
            {
                OnFacultyCodeChanging(value);
                ReportPropertyChanging("FacultyCode");
                _FacultyCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FacultyCode");
                OnFacultyCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _FacultyCode;
        partial void OnFacultyCodeChanging(Nullable<global::System.Int64> value);
        partial void OnFacultyCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> DepartmentCode
        {
            get
            {
                return _DepartmentCode;
            }
            set
            {
                OnDepartmentCodeChanging(value);
                ReportPropertyChanging("DepartmentCode");
                _DepartmentCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DepartmentCode");
                OnDepartmentCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _DepartmentCode;
        partial void OnDepartmentCodeChanging(Nullable<global::System.Int64> value);
        partial void OnDepartmentCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CourseCode
        {
            get
            {
                return _CourseCode;
            }
            set
            {
                OnCourseCodeChanging(value);
                ReportPropertyChanging("CourseCode");
                _CourseCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CourseCode");
                OnCourseCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _CourseCode;
        partial void OnCourseCodeChanging(Nullable<global::System.Int64> value);
        partial void OnCourseCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ProgramCode
        {
            get
            {
                return _ProgramCode;
            }
            set
            {
                OnProgramCodeChanging(value);
                ReportPropertyChanging("ProgramCode");
                _ProgramCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ProgramCode");
                OnProgramCodeChanged();
            }
        }
        private Nullable<global::System.Int32> _ProgramCode;
        partial void OnProgramCodeChanging(Nullable<global::System.Int32> value);
        partial void OnProgramCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SessionCode
        {
            get
            {
                return _SessionCode;
            }
            set
            {
                OnSessionCodeChanging(value);
                ReportPropertyChanging("SessionCode");
                _SessionCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SessionCode");
                OnSessionCodeChanged();
            }
        }
        private global::System.String _SessionCode;
        partial void OnSessionCodeChanging(global::System.String value);
        partial void OnSessionCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModuleCode
        {
            get
            {
                return _ModuleCode;
            }
            set
            {
                OnModuleCodeChanging(value);
                ReportPropertyChanging("ModuleCode");
                _ModuleCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModuleCode");
                OnModuleCodeChanged();
            }
        }
        private global::System.String _ModuleCode;
        partial void OnModuleCodeChanging(global::System.String value);
        partial void OnModuleCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScreenCode
        {
            get
            {
                return _ScreenCode;
            }
            set
            {
                OnScreenCodeChanging(value);
                ReportPropertyChanging("ScreenCode");
                _ScreenCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScreenCode");
                OnScreenCodeChanged();
            }
        }
        private global::System.String _ScreenCode;
        partial void OnScreenCodeChanging(global::System.String value);
        partial void OnScreenCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SemesterCode
        {
            get
            {
                return _SemesterCode;
            }
            set
            {
                OnSemesterCodeChanging(value);
                ReportPropertyChanging("SemesterCode");
                _SemesterCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SemesterCode");
                OnSemesterCodeChanged();
            }
        }
        private global::System.String _SemesterCode;
        partial void OnSemesterCodeChanging(global::System.String value);
        partial void OnSemesterCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> LevelCode
        {
            get
            {
                return _LevelCode;
            }
            set
            {
                OnLevelCodeChanging(value);
                ReportPropertyChanging("LevelCode");
                _LevelCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LevelCode");
                OnLevelCodeChanged();
            }
        }
        private Nullable<global::System.Int32> _LevelCode;
        partial void OnLevelCodeChanging(Nullable<global::System.Int32> value);
        partial void OnLevelCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> RoleCode
        {
            get
            {
                return _RoleCode;
            }
            set
            {
                OnRoleCodeChanging(value);
                ReportPropertyChanging("RoleCode");
                _RoleCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RoleCode");
                OnRoleCodeChanged();
            }
        }
        private Nullable<global::System.Guid> _RoleCode;
        partial void OnRoleCodeChanging(Nullable<global::System.Guid> value);
        partial void OnRoleCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountCode
        {
            get
            {
                return _AccountCode;
            }
            set
            {
                OnAccountCodeChanging(value);
                ReportPropertyChanging("AccountCode");
                _AccountCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountCode");
                OnAccountCodeChanged();
            }
        }
        private global::System.String _AccountCode;
        partial void OnAccountCodeChanging(global::System.String value);
        partial void OnAccountCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String EntityCode
        {
            get
            {
                return _EntityCode;
            }
            set
            {
                OnEntityCodeChanging(value);
                ReportPropertyChanging("EntityCode");
                _EntityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("EntityCode");
                OnEntityCodeChanged();
            }
        }
        private global::System.String _EntityCode;
        partial void OnEntityCodeChanging(global::System.String value);
        partial void OnEntityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ApprovalType
        {
            get
            {
                return _ApprovalType;
            }
            set
            {
                OnApprovalTypeChanging(value);
                ReportPropertyChanging("ApprovalType");
                _ApprovalType = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ApprovalType");
                OnApprovalTypeChanged();
            }
        }
        private global::System.String _ApprovalType;
        partial void OnApprovalTypeChanging(global::System.String value);
        partial void OnApprovalTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Order
        {
            get
            {
                return _Order;
            }
            set
            {
                OnOrderChanging(value);
                ReportPropertyChanging("Order");
                _Order = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Order");
                OnOrderChanged();
            }
        }
        private Nullable<global::System.Int32> _Order;
        partial void OnOrderChanging(Nullable<global::System.Int32> value);
        partial void OnOrderChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Approved
        {
            get
            {
                return _Approved;
            }
            set
            {
                OnApprovedChanging(value);
                ReportPropertyChanging("Approved");
                _Approved = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Approved");
                OnApprovedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Approved;
        partial void OnApprovedChanging(Nullable<global::System.Boolean> value);
        partial void OnApprovedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ApprovedOn
        {
            get
            {
                return _ApprovedOn;
            }
            set
            {
                OnApprovedOnChanging(value);
                ReportPropertyChanging("ApprovedOn");
                _ApprovedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ApprovedOn");
                OnApprovedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ApprovedOn;
        partial void OnApprovedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnApprovedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ApprovedBy
        {
            get
            {
                return _ApprovedBy;
            }
            set
            {
                OnApprovedByChanging(value);
                ReportPropertyChanging("ApprovedBy");
                _ApprovedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ApprovedBy");
                OnApprovedByChanged();
            }
        }
        private global::System.String _ApprovedBy;
        partial void OnApprovedByChanging(global::System.String value);
        partial void OnApprovedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ApprovedNotes
        {
            get
            {
                return _ApprovedNotes;
            }
            set
            {
                OnApprovedNotesChanging(value);
                ReportPropertyChanging("ApprovedNotes");
                _ApprovedNotes = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ApprovedNotes");
                OnApprovedNotesChanged();
            }
        }
        private global::System.String _ApprovedNotes;
        partial void OnApprovedNotesChanging(global::System.String value);
        partial void OnApprovedNotesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Requested
        {
            get
            {
                return _Requested;
            }
            set
            {
                OnRequestedChanging(value);
                ReportPropertyChanging("Requested");
                _Requested = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Requested");
                OnRequestedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Requested;
        partial void OnRequestedChanging(Nullable<global::System.Boolean> value);
        partial void OnRequestedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> RequestedOn
        {
            get
            {
                return _RequestedOn;
            }
            set
            {
                OnRequestedOnChanging(value);
                ReportPropertyChanging("RequestedOn");
                _RequestedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RequestedOn");
                OnRequestedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _RequestedOn;
        partial void OnRequestedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnRequestedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String RequestedBy
        {
            get
            {
                return _RequestedBy;
            }
            set
            {
                OnRequestedByChanging(value);
                ReportPropertyChanging("RequestedBy");
                _RequestedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("RequestedBy");
                OnRequestedByChanged();
            }
        }
        private global::System.String _RequestedBy;
        partial void OnRequestedByChanging(global::System.String value);
        partial void OnRequestedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String RequestedNotes
        {
            get
            {
                return _RequestedNotes;
            }
            set
            {
                OnRequestedNotesChanging(value);
                ReportPropertyChanging("RequestedNotes");
                _RequestedNotes = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("RequestedNotes");
                OnRequestedNotesChanged();
            }
        }
        private global::System.String _RequestedNotes;
        partial void OnRequestedNotesChanging(global::System.String value);
        partial void OnRequestedNotesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Rejected
        {
            get
            {
                return _Rejected;
            }
            set
            {
                OnRejectedChanging(value);
                ReportPropertyChanging("Rejected");
                _Rejected = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Rejected");
                OnRejectedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Rejected;
        partial void OnRejectedChanging(Nullable<global::System.Boolean> value);
        partial void OnRejectedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> RejectedOn
        {
            get
            {
                return _RejectedOn;
            }
            set
            {
                OnRejectedOnChanging(value);
                ReportPropertyChanging("RejectedOn");
                _RejectedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RejectedOn");
                OnRejectedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _RejectedOn;
        partial void OnRejectedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnRejectedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String RejectedBy
        {
            get
            {
                return _RejectedBy;
            }
            set
            {
                OnRejectedByChanging(value);
                ReportPropertyChanging("RejectedBy");
                _RejectedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("RejectedBy");
                OnRejectedByChanged();
            }
        }
        private global::System.String _RejectedBy;
        partial void OnRejectedByChanging(global::System.String value);
        partial void OnRejectedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String RejectedNotes
        {
            get
            {
                return _RejectedNotes;
            }
            set
            {
                OnRejectedNotesChanging(value);
                ReportPropertyChanging("RejectedNotes");
                _RejectedNotes = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("RejectedNotes");
                OnRejectedNotesChanged();
            }
        }
        private global::System.String _RejectedNotes;
        partial void OnRejectedNotesChanging(global::System.String value);
        partial void OnRejectedNotesChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_Approvals_Universities", "Universities")]
        public University University
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<University>("SetUp.FK_Approvals_Universities", "Universities").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<University>("SetUp.FK_Approvals_Universities", "Universities").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<University> UniversityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<University>("SetUp.FK_Approvals_Universities", "Universities");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<University>("SetUp.FK_Approvals_Universities", "Universities", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SetUp", Name="AreasOfSpecialization")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class AreasOfSpecialization : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new AreasOfSpecialization object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        /// <param name="descriptionsCode">Initial value of the DescriptionsCode property.</param>
        public static AreasOfSpecialization CreateAreasOfSpecialization(global::System.Int32 code, global::System.String descriptionsCode)
        {
            AreasOfSpecialization areasOfSpecialization = new AreasOfSpecialization();
            areasOfSpecialization.Code = code;
            areasOfSpecialization.DescriptionsCode = descriptionsCode;
            return areasOfSpecialization;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int32 _Code;
        partial void OnCodeChanging(global::System.Int32 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String DescriptionsCode
        {
            get
            {
                return _DescriptionsCode;
            }
            set
            {
                OnDescriptionsCodeChanging(value);
                ReportPropertyChanging("DescriptionsCode");
                _DescriptionsCode = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("DescriptionsCode");
                OnDescriptionsCodeChanged();
            }
        }
        private global::System.String _DescriptionsCode;
        partial void OnDescriptionsCodeChanging(global::System.String value);
        partial void OnDescriptionsCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Specialization
        {
            get
            {
                return _Specialization;
            }
            set
            {
                OnSpecializationChanging(value);
                ReportPropertyChanging("Specialization");
                _Specialization = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Specialization");
                OnSpecializationChanged();
            }
        }
        private global::System.String _Specialization;
        partial void OnSpecializationChanging(global::System.String value);
        partial void OnSpecializationChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SetUp", Name="Country")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Country : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Country object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Country CreateCountry(global::System.String code, global::System.String name)
        {
            Country country = new Country();
            country.Code = code;
            country.Name = name;
            return country;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.String _Code;
        partial void OnCodeChanging(global::System.String value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_CountriesLGA", "LGAs")]
        public EntityCollection<LGA> LGAs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<LGA>("SetUp.FK_CountriesLGA", "LGAs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<LGA>("SetUp.FK_CountriesLGA", "LGAs", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_CountriesStates", "States")]
        public EntityCollection<State> States
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<State>("SetUp.FK_CountriesStates", "States");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<State>("SetUp.FK_CountriesStates", "States", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SetUp", Name="Cours")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Cours : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Cours object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        /// <param name="universityCode">Initial value of the UniversityCode property.</param>
        /// <param name="facultyCode">Initial value of the FacultyCode property.</param>
        public static Cours CreateCours(global::System.Int64 code, global::System.String universityCode, global::System.Int64 facultyCode)
        {
            Cours cours = new Cours();
            cours.Code = code;
            cours.UniversityCode = universityCode;
            cours.FacultyCode = facultyCode;
            return cours;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 FacultyCode
        {
            get
            {
                return _FacultyCode;
            }
            set
            {
                OnFacultyCodeChanging(value);
                ReportPropertyChanging("FacultyCode");
                _FacultyCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FacultyCode");
                OnFacultyCodeChanged();
            }
        }
        private global::System.Int64 _FacultyCode;
        partial void OnFacultyCodeChanging(global::System.Int64 value);
        partial void OnFacultyCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> DepartmentCode
        {
            get
            {
                return _DepartmentCode;
            }
            set
            {
                OnDepartmentCodeChanging(value);
                ReportPropertyChanging("DepartmentCode");
                _DepartmentCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DepartmentCode");
                OnDepartmentCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _DepartmentCode;
        partial void OnDepartmentCodeChanging(Nullable<global::System.Int64> value);
        partial void OnDepartmentCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Acronym
        {
            get
            {
                return _Acronym;
            }
            set
            {
                OnAcronymChanging(value);
                ReportPropertyChanging("Acronym");
                _Acronym = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Acronym");
                OnAcronymChanged();
            }
        }
        private global::System.String _Acronym;
        partial void OnAcronymChanging(global::System.String value);
        partial void OnAcronymChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Notes
        {
            get
            {
                return _Notes;
            }
            set
            {
                OnNotesChanging(value);
                ReportPropertyChanging("Notes");
                _Notes = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Notes");
                OnNotesChanged();
            }
        }
        private global::System.String _Notes;
        partial void OnNotesChanging(global::System.String value);
        partial void OnNotesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_Courses_Departments", "Departments")]
        public Department Department
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Department>("SetUp.FK_Courses_Departments", "Departments").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Department>("SetUp.FK_Courses_Departments", "Departments").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Department> DepartmentReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Department>("SetUp.FK_Courses_Departments", "Departments");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Department>("SetUp.FK_Courses_Departments", "Departments", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_Programs_Courses", "Programs")]
        public EntityCollection<Program> Programs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Program>("SetUp.FK_Programs_Courses", "Programs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Program>("SetUp.FK_Programs_Courses", "Programs", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SetUp", Name="CourseNumbering")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CourseNumbering : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CourseNumbering object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        /// <param name="universityCode">Initial value of the UniversityCode property.</param>
        public static CourseNumbering CreateCourseNumbering(global::System.Int64 code, global::System.String universityCode)
        {
            CourseNumbering courseNumbering = new CourseNumbering();
            courseNumbering.Code = code;
            courseNumbering.UniversityCode = universityCode;
            return courseNumbering;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> NumberingLowerBound
        {
            get
            {
                return _NumberingLowerBound;
            }
            set
            {
                OnNumberingLowerBoundChanging(value);
                ReportPropertyChanging("NumberingLowerBound");
                _NumberingLowerBound = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("NumberingLowerBound");
                OnNumberingLowerBoundChanged();
            }
        }
        private Nullable<global::System.Int64> _NumberingLowerBound;
        partial void OnNumberingLowerBoundChanging(Nullable<global::System.Int64> value);
        partial void OnNumberingLowerBoundChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> NumberingUpperBound
        {
            get
            {
                return _NumberingUpperBound;
            }
            set
            {
                OnNumberingUpperBoundChanging(value);
                ReportPropertyChanging("NumberingUpperBound");
                _NumberingUpperBound = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("NumberingUpperBound");
                OnNumberingUpperBoundChanged();
            }
        }
        private Nullable<global::System.Int64> _NumberingUpperBound;
        partial void OnNumberingUpperBoundChanging(Nullable<global::System.Int64> value);
        partial void OnNumberingUpperBoundChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Notes
        {
            get
            {
                return _Notes;
            }
            set
            {
                OnNotesChanging(value);
                ReportPropertyChanging("Notes");
                _Notes = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Notes");
                OnNotesChanged();
            }
        }
        private global::System.String _Notes;
        partial void OnNotesChanging(global::System.String value);
        partial void OnNotesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_CourseNumbering_Universities", "Universities")]
        public University University
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<University>("SetUp.FK_CourseNumbering_Universities", "Universities").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<University>("SetUp.FK_CourseNumbering_Universities", "Universities").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<University> UniversityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<University>("SetUp.FK_CourseNumbering_Universities", "Universities");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<University>("SetUp.FK_CourseNumbering_Universities", "Universities", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_SubCourses_CourseNumbering", "SubCourses")]
        public EntityCollection<SubCours> SubCourses
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SubCours>("SetUp.FK_SubCourses_CourseNumbering", "SubCourses");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SubCours>("SetUp.FK_SubCourses_CourseNumbering", "SubCourses", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SetUp", Name="CourseRegulation")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CourseRegulation : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CourseRegulation object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static CourseRegulation CreateCourseRegulation(global::System.Int64 code)
        {
            CourseRegulation courseRegulation = new CourseRegulation();
            courseRegulation.Code = code;
            return courseRegulation;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> FacultyCode
        {
            get
            {
                return _FacultyCode;
            }
            set
            {
                OnFacultyCodeChanging(value);
                ReportPropertyChanging("FacultyCode");
                _FacultyCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FacultyCode");
                OnFacultyCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _FacultyCode;
        partial void OnFacultyCodeChanging(Nullable<global::System.Int64> value);
        partial void OnFacultyCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> DepartmentCode
        {
            get
            {
                return _DepartmentCode;
            }
            set
            {
                OnDepartmentCodeChanging(value);
                ReportPropertyChanging("DepartmentCode");
                _DepartmentCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DepartmentCode");
                OnDepartmentCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _DepartmentCode;
        partial void OnDepartmentCodeChanging(Nullable<global::System.Int64> value);
        partial void OnDepartmentCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CourseCode
        {
            get
            {
                return _CourseCode;
            }
            set
            {
                OnCourseCodeChanging(value);
                ReportPropertyChanging("CourseCode");
                _CourseCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CourseCode");
                OnCourseCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _CourseCode;
        partial void OnCourseCodeChanging(Nullable<global::System.Int64> value);
        partial void OnCourseCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ProgramCode
        {
            get
            {
                return _ProgramCode;
            }
            set
            {
                OnProgramCodeChanging(value);
                ReportPropertyChanging("ProgramCode");
                _ProgramCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ProgramCode");
                OnProgramCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _ProgramCode;
        partial void OnProgramCodeChanging(Nullable<global::System.Int64> value);
        partial void OnProgramCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> LevelCode
        {
            get
            {
                return _LevelCode;
            }
            set
            {
                OnLevelCodeChanging(value);
                ReportPropertyChanging("LevelCode");
                _LevelCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LevelCode");
                OnLevelCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _LevelCode;
        partial void OnLevelCodeChanging(Nullable<global::System.Int64> value);
        partial void OnLevelCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SemesterCode
        {
            get
            {
                return _SemesterCode;
            }
            set
            {
                OnSemesterCodeChanging(value);
                ReportPropertyChanging("SemesterCode");
                _SemesterCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SemesterCode");
                OnSemesterCodeChanged();
            }
        }
        private global::System.String _SemesterCode;
        partial void OnSemesterCodeChanging(global::System.String value);
        partial void OnSemesterCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> CreditLowerBound
        {
            get
            {
                return _CreditLowerBound;
            }
            set
            {
                OnCreditLowerBoundChanging(value);
                ReportPropertyChanging("CreditLowerBound");
                _CreditLowerBound = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreditLowerBound");
                OnCreditLowerBoundChanged();
            }
        }
        private Nullable<global::System.Int32> _CreditLowerBound;
        partial void OnCreditLowerBoundChanging(Nullable<global::System.Int32> value);
        partial void OnCreditLowerBoundChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> CreditUpperBound
        {
            get
            {
                return _CreditUpperBound;
            }
            set
            {
                OnCreditUpperBoundChanging(value);
                ReportPropertyChanging("CreditUpperBound");
                _CreditUpperBound = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreditUpperBound");
                OnCreditUpperBoundChanged();
            }
        }
        private Nullable<global::System.Int32> _CreditUpperBound;
        partial void OnCreditUpperBoundChanging(Nullable<global::System.Int32> value);
        partial void OnCreditUpperBoundChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModeOfStudyCode
        {
            get
            {
                return _ModeOfStudyCode;
            }
            set
            {
                OnModeOfStudyCodeChanging(value);
                ReportPropertyChanging("ModeOfStudyCode");
                _ModeOfStudyCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModeOfStudyCode");
                OnModeOfStudyCodeChanged();
            }
        }
        private global::System.String _ModeOfStudyCode;
        partial void OnModeOfStudyCodeChanging(global::System.String value);
        partial void OnModeOfStudyCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SetUp", Name="Department")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Department : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Department object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Department CreateDepartment(global::System.Int64 code)
        {
            Department department = new Department();
            department.Code = code;
            return department;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> FacultyCode
        {
            get
            {
                return _FacultyCode;
            }
            set
            {
                OnFacultyCodeChanging(value);
                ReportPropertyChanging("FacultyCode");
                _FacultyCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FacultyCode");
                OnFacultyCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _FacultyCode;
        partial void OnFacultyCodeChanging(Nullable<global::System.Int64> value);
        partial void OnFacultyCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Acronym
        {
            get
            {
                return _Acronym;
            }
            set
            {
                OnAcronymChanging(value);
                ReportPropertyChanging("Acronym");
                _Acronym = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Acronym");
                OnAcronymChanged();
            }
        }
        private global::System.String _Acronym;
        partial void OnAcronymChanging(global::System.String value);
        partial void OnAcronymChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Notes
        {
            get
            {
                return _Notes;
            }
            set
            {
                OnNotesChanging(value);
                ReportPropertyChanging("Notes");
                _Notes = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Notes");
                OnNotesChanged();
            }
        }
        private global::System.String _Notes;
        partial void OnNotesChanging(global::System.String value);
        partial void OnNotesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_Courses_Departments", "Courses")]
        public EntityCollection<Cours> Courses
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Cours>("SetUp.FK_Courses_Departments", "Courses");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Cours>("SetUp.FK_Courses_Departments", "Courses", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_Departments_Faculties", "Faculties")]
        public Faculty Faculty
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Faculty>("SetUp.FK_Departments_Faculties", "Faculties").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Faculty>("SetUp.FK_Departments_Faculties", "Faculties").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Faculty> FacultyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Faculty>("SetUp.FK_Departments_Faculties", "Faculties");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Faculty>("SetUp.FK_Departments_Faculties", "Faculties", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SetUp", Name="Description")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Description : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Description object.
        /// </summary>
        /// <param name="id">Initial value of the ID property.</param>
        public static Description CreateDescription(global::System.Int32 id)
        {
            Description description = new Description();
            description.ID = id;
            return description;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Code
        {
            get
            {
                return _Code;
            }
            set
            {
                OnCodeChanging(value);
                ReportPropertyChanging("Code");
                _Code = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Code");
                OnCodeChanged();
            }
        }
        private global::System.String _Code;
        partial void OnCodeChanging(global::System.String value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ParametersCode
        {
            get
            {
                return _ParametersCode;
            }
            set
            {
                OnParametersCodeChanging(value);
                ReportPropertyChanging("ParametersCode");
                _ParametersCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ParametersCode");
                OnParametersCodeChanged();
            }
        }
        private global::System.String _ParametersCode;
        partial void OnParametersCodeChanging(global::System.String value);
        partial void OnParametersCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Notes
        {
            get
            {
                return _Notes;
            }
            set
            {
                OnNotesChanging(value);
                ReportPropertyChanging("Notes");
                _Notes = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Notes");
                OnNotesChanged();
            }
        }
        private global::System.String _Notes;
        partial void OnNotesChanging(global::System.String value);
        partial void OnNotesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_ParametersDescriptions", "Parameter")]
        public Parameter Parameter
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Parameter>("SetUp.FK_ParametersDescriptions", "Parameter").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Parameter>("SetUp.FK_ParametersDescriptions", "Parameter").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Parameter> ParameterReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Parameter>("SetUp.FK_ParametersDescriptions", "Parameter");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Parameter>("SetUp.FK_ParametersDescriptions", "Parameter", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SetUp", Name="Designation")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Designation : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Designation object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Designation CreateDesignation(global::System.Int64 code)
        {
            Designation designation = new Designation();
            designation.Code = code;
            return designation;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String StaffCode
        {
            get
            {
                return _StaffCode;
            }
            set
            {
                OnStaffCodeChanging(value);
                ReportPropertyChanging("StaffCode");
                _StaffCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("StaffCode");
                OnStaffCodeChanged();
            }
        }
        private global::System.String _StaffCode;
        partial void OnStaffCodeChanging(global::System.String value);
        partial void OnStaffCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ComDate
        {
            get
            {
                return _ComDate;
            }
            set
            {
                OnComDateChanging(value);
                ReportPropertyChanging("ComDate");
                _ComDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ComDate");
                OnComDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _ComDate;
        partial void OnComDateChanging(Nullable<global::System.DateTime> value);
        partial void OnComDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CessDate
        {
            get
            {
                return _CessDate;
            }
            set
            {
                OnCessDateChanging(value);
                ReportPropertyChanging("CessDate");
                _CessDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CessDate");
                OnCessDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _CessDate;
        partial void OnCessDateChanging(Nullable<global::System.DateTime> value);
        partial void OnCessDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DesignationCode
        {
            get
            {
                return _DesignationCode;
            }
            set
            {
                OnDesignationCodeChanging(value);
                ReportPropertyChanging("DesignationCode");
                _DesignationCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DesignationCode");
                OnDesignationCodeChanged();
            }
        }
        private global::System.String _DesignationCode;
        partial void OnDesignationCodeChanging(global::System.String value);
        partial void OnDesignationCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String TypeCode
        {
            get
            {
                return _TypeCode;
            }
            set
            {
                OnTypeCodeChanging(value);
                ReportPropertyChanging("TypeCode");
                _TypeCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("TypeCode");
                OnTypeCodeChanged();
            }
        }
        private global::System.String _TypeCode;
        partial void OnTypeCodeChanging(global::System.String value);
        partial void OnTypeCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_Designations_Staff", "Staff")]
        public Staff Staff
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Staff>("SetUp.FK_Designations_Staff", "Staff").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Staff>("SetUp.FK_Designations_Staff", "Staff").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Staff> StaffReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Staff>("SetUp.FK_Designations_Staff", "Staff");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Staff>("SetUp.FK_Designations_Staff", "Staff", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SetUp", Name="Duration")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Duration : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Duration object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Duration CreateDuration(global::System.Int64 code)
        {
            Duration duration = new Duration();
            duration.Code = code;
            return duration;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> FacultyCode
        {
            get
            {
                return _FacultyCode;
            }
            set
            {
                OnFacultyCodeChanging(value);
                ReportPropertyChanging("FacultyCode");
                _FacultyCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FacultyCode");
                OnFacultyCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _FacultyCode;
        partial void OnFacultyCodeChanging(Nullable<global::System.Int64> value);
        partial void OnFacultyCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> DepartmentCode
        {
            get
            {
                return _DepartmentCode;
            }
            set
            {
                OnDepartmentCodeChanging(value);
                ReportPropertyChanging("DepartmentCode");
                _DepartmentCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DepartmentCode");
                OnDepartmentCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _DepartmentCode;
        partial void OnDepartmentCodeChanging(Nullable<global::System.Int64> value);
        partial void OnDepartmentCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CourseCode
        {
            get
            {
                return _CourseCode;
            }
            set
            {
                OnCourseCodeChanging(value);
                ReportPropertyChanging("CourseCode");
                _CourseCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CourseCode");
                OnCourseCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _CourseCode;
        partial void OnCourseCodeChanging(Nullable<global::System.Int64> value);
        partial void OnCourseCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ProgramCode
        {
            get
            {
                return _ProgramCode;
            }
            set
            {
                OnProgramCodeChanging(value);
                ReportPropertyChanging("ProgramCode");
                _ProgramCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ProgramCode");
                OnProgramCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _ProgramCode;
        partial void OnProgramCodeChanging(Nullable<global::System.Int64> value);
        partial void OnProgramCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModeOfStudy
        {
            get
            {
                return _ModeOfStudy;
            }
            set
            {
                OnModeOfStudyChanging(value);
                ReportPropertyChanging("ModeOfStudy");
                _ModeOfStudy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModeOfStudy");
                OnModeOfStudyChanged();
            }
        }
        private global::System.String _ModeOfStudy;
        partial void OnModeOfStudyChanging(global::System.String value);
        partial void OnModeOfStudyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> Duration1
        {
            get
            {
                return _Duration1;
            }
            set
            {
                OnDuration1Changing(value);
                ReportPropertyChanging("Duration1");
                _Duration1 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Duration1");
                OnDuration1Changed();
            }
        }
        private Nullable<global::System.Int64> _Duration1;
        partial void OnDuration1Changing(Nullable<global::System.Int64> value);
        partial void OnDuration1Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DurationUnit
        {
            get
            {
                return _DurationUnit;
            }
            set
            {
                OnDurationUnitChanging(value);
                ReportPropertyChanging("DurationUnit");
                _DurationUnit = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DurationUnit");
                OnDurationUnitChanged();
            }
        }
        private global::System.String _DurationUnit;
        partial void OnDurationUnitChanging(global::System.String value);
        partial void OnDurationUnitChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Notes
        {
            get
            {
                return _Notes;
            }
            set
            {
                OnNotesChanging(value);
                ReportPropertyChanging("Notes");
                _Notes = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Notes");
                OnNotesChanged();
            }
        }
        private global::System.String _Notes;
        partial void OnNotesChanging(global::System.String value);
        partial void OnNotesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_Durations_Programs", "Programs")]
        public Program Program
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Program>("SetUp.FK_Durations_Programs", "Programs").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Program>("SetUp.FK_Durations_Programs", "Programs").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Program> ProgramReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Program>("SetUp.FK_Durations_Programs", "Programs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Program>("SetUp.FK_Durations_Programs", "Programs", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SetUp", Name="EntryRequirement")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class EntryRequirement : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new EntryRequirement object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static EntryRequirement CreateEntryRequirement(global::System.Int64 code)
        {
            EntryRequirement entryRequirement = new EntryRequirement();
            entryRequirement.Code = code;
            return entryRequirement;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> FacultyCode
        {
            get
            {
                return _FacultyCode;
            }
            set
            {
                OnFacultyCodeChanging(value);
                ReportPropertyChanging("FacultyCode");
                _FacultyCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FacultyCode");
                OnFacultyCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _FacultyCode;
        partial void OnFacultyCodeChanging(Nullable<global::System.Int64> value);
        partial void OnFacultyCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> DepartmentCode
        {
            get
            {
                return _DepartmentCode;
            }
            set
            {
                OnDepartmentCodeChanging(value);
                ReportPropertyChanging("DepartmentCode");
                _DepartmentCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DepartmentCode");
                OnDepartmentCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _DepartmentCode;
        partial void OnDepartmentCodeChanging(Nullable<global::System.Int64> value);
        partial void OnDepartmentCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CourseCode
        {
            get
            {
                return _CourseCode;
            }
            set
            {
                OnCourseCodeChanging(value);
                ReportPropertyChanging("CourseCode");
                _CourseCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CourseCode");
                OnCourseCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _CourseCode;
        partial void OnCourseCodeChanging(Nullable<global::System.Int64> value);
        partial void OnCourseCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ProgramCode
        {
            get
            {
                return _ProgramCode;
            }
            set
            {
                OnProgramCodeChanging(value);
                ReportPropertyChanging("ProgramCode");
                _ProgramCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ProgramCode");
                OnProgramCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _ProgramCode;
        partial void OnProgramCodeChanging(Nullable<global::System.Int64> value);
        partial void OnProgramCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String EntryMode
        {
            get
            {
                return _EntryMode;
            }
            set
            {
                OnEntryModeChanging(value);
                ReportPropertyChanging("EntryMode");
                _EntryMode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("EntryMode");
                OnEntryModeChanged();
            }
        }
        private global::System.String _EntryMode;
        partial void OnEntryModeChanging(global::System.String value);
        partial void OnEntryModeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModeOfStudy
        {
            get
            {
                return _ModeOfStudy;
            }
            set
            {
                OnModeOfStudyChanging(value);
                ReportPropertyChanging("ModeOfStudy");
                _ModeOfStudy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModeOfStudy");
                OnModeOfStudyChanged();
            }
        }
        private global::System.String _ModeOfStudy;
        partial void OnModeOfStudyChanging(global::System.String value);
        partial void OnModeOfStudyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> NoOfCredits
        {
            get
            {
                return _NoOfCredits;
            }
            set
            {
                OnNoOfCreditsChanging(value);
                ReportPropertyChanging("NoOfCredits");
                _NoOfCredits = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("NoOfCredits");
                OnNoOfCreditsChanged();
            }
        }
        private Nullable<global::System.Int32> _NoOfCredits;
        partial void OnNoOfCreditsChanging(Nullable<global::System.Int32> value);
        partial void OnNoOfCreditsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> NoOfSittings
        {
            get
            {
                return _NoOfSittings;
            }
            set
            {
                OnNoOfSittingsChanging(value);
                ReportPropertyChanging("NoOfSittings");
                _NoOfSittings = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("NoOfSittings");
                OnNoOfSittingsChanged();
            }
        }
        private Nullable<global::System.Int32> _NoOfSittings;
        partial void OnNoOfSittingsChanging(Nullable<global::System.Int32> value);
        partial void OnNoOfSittingsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String RequirementType
        {
            get
            {
                return _RequirementType;
            }
            set
            {
                OnRequirementTypeChanging(value);
                ReportPropertyChanging("RequirementType");
                _RequirementType = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("RequirementType");
                OnRequirementTypeChanged();
            }
        }
        private global::System.String _RequirementType;
        partial void OnRequirementTypeChanging(global::System.String value);
        partial void OnRequirementTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SetUp", Name="Faculty")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Faculty : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Faculty object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Faculty CreateFaculty(global::System.Int64 code)
        {
            Faculty faculty = new Faculty();
            faculty.Code = code;
            return faculty;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Acronym
        {
            get
            {
                return _Acronym;
            }
            set
            {
                OnAcronymChanging(value);
                ReportPropertyChanging("Acronym");
                _Acronym = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Acronym");
                OnAcronymChanged();
            }
        }
        private global::System.String _Acronym;
        partial void OnAcronymChanging(global::System.String value);
        partial void OnAcronymChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Notes
        {
            get
            {
                return _Notes;
            }
            set
            {
                OnNotesChanging(value);
                ReportPropertyChanging("Notes");
                _Notes = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Notes");
                OnNotesChanged();
            }
        }
        private global::System.String _Notes;
        partial void OnNotesChanging(global::System.String value);
        partial void OnNotesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_Departments_Faculties", "Departments")]
        public EntityCollection<Department> Departments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Department>("SetUp.FK_Departments_Faculties", "Departments");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Department>("SetUp.FK_Departments_Faculties", "Departments", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_Faculties_Universities", "Universities")]
        public University University
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<University>("SetUp.FK_Faculties_Universities", "Universities").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<University>("SetUp.FK_Faculties_Universities", "Universities").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<University> UniversityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<University>("SetUp.FK_Faculties_Universities", "Universities");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<University>("SetUp.FK_Faculties_Universities", "Universities", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SetUp", Name="GradingSystem")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class GradingSystem : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new GradingSystem object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static GradingSystem CreateGradingSystem(global::System.Int64 code)
        {
            GradingSystem gradingSystem = new GradingSystem();
            gradingSystem.Code = code;
            return gradingSystem;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> ScoreLowerBound
        {
            get
            {
                return _ScoreLowerBound;
            }
            set
            {
                OnScoreLowerBoundChanging(value);
                ReportPropertyChanging("ScoreLowerBound");
                _ScoreLowerBound = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ScoreLowerBound");
                OnScoreLowerBoundChanged();
            }
        }
        private Nullable<global::System.Decimal> _ScoreLowerBound;
        partial void OnScoreLowerBoundChanging(Nullable<global::System.Decimal> value);
        partial void OnScoreLowerBoundChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> ScoreUpperBound
        {
            get
            {
                return _ScoreUpperBound;
            }
            set
            {
                OnScoreUpperBoundChanging(value);
                ReportPropertyChanging("ScoreUpperBound");
                _ScoreUpperBound = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ScoreUpperBound");
                OnScoreUpperBoundChanged();
            }
        }
        private Nullable<global::System.Decimal> _ScoreUpperBound;
        partial void OnScoreUpperBoundChanging(Nullable<global::System.Decimal> value);
        partial void OnScoreUpperBoundChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> CGPALowerBound
        {
            get
            {
                return _CGPALowerBound;
            }
            set
            {
                OnCGPALowerBoundChanging(value);
                ReportPropertyChanging("CGPALowerBound");
                _CGPALowerBound = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CGPALowerBound");
                OnCGPALowerBoundChanged();
            }
        }
        private Nullable<global::System.Decimal> _CGPALowerBound;
        partial void OnCGPALowerBoundChanging(Nullable<global::System.Decimal> value);
        partial void OnCGPALowerBoundChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> CGPAUpperBound
        {
            get
            {
                return _CGPAUpperBound;
            }
            set
            {
                OnCGPAUpperBoundChanging(value);
                ReportPropertyChanging("CGPAUpperBound");
                _CGPAUpperBound = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CGPAUpperBound");
                OnCGPAUpperBoundChanged();
            }
        }
        private Nullable<global::System.Decimal> _CGPAUpperBound;
        partial void OnCGPAUpperBoundChanging(Nullable<global::System.Decimal> value);
        partial void OnCGPAUpperBoundChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Notes
        {
            get
            {
                return _Notes;
            }
            set
            {
                OnNotesChanging(value);
                ReportPropertyChanging("Notes");
                _Notes = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Notes");
                OnNotesChanged();
            }
        }
        private global::System.String _Notes;
        partial void OnNotesChanging(global::System.String value);
        partial void OnNotesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_GradingSystem_Universities", "Universities")]
        public University University
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<University>("SetUp.FK_GradingSystem_Universities", "Universities").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<University>("SetUp.FK_GradingSystem_Universities", "Universities").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<University> UniversityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<University>("SetUp.FK_GradingSystem_Universities", "Universities");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<University>("SetUp.FK_GradingSystem_Universities", "Universities", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SetUp", Name="LGA")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class LGA : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new LGA object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        /// <param name="statesCode">Initial value of the StatesCode property.</param>
        /// <param name="countriesCode">Initial value of the CountriesCode property.</param>
        /// <param name="lgName">Initial value of the LgName property.</param>
        public static LGA CreateLGA(global::System.String code, global::System.String statesCode, global::System.String countriesCode, global::System.String lgName)
        {
            LGA lGA = new LGA();
            lGA.Code = code;
            lGA.StatesCode = statesCode;
            lGA.CountriesCode = countriesCode;
            lGA.LgName = lgName;
            return lGA;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.String _Code;
        partial void OnCodeChanging(global::System.String value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String StatesCode
        {
            get
            {
                return _StatesCode;
            }
            set
            {
                OnStatesCodeChanging(value);
                ReportPropertyChanging("StatesCode");
                _StatesCode = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("StatesCode");
                OnStatesCodeChanged();
            }
        }
        private global::System.String _StatesCode;
        partial void OnStatesCodeChanging(global::System.String value);
        partial void OnStatesCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CountriesCode
        {
            get
            {
                return _CountriesCode;
            }
            set
            {
                OnCountriesCodeChanging(value);
                ReportPropertyChanging("CountriesCode");
                _CountriesCode = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("CountriesCode");
                OnCountriesCodeChanged();
            }
        }
        private global::System.String _CountriesCode;
        partial void OnCountriesCodeChanging(global::System.String value);
        partial void OnCountriesCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LgName
        {
            get
            {
                return _LgName;
            }
            set
            {
                OnLgNameChanging(value);
                ReportPropertyChanging("LgName");
                _LgName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LgName");
                OnLgNameChanged();
            }
        }
        private global::System.String _LgName;
        partial void OnLgNameChanging(global::System.String value);
        partial void OnLgNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_CountriesLGA", "Countries")]
        public Country Country
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("SetUp.FK_CountriesLGA", "Countries").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("SetUp.FK_CountriesLGA", "Countries").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Country> CountryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("SetUp.FK_CountriesLGA", "Countries");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Country>("SetUp.FK_CountriesLGA", "Countries", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_StatesLGA", "States")]
        public State State
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("SetUp.FK_StatesLGA", "States").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("SetUp.FK_StatesLGA", "States").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<State> StateReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("SetUp.FK_StatesLGA", "States");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<State>("SetUp.FK_StatesLGA", "States", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SetUp", Name="Locking")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Locking : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Locking object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Locking CreateLocking(global::System.Int64 code)
        {
            Locking locking = new Locking();
            locking.Code = code;
            return locking;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> FacultyCode
        {
            get
            {
                return _FacultyCode;
            }
            set
            {
                OnFacultyCodeChanging(value);
                ReportPropertyChanging("FacultyCode");
                _FacultyCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FacultyCode");
                OnFacultyCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _FacultyCode;
        partial void OnFacultyCodeChanging(Nullable<global::System.Int64> value);
        partial void OnFacultyCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> DepartmentCode
        {
            get
            {
                return _DepartmentCode;
            }
            set
            {
                OnDepartmentCodeChanging(value);
                ReportPropertyChanging("DepartmentCode");
                _DepartmentCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DepartmentCode");
                OnDepartmentCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _DepartmentCode;
        partial void OnDepartmentCodeChanging(Nullable<global::System.Int64> value);
        partial void OnDepartmentCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CourseCode
        {
            get
            {
                return _CourseCode;
            }
            set
            {
                OnCourseCodeChanging(value);
                ReportPropertyChanging("CourseCode");
                _CourseCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CourseCode");
                OnCourseCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _CourseCode;
        partial void OnCourseCodeChanging(Nullable<global::System.Int64> value);
        partial void OnCourseCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ProgramCode
        {
            get
            {
                return _ProgramCode;
            }
            set
            {
                OnProgramCodeChanging(value);
                ReportPropertyChanging("ProgramCode");
                _ProgramCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ProgramCode");
                OnProgramCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _ProgramCode;
        partial void OnProgramCodeChanging(Nullable<global::System.Int64> value);
        partial void OnProgramCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SessionCode
        {
            get
            {
                return _SessionCode;
            }
            set
            {
                OnSessionCodeChanging(value);
                ReportPropertyChanging("SessionCode");
                _SessionCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SessionCode");
                OnSessionCodeChanged();
            }
        }
        private global::System.String _SessionCode;
        partial void OnSessionCodeChanging(global::System.String value);
        partial void OnSessionCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SemesterCode
        {
            get
            {
                return _SemesterCode;
            }
            set
            {
                OnSemesterCodeChanging(value);
                ReportPropertyChanging("SemesterCode");
                _SemesterCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SemesterCode");
                OnSemesterCodeChanged();
            }
        }
        private global::System.String _SemesterCode;
        partial void OnSemesterCodeChanging(global::System.String value);
        partial void OnSemesterCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> LevelCode
        {
            get
            {
                return _LevelCode;
            }
            set
            {
                OnLevelCodeChanging(value);
                ReportPropertyChanging("LevelCode");
                _LevelCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LevelCode");
                OnLevelCodeChanged();
            }
        }
        private Nullable<global::System.Int32> _LevelCode;
        partial void OnLevelCodeChanging(Nullable<global::System.Int32> value);
        partial void OnLevelCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountCode
        {
            get
            {
                return _AccountCode;
            }
            set
            {
                OnAccountCodeChanging(value);
                ReportPropertyChanging("AccountCode");
                _AccountCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountCode");
                OnAccountCodeChanged();
            }
        }
        private global::System.String _AccountCode;
        partial void OnAccountCodeChanging(global::System.String value);
        partial void OnAccountCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String EntityCode
        {
            get
            {
                return _EntityCode;
            }
            set
            {
                OnEntityCodeChanging(value);
                ReportPropertyChanging("EntityCode");
                _EntityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("EntityCode");
                OnEntityCodeChanged();
            }
        }
        private global::System.String _EntityCode;
        partial void OnEntityCodeChanging(global::System.String value);
        partial void OnEntityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Locked
        {
            get
            {
                return _Locked;
            }
            set
            {
                OnLockedChanging(value);
                ReportPropertyChanging("Locked");
                _Locked = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Locked");
                OnLockedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Locked;
        partial void OnLockedChanging(Nullable<global::System.Boolean> value);
        partial void OnLockedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> LockedOn
        {
            get
            {
                return _LockedOn;
            }
            set
            {
                OnLockedOnChanging(value);
                ReportPropertyChanging("LockedOn");
                _LockedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LockedOn");
                OnLockedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _LockedOn;
        partial void OnLockedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnLockedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LockedBy
        {
            get
            {
                return _LockedBy;
            }
            set
            {
                OnLockedByChanging(value);
                ReportPropertyChanging("LockedBy");
                _LockedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LockedBy");
                OnLockedByChanged();
            }
        }
        private global::System.String _LockedBy;
        partial void OnLockedByChanging(global::System.String value);
        partial void OnLockedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> UnlockedOn
        {
            get
            {
                return _UnlockedOn;
            }
            set
            {
                OnUnlockedOnChanging(value);
                ReportPropertyChanging("UnlockedOn");
                _UnlockedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UnlockedOn");
                OnUnlockedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _UnlockedOn;
        partial void OnUnlockedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnUnlockedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UnlockedBy
        {
            get
            {
                return _UnlockedBy;
            }
            set
            {
                OnUnlockedByChanging(value);
                ReportPropertyChanging("UnlockedBy");
                _UnlockedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UnlockedBy");
                OnUnlockedByChanged();
            }
        }
        private global::System.String _UnlockedBy;
        partial void OnUnlockedByChanging(global::System.String value);
        partial void OnUnlockedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> LastLockedOn
        {
            get
            {
                return _LastLockedOn;
            }
            set
            {
                OnLastLockedOnChanging(value);
                ReportPropertyChanging("LastLockedOn");
                _LastLockedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LastLockedOn");
                OnLastLockedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _LastLockedOn;
        partial void OnLastLockedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnLastLockedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LastLockedBy
        {
            get
            {
                return _LastLockedBy;
            }
            set
            {
                OnLastLockedByChanging(value);
                ReportPropertyChanging("LastLockedBy");
                _LastLockedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LastLockedBy");
                OnLastLockedByChanged();
            }
        }
        private global::System.String _LastLockedBy;
        partial void OnLastLockedByChanging(global::System.String value);
        partial void OnLastLockedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SetUp", Name="Module")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Module : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Module object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Module CreateModule(global::System.Int64 code)
        {
            Module module = new Module();
            module.Code = code;
            return module;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Url
        {
            get
            {
                return _Url;
            }
            set
            {
                OnUrlChanging(value);
                ReportPropertyChanging("Url");
                _Url = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Url");
                OnUrlChanged();
            }
        }
        private global::System.String _Url;
        partial void OnUrlChanging(global::System.String value);
        partial void OnUrlChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Notes
        {
            get
            {
                return _Notes;
            }
            set
            {
                OnNotesChanging(value);
                ReportPropertyChanging("Notes");
                _Notes = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Notes");
                OnNotesChanged();
            }
        }
        private global::System.String _Notes;
        partial void OnNotesChanging(global::System.String value);
        partial void OnNotesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_Modules_Universities", "Universities")]
        public University University
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<University>("SetUp.FK_Modules_Universities", "Universities").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<University>("SetUp.FK_Modules_Universities", "Universities").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<University> UniversityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<University>("SetUp.FK_Modules_Universities", "Universities");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<University>("SetUp.FK_Modules_Universities", "Universities", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_Screens_Screens", "Screens")]
        public EntityCollection<Screen> Screens
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Screen>("SetUp.FK_Screens_Screens", "Screens");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Screen>("SetUp.FK_Screens_Screens", "Screens", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SetUp", Name="Parameter")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Parameter : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Parameter object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Parameter CreateParameter(global::System.String code)
        {
            Parameter parameter = new Parameter();
            parameter.Code = code;
            return parameter;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.String _Code;
        partial void OnCodeChanging(global::System.String value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_ParametersDescriptions", "Description")]
        public EntityCollection<Description> Descriptions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Description>("SetUp.FK_ParametersDescriptions", "Description");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Description>("SetUp.FK_ParametersDescriptions", "Description", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SetUp", Name="Permission")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Permission : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Permission object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        /// <param name="screenCode">Initial value of the ScreenCode property.</param>
        /// <param name="actionCode">Initial value of the ActionCode property.</param>
        public static Permission CreatePermission(global::System.Int64 code, global::System.String screenCode, global::System.String actionCode)
        {
            Permission permission = new Permission();
            permission.Code = code;
            permission.ScreenCode = screenCode;
            permission.ActionCode = actionCode;
            return permission;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModuleCode
        {
            get
            {
                return _ModuleCode;
            }
            set
            {
                OnModuleCodeChanging(value);
                ReportPropertyChanging("ModuleCode");
                _ModuleCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModuleCode");
                OnModuleCodeChanged();
            }
        }
        private global::System.String _ModuleCode;
        partial void OnModuleCodeChanging(global::System.String value);
        partial void OnModuleCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ScreenCode
        {
            get
            {
                return _ScreenCode;
            }
            set
            {
                OnScreenCodeChanging(value);
                ReportPropertyChanging("ScreenCode");
                _ScreenCode = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ScreenCode");
                OnScreenCodeChanged();
            }
        }
        private global::System.String _ScreenCode;
        partial void OnScreenCodeChanging(global::System.String value);
        partial void OnScreenCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> RoleCode
        {
            get
            {
                return _RoleCode;
            }
            set
            {
                OnRoleCodeChanging(value);
                ReportPropertyChanging("RoleCode");
                _RoleCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RoleCode");
                OnRoleCodeChanged();
            }
        }
        private Nullable<global::System.Guid> _RoleCode;
        partial void OnRoleCodeChanging(Nullable<global::System.Guid> value);
        partial void OnRoleCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ActionCode
        {
            get
            {
                return _ActionCode;
            }
            set
            {
                OnActionCodeChanging(value);
                ReportPropertyChanging("ActionCode");
                _ActionCode = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ActionCode");
                OnActionCodeChanged();
            }
        }
        private global::System.String _ActionCode;
        partial void OnActionCodeChanging(global::System.String value);
        partial void OnActionCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SetUp", Name="Program")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Program : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Program object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Program CreateProgram(global::System.Int64 code)
        {
            Program program = new Program();
            program.Code = code;
            return program;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> FacultyCode
        {
            get
            {
                return _FacultyCode;
            }
            set
            {
                OnFacultyCodeChanging(value);
                ReportPropertyChanging("FacultyCode");
                _FacultyCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FacultyCode");
                OnFacultyCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _FacultyCode;
        partial void OnFacultyCodeChanging(Nullable<global::System.Int64> value);
        partial void OnFacultyCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> DepartmentCode
        {
            get
            {
                return _DepartmentCode;
            }
            set
            {
                OnDepartmentCodeChanging(value);
                ReportPropertyChanging("DepartmentCode");
                _DepartmentCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DepartmentCode");
                OnDepartmentCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _DepartmentCode;
        partial void OnDepartmentCodeChanging(Nullable<global::System.Int64> value);
        partial void OnDepartmentCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CourseCode
        {
            get
            {
                return _CourseCode;
            }
            set
            {
                OnCourseCodeChanging(value);
                ReportPropertyChanging("CourseCode");
                _CourseCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CourseCode");
                OnCourseCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _CourseCode;
        partial void OnCourseCodeChanging(Nullable<global::System.Int64> value);
        partial void OnCourseCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AwardCode
        {
            get
            {
                return _AwardCode;
            }
            set
            {
                OnAwardCodeChanging(value);
                ReportPropertyChanging("AwardCode");
                _AwardCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AwardCode");
                OnAwardCodeChanged();
            }
        }
        private global::System.String _AwardCode;
        partial void OnAwardCodeChanging(global::System.String value);
        partial void OnAwardCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ProgCode
        {
            get
            {
                return _ProgCode;
            }
            set
            {
                OnProgCodeChanging(value);
                ReportPropertyChanging("ProgCode");
                _ProgCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ProgCode");
                OnProgCodeChanged();
            }
        }
        private global::System.String _ProgCode;
        partial void OnProgCodeChanging(global::System.String value);
        partial void OnProgCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Notes
        {
            get
            {
                return _Notes;
            }
            set
            {
                OnNotesChanging(value);
                ReportPropertyChanging("Notes");
                _Notes = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Notes");
                OnNotesChanged();
            }
        }
        private global::System.String _Notes;
        partial void OnNotesChanging(global::System.String value);
        partial void OnNotesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ProgName
        {
            get
            {
                return _ProgName;
            }
            set
            {
                OnProgNameChanging(value);
                ReportPropertyChanging("ProgName");
                _ProgName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ProgName");
                OnProgNameChanged();
            }
        }
        private global::System.String _ProgName;
        partial void OnProgNameChanging(global::System.String value);
        partial void OnProgNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AwardInViewName
        {
            get
            {
                return _AwardInViewName;
            }
            set
            {
                OnAwardInViewNameChanging(value);
                ReportPropertyChanging("AwardInViewName");
                _AwardInViewName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AwardInViewName");
                OnAwardInViewNameChanged();
            }
        }
        private global::System.String _AwardInViewName;
        partial void OnAwardInViewNameChanging(global::System.String value);
        partial void OnAwardInViewNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_Programs_Courses", "Courses")]
        public Cours Cours
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Cours>("SetUp.FK_Programs_Courses", "Courses").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Cours>("SetUp.FK_Programs_Courses", "Courses").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Cours> CoursReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Cours>("SetUp.FK_Programs_Courses", "Courses");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Cours>("SetUp.FK_Programs_Courses", "Courses", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_Durations_Programs", "Durations")]
        public EntityCollection<Duration> Durations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Duration>("SetUp.FK_Durations_Programs", "Durations");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Duration>("SetUp.FK_Durations_Programs", "Durations", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SetUp", Name="ProgramRequirement")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ProgramRequirement : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ProgramRequirement object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static ProgramRequirement CreateProgramRequirement(global::System.Int64 code)
        {
            ProgramRequirement programRequirement = new ProgramRequirement();
            programRequirement.Code = code;
            return programRequirement;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> FacultyCode
        {
            get
            {
                return _FacultyCode;
            }
            set
            {
                OnFacultyCodeChanging(value);
                ReportPropertyChanging("FacultyCode");
                _FacultyCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FacultyCode");
                OnFacultyCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _FacultyCode;
        partial void OnFacultyCodeChanging(Nullable<global::System.Int64> value);
        partial void OnFacultyCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> DepartmentCode
        {
            get
            {
                return _DepartmentCode;
            }
            set
            {
                OnDepartmentCodeChanging(value);
                ReportPropertyChanging("DepartmentCode");
                _DepartmentCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DepartmentCode");
                OnDepartmentCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _DepartmentCode;
        partial void OnDepartmentCodeChanging(Nullable<global::System.Int64> value);
        partial void OnDepartmentCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CourseCode
        {
            get
            {
                return _CourseCode;
            }
            set
            {
                OnCourseCodeChanging(value);
                ReportPropertyChanging("CourseCode");
                _CourseCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CourseCode");
                OnCourseCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _CourseCode;
        partial void OnCourseCodeChanging(Nullable<global::System.Int64> value);
        partial void OnCourseCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ProgramCode
        {
            get
            {
                return _ProgramCode;
            }
            set
            {
                OnProgramCodeChanging(value);
                ReportPropertyChanging("ProgramCode");
                _ProgramCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ProgramCode");
                OnProgramCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _ProgramCode;
        partial void OnProgramCodeChanging(Nullable<global::System.Int64> value);
        partial void OnProgramCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> MinimumCredit
        {
            get
            {
                return _MinimumCredit;
            }
            set
            {
                OnMinimumCreditChanging(value);
                ReportPropertyChanging("MinimumCredit");
                _MinimumCredit = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MinimumCredit");
                OnMinimumCreditChanged();
            }
        }
        private Nullable<global::System.Int32> _MinimumCredit;
        partial void OnMinimumCreditChanging(Nullable<global::System.Int32> value);
        partial void OnMinimumCreditChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> MaximumCredit
        {
            get
            {
                return _MaximumCredit;
            }
            set
            {
                OnMaximumCreditChanging(value);
                ReportPropertyChanging("MaximumCredit");
                _MaximumCredit = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MaximumCredit");
                OnMaximumCreditChanged();
            }
        }
        private Nullable<global::System.Int32> _MaximumCredit;
        partial void OnMaximumCreditChanging(Nullable<global::System.Int32> value);
        partial void OnMaximumCreditChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> TotalDuration
        {
            get
            {
                return _TotalDuration;
            }
            set
            {
                OnTotalDurationChanging(value);
                ReportPropertyChanging("TotalDuration");
                _TotalDuration = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TotalDuration");
                OnTotalDurationChanged();
            }
        }
        private Nullable<global::System.Int64> _TotalDuration;
        partial void OnTotalDurationChanging(Nullable<global::System.Int64> value);
        partial void OnTotalDurationChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DurationUnit
        {
            get
            {
                return _DurationUnit;
            }
            set
            {
                OnDurationUnitChanging(value);
                ReportPropertyChanging("DurationUnit");
                _DurationUnit = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DurationUnit");
                OnDurationUnitChanged();
            }
        }
        private global::System.String _DurationUnit;
        partial void OnDurationUnitChanging(global::System.String value);
        partial void OnDurationUnitChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String EntryMode
        {
            get
            {
                return _EntryMode;
            }
            set
            {
                OnEntryModeChanging(value);
                ReportPropertyChanging("EntryMode");
                _EntryMode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("EntryMode");
                OnEntryModeChanged();
            }
        }
        private global::System.String _EntryMode;
        partial void OnEntryModeChanging(global::System.String value);
        partial void OnEntryModeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModeOfStudy
        {
            get
            {
                return _ModeOfStudy;
            }
            set
            {
                OnModeOfStudyChanging(value);
                ReportPropertyChanging("ModeOfStudy");
                _ModeOfStudy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModeOfStudy");
                OnModeOfStudyChanged();
            }
        }
        private global::System.String _ModeOfStudy;
        partial void OnModeOfStudyChanging(global::System.String value);
        partial void OnModeOfStudyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SetUp", Name="Schedule")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Schedule : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Schedule object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Schedule CreateSchedule(global::System.Int64 code)
        {
            Schedule schedule = new Schedule();
            schedule.Code = code;
            return schedule;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> FacultyCode
        {
            get
            {
                return _FacultyCode;
            }
            set
            {
                OnFacultyCodeChanging(value);
                ReportPropertyChanging("FacultyCode");
                _FacultyCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FacultyCode");
                OnFacultyCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _FacultyCode;
        partial void OnFacultyCodeChanging(Nullable<global::System.Int64> value);
        partial void OnFacultyCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> DepartmentCode
        {
            get
            {
                return _DepartmentCode;
            }
            set
            {
                OnDepartmentCodeChanging(value);
                ReportPropertyChanging("DepartmentCode");
                _DepartmentCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DepartmentCode");
                OnDepartmentCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _DepartmentCode;
        partial void OnDepartmentCodeChanging(Nullable<global::System.Int64> value);
        partial void OnDepartmentCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CourseCode
        {
            get
            {
                return _CourseCode;
            }
            set
            {
                OnCourseCodeChanging(value);
                ReportPropertyChanging("CourseCode");
                _CourseCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CourseCode");
                OnCourseCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _CourseCode;
        partial void OnCourseCodeChanging(Nullable<global::System.Int64> value);
        partial void OnCourseCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ProgramCode
        {
            get
            {
                return _ProgramCode;
            }
            set
            {
                OnProgramCodeChanging(value);
                ReportPropertyChanging("ProgramCode");
                _ProgramCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ProgramCode");
                OnProgramCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _ProgramCode;
        partial void OnProgramCodeChanging(Nullable<global::System.Int64> value);
        partial void OnProgramCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SemesterCode
        {
            get
            {
                return _SemesterCode;
            }
            set
            {
                OnSemesterCodeChanging(value);
                ReportPropertyChanging("SemesterCode");
                _SemesterCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SemesterCode");
                OnSemesterCodeChanged();
            }
        }
        private global::System.String _SemesterCode;
        partial void OnSemesterCodeChanging(global::System.String value);
        partial void OnSemesterCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> LevelCode
        {
            get
            {
                return _LevelCode;
            }
            set
            {
                OnLevelCodeChanging(value);
                ReportPropertyChanging("LevelCode");
                _LevelCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LevelCode");
                OnLevelCodeChanged();
            }
        }
        private Nullable<global::System.Int32> _LevelCode;
        partial void OnLevelCodeChanging(Nullable<global::System.Int32> value);
        partial void OnLevelCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> SubCode
        {
            get
            {
                return _SubCode;
            }
            set
            {
                OnSubCodeChanging(value);
                ReportPropertyChanging("SubCode");
                _SubCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SubCode");
                OnSubCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _SubCode;
        partial void OnSubCodeChanging(Nullable<global::System.Int64> value);
        partial void OnSubCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModeOfStudy
        {
            get
            {
                return _ModeOfStudy;
            }
            set
            {
                OnModeOfStudyChanging(value);
                ReportPropertyChanging("ModeOfStudy");
                _ModeOfStudy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModeOfStudy");
                OnModeOfStudyChanged();
            }
        }
        private global::System.String _ModeOfStudy;
        partial void OnModeOfStudyChanging(global::System.String value);
        partial void OnModeOfStudyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String StaffCode
        {
            get
            {
                return _StaffCode;
            }
            set
            {
                OnStaffCodeChanging(value);
                ReportPropertyChanging("StaffCode");
                _StaffCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("StaffCode");
                OnStaffCodeChanged();
            }
        }
        private global::System.String _StaffCode;
        partial void OnStaffCodeChanging(global::System.String value);
        partial void OnStaffCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateX
        {
            get
            {
                return _DateX;
            }
            set
            {
                OnDateXChanging(value);
                ReportPropertyChanging("DateX");
                _DateX = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateX");
                OnDateXChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateX;
        partial void OnDateXChanging(Nullable<global::System.DateTime> value);
        partial void OnDateXChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String StartTime
        {
            get
            {
                return _StartTime;
            }
            set
            {
                OnStartTimeChanging(value);
                ReportPropertyChanging("StartTime");
                _StartTime = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("StartTime");
                OnStartTimeChanged();
            }
        }
        private global::System.String _StartTime;
        partial void OnStartTimeChanging(global::System.String value);
        partial void OnStartTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String StopTime
        {
            get
            {
                return _StopTime;
            }
            set
            {
                OnStopTimeChanging(value);
                ReportPropertyChanging("StopTime");
                _StopTime = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("StopTime");
                OnStopTimeChanged();
            }
        }
        private global::System.String _StopTime;
        partial void OnStopTimeChanging(global::System.String value);
        partial void OnStopTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScheduleType
        {
            get
            {
                return _ScheduleType;
            }
            set
            {
                OnScheduleTypeChanging(value);
                ReportPropertyChanging("ScheduleType");
                _ScheduleType = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScheduleType");
                OnScheduleTypeChanged();
            }
        }
        private global::System.String _ScheduleType;
        partial void OnScheduleTypeChanging(global::System.String value);
        partial void OnScheduleTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Notes
        {
            get
            {
                return _Notes;
            }
            set
            {
                OnNotesChanging(value);
                ReportPropertyChanging("Notes");
                _Notes = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Notes");
                OnNotesChanged();
            }
        }
        private global::System.String _Notes;
        partial void OnNotesChanging(global::System.String value);
        partial void OnNotesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SetUp", Name="Screen")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Screen : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Screen object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        /// <param name="universityCode">Initial value of the UniversityCode property.</param>
        public static Screen CreateScreen(global::System.String code, global::System.String universityCode)
        {
            Screen screen = new Screen();
            screen.Code = code;
            screen.UniversityCode = universityCode;
            return screen;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.String _Code;
        partial void OnCodeChanging(global::System.String value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ModuleCode
        {
            get
            {
                return _ModuleCode;
            }
            set
            {
                OnModuleCodeChanging(value);
                ReportPropertyChanging("ModuleCode");
                _ModuleCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModuleCode");
                OnModuleCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _ModuleCode;
        partial void OnModuleCodeChanging(Nullable<global::System.Int64> value);
        partial void OnModuleCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Url
        {
            get
            {
                return _Url;
            }
            set
            {
                OnUrlChanging(value);
                ReportPropertyChanging("Url");
                _Url = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Url");
                OnUrlChanged();
            }
        }
        private global::System.String _Url;
        partial void OnUrlChanging(global::System.String value);
        partial void OnUrlChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Notes
        {
            get
            {
                return _Notes;
            }
            set
            {
                OnNotesChanging(value);
                ReportPropertyChanging("Notes");
                _Notes = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Notes");
                OnNotesChanged();
            }
        }
        private global::System.String _Notes;
        partial void OnNotesChanging(global::System.String value);
        partial void OnNotesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScreenDescription
        {
            get
            {
                return _ScreenDescription;
            }
            set
            {
                OnScreenDescriptionChanging(value);
                ReportPropertyChanging("ScreenDescription");
                _ScreenDescription = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScreenDescription");
                OnScreenDescriptionChanged();
            }
        }
        private global::System.String _ScreenDescription;
        partial void OnScreenDescriptionChanging(global::System.String value);
        partial void OnScreenDescriptionChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_Screens_Screens", "Modules")]
        public Module Module
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Module>("SetUp.FK_Screens_Screens", "Modules").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Module>("SetUp.FK_Screens_Screens", "Modules").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Module> ModuleReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Module>("SetUp.FK_Screens_Screens", "Modules");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Module>("SetUp.FK_Screens_Screens", "Modules", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SetUp", Name="Staff")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Staff : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Staff object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Staff CreateStaff(global::System.String code)
        {
            Staff staff = new Staff();
            staff.Code = code;
            return staff;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.String _Code;
        partial void OnCodeChanging(global::System.String value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountCode
        {
            get
            {
                return _AccountCode;
            }
            set
            {
                OnAccountCodeChanging(value);
                ReportPropertyChanging("AccountCode");
                _AccountCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountCode");
                OnAccountCodeChanged();
            }
        }
        private global::System.String _AccountCode;
        partial void OnAccountCodeChanging(global::System.String value);
        partial void OnAccountCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> FacultyCode
        {
            get
            {
                return _FacultyCode;
            }
            set
            {
                OnFacultyCodeChanging(value);
                ReportPropertyChanging("FacultyCode");
                _FacultyCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FacultyCode");
                OnFacultyCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _FacultyCode;
        partial void OnFacultyCodeChanging(Nullable<global::System.Int64> value);
        partial void OnFacultyCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> DepartmentCode
        {
            get
            {
                return _DepartmentCode;
            }
            set
            {
                OnDepartmentCodeChanging(value);
                ReportPropertyChanging("DepartmentCode");
                _DepartmentCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DepartmentCode");
                OnDepartmentCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _DepartmentCode;
        partial void OnDepartmentCodeChanging(Nullable<global::System.Int64> value);
        partial void OnDepartmentCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String StaffType
        {
            get
            {
                return _StaffType;
            }
            set
            {
                OnStaffTypeChanging(value);
                ReportPropertyChanging("StaffType");
                _StaffType = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("StaffType");
                OnStaffTypeChanged();
            }
        }
        private global::System.String _StaffType;
        partial void OnStaffTypeChanging(global::System.String value);
        partial void OnStaffTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ContractType
        {
            get
            {
                return _ContractType;
            }
            set
            {
                OnContractTypeChanging(value);
                ReportPropertyChanging("ContractType");
                _ContractType = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ContractType");
                OnContractTypeChanged();
            }
        }
        private global::System.String _ContractType;
        partial void OnContractTypeChanging(global::System.String value);
        partial void OnContractTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ComDate
        {
            get
            {
                return _ComDate;
            }
            set
            {
                OnComDateChanging(value);
                ReportPropertyChanging("ComDate");
                _ComDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ComDate");
                OnComDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _ComDate;
        partial void OnComDateChanging(Nullable<global::System.DateTime> value);
        partial void OnComDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CessDate
        {
            get
            {
                return _CessDate;
            }
            set
            {
                OnCessDateChanging(value);
                ReportPropertyChanging("CessDate");
                _CessDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CessDate");
                OnCessDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _CessDate;
        partial void OnCessDateChanging(Nullable<global::System.DateTime> value);
        partial void OnCessDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String StatusCode
        {
            get
            {
                return _StatusCode;
            }
            set
            {
                OnStatusCodeChanging(value);
                ReportPropertyChanging("StatusCode");
                _StatusCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("StatusCode");
                OnStatusCodeChanged();
            }
        }
        private global::System.String _StatusCode;
        partial void OnStatusCodeChanging(global::System.String value);
        partial void OnStatusCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String StatusReason
        {
            get
            {
                return _StatusReason;
            }
            set
            {
                OnStatusReasonChanging(value);
                ReportPropertyChanging("StatusReason");
                _StatusReason = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("StatusReason");
                OnStatusReasonChanged();
            }
        }
        private global::System.String _StatusReason;
        partial void OnStatusReasonChanging(global::System.String value);
        partial void OnStatusReasonChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_Designations_Staff", "Designations")]
        public EntityCollection<Designation> Designations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Designation>("SetUp.FK_Designations_Staff", "Designations");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Designation>("SetUp.FK_Designations_Staff", "Designations", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_Staff_Universities", "Universities")]
        public University University
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<University>("SetUp.FK_Staff_Universities", "Universities").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<University>("SetUp.FK_Staff_Universities", "Universities").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<University> UniversityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<University>("SetUp.FK_Staff_Universities", "Universities");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<University>("SetUp.FK_Staff_Universities", "Universities", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SetUp", Name="State")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class State : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new State object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="countriesCode">Initial value of the CountriesCode property.</param>
        public static State CreateState(global::System.String code, global::System.String name, global::System.String countriesCode)
        {
            State state = new State();
            state.Code = code;
            state.Name = name;
            state.CountriesCode = countriesCode;
            return state;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.String _Code;
        partial void OnCodeChanging(global::System.String value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CountriesCode
        {
            get
            {
                return _CountriesCode;
            }
            set
            {
                OnCountriesCodeChanging(value);
                ReportPropertyChanging("CountriesCode");
                _CountriesCode = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("CountriesCode");
                OnCountriesCodeChanged();
            }
        }
        private global::System.String _CountriesCode;
        partial void OnCountriesCodeChanging(global::System.String value);
        partial void OnCountriesCodeChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_CountriesStates", "Countries")]
        public Country Country
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("SetUp.FK_CountriesStates", "Countries").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("SetUp.FK_CountriesStates", "Countries").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Country> CountryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("SetUp.FK_CountriesStates", "Countries");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Country>("SetUp.FK_CountriesStates", "Countries", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_StatesLGA", "LGAs")]
        public EntityCollection<LGA> LGAs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<LGA>("SetUp.FK_StatesLGA", "LGAs");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<LGA>("SetUp.FK_StatesLGA", "LGAs", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SetUp", Name="SubCours")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SubCours : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new SubCours object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static SubCours CreateSubCours(global::System.Int64 code)
        {
            SubCours subCours = new SubCours();
            subCours.Code = code;
            return subCours;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> FacultyCode
        {
            get
            {
                return _FacultyCode;
            }
            set
            {
                OnFacultyCodeChanging(value);
                ReportPropertyChanging("FacultyCode");
                _FacultyCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FacultyCode");
                OnFacultyCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _FacultyCode;
        partial void OnFacultyCodeChanging(Nullable<global::System.Int64> value);
        partial void OnFacultyCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> DepartmentCode
        {
            get
            {
                return _DepartmentCode;
            }
            set
            {
                OnDepartmentCodeChanging(value);
                ReportPropertyChanging("DepartmentCode");
                _DepartmentCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DepartmentCode");
                OnDepartmentCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _DepartmentCode;
        partial void OnDepartmentCodeChanging(Nullable<global::System.Int64> value);
        partial void OnDepartmentCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CourseCode
        {
            get
            {
                return _CourseCode;
            }
            set
            {
                OnCourseCodeChanging(value);
                ReportPropertyChanging("CourseCode");
                _CourseCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CourseCode");
                OnCourseCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _CourseCode;
        partial void OnCourseCodeChanging(Nullable<global::System.Int64> value);
        partial void OnCourseCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ProgramCode
        {
            get
            {
                return _ProgramCode;
            }
            set
            {
                OnProgramCodeChanging(value);
                ReportPropertyChanging("ProgramCode");
                _ProgramCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ProgramCode");
                OnProgramCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _ProgramCode;
        partial void OnProgramCodeChanging(Nullable<global::System.Int64> value);
        partial void OnProgramCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SemesterCode
        {
            get
            {
                return _SemesterCode;
            }
            set
            {
                OnSemesterCodeChanging(value);
                ReportPropertyChanging("SemesterCode");
                _SemesterCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SemesterCode");
                OnSemesterCodeChanged();
            }
        }
        private global::System.String _SemesterCode;
        partial void OnSemesterCodeChanging(global::System.String value);
        partial void OnSemesterCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String StatusCode
        {
            get
            {
                return _StatusCode;
            }
            set
            {
                OnStatusCodeChanging(value);
                ReportPropertyChanging("StatusCode");
                _StatusCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("StatusCode");
                OnStatusCodeChanged();
            }
        }
        private global::System.String _StatusCode;
        partial void OnStatusCodeChanging(global::System.String value);
        partial void OnStatusCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> LevelCode
        {
            get
            {
                return _LevelCode;
            }
            set
            {
                OnLevelCodeChanging(value);
                ReportPropertyChanging("LevelCode");
                _LevelCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LevelCode");
                OnLevelCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _LevelCode;
        partial void OnLevelCodeChanging(Nullable<global::System.Int64> value);
        partial void OnLevelCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Practical
        {
            get
            {
                return _Practical;
            }
            set
            {
                OnPracticalChanging(value);
                ReportPropertyChanging("Practical");
                _Practical = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Practical");
                OnPracticalChanged();
            }
        }
        private Nullable<global::System.Int32> _Practical;
        partial void OnPracticalChanging(Nullable<global::System.Int32> value);
        partial void OnPracticalChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Laboratory
        {
            get
            {
                return _Laboratory;
            }
            set
            {
                OnLaboratoryChanging(value);
                ReportPropertyChanging("Laboratory");
                _Laboratory = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Laboratory");
                OnLaboratoryChanged();
            }
        }
        private Nullable<global::System.Int32> _Laboratory;
        partial void OnLaboratoryChanging(Nullable<global::System.Int32> value);
        partial void OnLaboratoryChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Credit
        {
            get
            {
                return _Credit;
            }
            set
            {
                OnCreditChanging(value);
                ReportPropertyChanging("Credit");
                _Credit = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Credit");
                OnCreditChanged();
            }
        }
        private Nullable<global::System.Int32> _Credit;
        partial void OnCreditChanging(Nullable<global::System.Int32> value);
        partial void OnCreditChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PrefixCode
        {
            get
            {
                return _PrefixCode;
            }
            set
            {
                OnPrefixCodeChanging(value);
                ReportPropertyChanging("PrefixCode");
                _PrefixCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PrefixCode");
                OnPrefixCodeChanged();
            }
        }
        private global::System.String _PrefixCode;
        partial void OnPrefixCodeChanging(global::System.String value);
        partial void OnPrefixCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> SubNo
        {
            get
            {
                return _SubNo;
            }
            set
            {
                OnSubNoChanging(value);
                ReportPropertyChanging("SubNo");
                _SubNo = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SubNo");
                OnSubNoChanged();
            }
        }
        private Nullable<global::System.Int32> _SubNo;
        partial void OnSubNoChanging(Nullable<global::System.Int32> value);
        partial void OnSubNoChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SubCode
        {
            get
            {
                return _SubCode;
            }
            set
            {
                OnSubCodeChanging(value);
                ReportPropertyChanging("SubCode");
                _SubCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SubCode");
                OnSubCodeChanged();
            }
        }
        private global::System.String _SubCode;
        partial void OnSubCodeChanging(global::System.String value);
        partial void OnSubCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Notes
        {
            get
            {
                return _Notes;
            }
            set
            {
                OnNotesChanging(value);
                ReportPropertyChanging("Notes");
                _Notes = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Notes");
                OnNotesChanged();
            }
        }
        private global::System.String _Notes;
        partial void OnNotesChanging(global::System.String value);
        partial void OnNotesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String StatusDescription
        {
            get
            {
                return _StatusDescription;
            }
            set
            {
                OnStatusDescriptionChanging(value);
                ReportPropertyChanging("StatusDescription");
                _StatusDescription = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("StatusDescription");
                OnStatusDescriptionChanged();
            }
        }
        private global::System.String _StatusDescription;
        partial void OnStatusDescriptionChanging(global::System.String value);
        partial void OnStatusDescriptionChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_SubCourses_CourseNumbering", "CourseNumbering")]
        public CourseNumbering CourseNumbering
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CourseNumbering>("SetUp.FK_SubCourses_CourseNumbering", "CourseNumbering").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CourseNumbering>("SetUp.FK_SubCourses_CourseNumbering", "CourseNumbering").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CourseNumbering> CourseNumberingReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CourseNumbering>("SetUp.FK_SubCourses_CourseNumbering", "CourseNumbering");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CourseNumbering>("SetUp.FK_SubCourses_CourseNumbering", "CourseNumbering", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SetUp", Name="SubjectRequirement")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SubjectRequirement : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new SubjectRequirement object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static SubjectRequirement CreateSubjectRequirement(global::System.Int64 code)
        {
            SubjectRequirement subjectRequirement = new SubjectRequirement();
            subjectRequirement.Code = code;
            return subjectRequirement;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> FacultyCode
        {
            get
            {
                return _FacultyCode;
            }
            set
            {
                OnFacultyCodeChanging(value);
                ReportPropertyChanging("FacultyCode");
                _FacultyCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FacultyCode");
                OnFacultyCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _FacultyCode;
        partial void OnFacultyCodeChanging(Nullable<global::System.Int64> value);
        partial void OnFacultyCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> DepartmentCode
        {
            get
            {
                return _DepartmentCode;
            }
            set
            {
                OnDepartmentCodeChanging(value);
                ReportPropertyChanging("DepartmentCode");
                _DepartmentCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DepartmentCode");
                OnDepartmentCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _DepartmentCode;
        partial void OnDepartmentCodeChanging(Nullable<global::System.Int64> value);
        partial void OnDepartmentCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CourseCode
        {
            get
            {
                return _CourseCode;
            }
            set
            {
                OnCourseCodeChanging(value);
                ReportPropertyChanging("CourseCode");
                _CourseCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CourseCode");
                OnCourseCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _CourseCode;
        partial void OnCourseCodeChanging(Nullable<global::System.Int64> value);
        partial void OnCourseCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ProgramCode
        {
            get
            {
                return _ProgramCode;
            }
            set
            {
                OnProgramCodeChanging(value);
                ReportPropertyChanging("ProgramCode");
                _ProgramCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ProgramCode");
                OnProgramCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _ProgramCode;
        partial void OnProgramCodeChanging(Nullable<global::System.Int64> value);
        partial void OnProgramCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SubjectCode
        {
            get
            {
                return _SubjectCode;
            }
            set
            {
                OnSubjectCodeChanging(value);
                ReportPropertyChanging("SubjectCode");
                _SubjectCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SubjectCode");
                OnSubjectCodeChanged();
            }
        }
        private global::System.String _SubjectCode;
        partial void OnSubjectCodeChanging(global::System.String value);
        partial void OnSubjectCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_SubjectRequirementDetails_SubjectRequirements", "SubjectRequirementDetails")]
        public EntityCollection<SubjectRequirementDetail> SubjectRequirementDetails
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SubjectRequirementDetail>("SetUp.FK_SubjectRequirementDetails_SubjectRequirements", "SubjectRequirementDetails");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SubjectRequirementDetail>("SetUp.FK_SubjectRequirementDetails_SubjectRequirements", "SubjectRequirementDetails", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SetUp", Name="SubjectRequirementDetail")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SubjectRequirementDetail : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new SubjectRequirementDetail object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static SubjectRequirementDetail CreateSubjectRequirementDetail(global::System.Int64 code)
        {
            SubjectRequirementDetail subjectRequirementDetail = new SubjectRequirementDetail();
            subjectRequirementDetail.Code = code;
            return subjectRequirementDetail;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> SubjectRequirementCode
        {
            get
            {
                return _SubjectRequirementCode;
            }
            set
            {
                OnSubjectRequirementCodeChanging(value);
                ReportPropertyChanging("SubjectRequirementCode");
                _SubjectRequirementCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SubjectRequirementCode");
                OnSubjectRequirementCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _SubjectRequirementCode;
        partial void OnSubjectRequirementCodeChanging(Nullable<global::System.Int64> value);
        partial void OnSubjectRequirementCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String GradeCode
        {
            get
            {
                return _GradeCode;
            }
            set
            {
                OnGradeCodeChanging(value);
                ReportPropertyChanging("GradeCode");
                _GradeCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("GradeCode");
                OnGradeCodeChanged();
            }
        }
        private global::System.String _GradeCode;
        partial void OnGradeCodeChanging(global::System.String value);
        partial void OnGradeCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_SubjectRequirementDetails_SubjectRequirements", "SubjectRequirements")]
        public SubjectRequirement SubjectRequirement
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SubjectRequirement>("SetUp.FK_SubjectRequirementDetails_SubjectRequirements", "SubjectRequirements").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SubjectRequirement>("SetUp.FK_SubjectRequirementDetails_SubjectRequirements", "SubjectRequirements").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<SubjectRequirement> SubjectRequirementReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SubjectRequirement>("SetUp.FK_SubjectRequirementDetails_SubjectRequirements", "SubjectRequirements");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<SubjectRequirement>("SetUp.FK_SubjectRequirementDetails_SubjectRequirements", "SubjectRequirements", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SetUp", Name="University")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class University : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new University object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static University CreateUniversity(global::System.String code)
        {
            University university = new University();
            university.Code = code;
            return university;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.String _Code;
        partial void OnCodeChanging(global::System.String value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityTypeCode
        {
            get
            {
                return _UniversityTypeCode;
            }
            set
            {
                OnUniversityTypeCodeChanging(value);
                ReportPropertyChanging("UniversityTypeCode");
                _UniversityTypeCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityTypeCode");
                OnUniversityTypeCodeChanged();
            }
        }
        private global::System.String _UniversityTypeCode;
        partial void OnUniversityTypeCodeChanging(global::System.String value);
        partial void OnUniversityTypeCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String BannerCode
        {
            get
            {
                return _BannerCode;
            }
            set
            {
                OnBannerCodeChanging(value);
                ReportPropertyChanging("BannerCode");
                _BannerCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("BannerCode");
                OnBannerCodeChanged();
            }
        }
        private global::System.String _BannerCode;
        partial void OnBannerCodeChanging(global::System.String value);
        partial void OnBannerCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LogoCode
        {
            get
            {
                return _LogoCode;
            }
            set
            {
                OnLogoCodeChanging(value);
                ReportPropertyChanging("LogoCode");
                _LogoCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LogoCode");
                OnLogoCodeChanged();
            }
        }
        private global::System.String _LogoCode;
        partial void OnLogoCodeChanging(global::System.String value);
        partial void OnLogoCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Url
        {
            get
            {
                return _Url;
            }
            set
            {
                OnUrlChanging(value);
                ReportPropertyChanging("Url");
                _Url = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Url");
                OnUrlChanged();
            }
        }
        private global::System.String _Url;
        partial void OnUrlChanging(global::System.String value);
        partial void OnUrlChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CountryCode
        {
            get
            {
                return _CountryCode;
            }
            set
            {
                OnCountryCodeChanging(value);
                ReportPropertyChanging("CountryCode");
                _CountryCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CountryCode");
                OnCountryCodeChanged();
            }
        }
        private global::System.String _CountryCode;
        partial void OnCountryCodeChanging(global::System.String value);
        partial void OnCountryCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String StateCode
        {
            get
            {
                return _StateCode;
            }
            set
            {
                OnStateCodeChanging(value);
                ReportPropertyChanging("StateCode");
                _StateCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("StateCode");
                OnStateCodeChanged();
            }
        }
        private global::System.String _StateCode;
        partial void OnStateCodeChanging(global::System.String value);
        partial void OnStateCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LgaCode
        {
            get
            {
                return _LgaCode;
            }
            set
            {
                OnLgaCodeChanging(value);
                ReportPropertyChanging("LgaCode");
                _LgaCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LgaCode");
                OnLgaCodeChanged();
            }
        }
        private global::System.String _LgaCode;
        partial void OnLgaCodeChanging(global::System.String value);
        partial void OnLgaCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Motto
        {
            get
            {
                return _Motto;
            }
            set
            {
                OnMottoChanging(value);
                ReportPropertyChanging("Motto");
                _Motto = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Motto");
                OnMottoChanged();
            }
        }
        private global::System.String _Motto;
        partial void OnMottoChanging(global::System.String value);
        partial void OnMottoChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Notes
        {
            get
            {
                return _Notes;
            }
            set
            {
                OnNotesChanging(value);
                ReportPropertyChanging("Notes");
                _Notes = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Notes");
                OnNotesChanged();
            }
        }
        private global::System.String _Notes;
        partial void OnNotesChanging(global::System.String value);
        partial void OnNotesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> EstablishedYear
        {
            get
            {
                return _EstablishedYear;
            }
            set
            {
                OnEstablishedYearChanging(value);
                ReportPropertyChanging("EstablishedYear");
                _EstablishedYear = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EstablishedYear");
                OnEstablishedYearChanged();
            }
        }
        private Nullable<global::System.Int32> _EstablishedYear;
        partial void OnEstablishedYearChanging(Nullable<global::System.Int32> value);
        partial void OnEstablishedYearChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_Approvals_Universities", "Approvals")]
        public EntityCollection<Approval> Approvals
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Approval>("SetUp.FK_Approvals_Universities", "Approvals");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Approval>("SetUp.FK_Approvals_Universities", "Approvals", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_CourseNumbering_Universities", "CourseNumbering")]
        public EntityCollection<CourseNumbering> CourseNumberings
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CourseNumbering>("SetUp.FK_CourseNumbering_Universities", "CourseNumbering");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CourseNumbering>("SetUp.FK_CourseNumbering_Universities", "CourseNumbering", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_Faculties_Universities", "Faculties")]
        public EntityCollection<Faculty> Faculties
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Faculty>("SetUp.FK_Faculties_Universities", "Faculties");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Faculty>("SetUp.FK_Faculties_Universities", "Faculties", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_GradingSystem_Universities", "GradingSystem")]
        public EntityCollection<GradingSystem> GradingSystems
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<GradingSystem>("SetUp.FK_GradingSystem_Universities", "GradingSystem");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<GradingSystem>("SetUp.FK_GradingSystem_Universities", "GradingSystem", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_Modules_Universities", "Modules")]
        public EntityCollection<Module> Modules
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Module>("SetUp.FK_Modules_Universities", "Modules");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Module>("SetUp.FK_Modules_Universities", "Modules", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SetUp", "FK_Staff_Universities", "Staff")]
        public EntityCollection<Staff> Staffs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Staff>("SetUp.FK_Staff_Universities", "Staff");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Staff>("SetUp.FK_Staff_Universities", "Staff", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
