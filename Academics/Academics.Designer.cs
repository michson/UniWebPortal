//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata
[assembly: EdmRelationshipAttribute("Academics", "FK_Semesters_Sessions", "Sessions", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Academics.Session), "Semesters", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Academics.Semester), true)]
[assembly: EdmRelationshipAttribute("Academics", "FK_SigningHierarchy_Sessions", "Sessions", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Academics.Session), "SigningHierarchy", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Academics.SigningHierarchy), true)]

#endregion
namespace Academics
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class AcademicsEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new AcademicsEntities object using the connection string found in the 'AcademicsEntities' section of the application configuration file.
        /// </summary>
        public AcademicsEntities() : base("name=AcademicsEntities", "AcademicsEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new AcademicsEntities object.
        /// </summary>
        public AcademicsEntities(string connectionString) : base(connectionString, "AcademicsEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new AcademicsEntities object.
        /// </summary>
        public AcademicsEntities(EntityConnection connection) : base(connection, "AcademicsEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<FinalSignatory> FinalSignatories
        {
            get
            {
                if ((_FinalSignatories == null))
                {
                    _FinalSignatories = base.CreateObjectSet<FinalSignatory>("FinalSignatories");
                }
                return _FinalSignatories;
            }
        }
        private ObjectSet<FinalSignatory> _FinalSignatories;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Registration> Registrations
        {
            get
            {
                if ((_Registrations == null))
                {
                    _Registrations = base.CreateObjectSet<Registration>("Registrations");
                }
                return _Registrations;
            }
        }
        private ObjectSet<Registration> _Registrations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Semester> Semesters
        {
            get
            {
                if ((_Semesters == null))
                {
                    _Semesters = base.CreateObjectSet<Semester>("Semesters");
                }
                return _Semesters;
            }
        }
        private ObjectSet<Semester> _Semesters;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Session> Sessions
        {
            get
            {
                if ((_Sessions == null))
                {
                    _Sessions = base.CreateObjectSet<Session>("Sessions");
                }
                return _Sessions;
            }
        }
        private ObjectSet<Session> _Sessions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SigningHierarchy> SigningHierarchies
        {
            get
            {
                if ((_SigningHierarchies == null))
                {
                    _SigningHierarchies = base.CreateObjectSet<SigningHierarchy>("SigningHierarchies");
                }
                return _SigningHierarchies;
            }
        }
        private ObjectSet<SigningHierarchy> _SigningHierarchies;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Submission> Submissions
        {
            get
            {
                if ((_Submissions == null))
                {
                    _Submissions = base.CreateObjectSet<Submission>("Submissions");
                }
                return _Submissions;
            }
        }
        private ObjectSet<Submission> _Submissions;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the FinalSignatories EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFinalSignatories(FinalSignatory finalSignatory)
        {
            base.AddObject("FinalSignatories", finalSignatory);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Registrations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRegistrations(Registration registration)
        {
            base.AddObject("Registrations", registration);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Semesters EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSemesters(Semester semester)
        {
            base.AddObject("Semesters", semester);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Sessions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSessions(Session session)
        {
            base.AddObject("Sessions", session);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SigningHierarchies EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSigningHierarchies(SigningHierarchy signingHierarchy)
        {
            base.AddObject("SigningHierarchies", signingHierarchy);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Submissions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSubmissions(Submission submission)
        {
            base.AddObject("Submissions", submission);
        }

        #endregion
        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<FinalSignatory> SPFinalSignatoriesDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<FinalSignatory>("SPFinalSignatoriesDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<FinalSignatory> SPFinalSignatoriesDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<FinalSignatory>("SPFinalSignatoriesDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<FinalSignatory> SPFinalSignatoriesDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<FinalSignatory>("SPFinalSignatoriesDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<FinalSignatory> SPFinalSignatoriesDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<FinalSignatory>("SPFinalSignatoriesDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="levelCode">No Metadata Documentation available.</param>
        /// <param name="studentCode">No Metadata Documentation available.</param>
        /// <param name="matricNo">No Metadata Documentation available.</param>
        /// <param name="sessionCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="signed">No Metadata Documentation available.</param>
        /// <param name="signedBy">No Metadata Documentation available.</param>
        /// <param name="signedOn">No Metadata Documentation available.</param>
        /// <param name="designationCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<FinalSignatory> SPFinalSignatoriesInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, Nullable<global::System.Int32> levelCode, Nullable<global::System.Int64> studentCode, global::System.String matricNo, Nullable<global::System.Int64> sessionCode, Nullable<global::System.Int64> semesterCode, Nullable<global::System.Boolean> signed, global::System.String signedBy, Nullable<global::System.DateTime> signedOn, global::System.String designationCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter levelCodeParameter;
            if (levelCode.HasValue)
            {
                levelCodeParameter = new ObjectParameter("LevelCode", levelCode);
            }
            else
            {
                levelCodeParameter = new ObjectParameter("LevelCode", typeof(global::System.Int32));
            }
    
            ObjectParameter studentCodeParameter;
            if (studentCode.HasValue)
            {
                studentCodeParameter = new ObjectParameter("StudentCode", studentCode);
            }
            else
            {
                studentCodeParameter = new ObjectParameter("StudentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter matricNoParameter;
            if (matricNo != null)
            {
                matricNoParameter = new ObjectParameter("MatricNo", matricNo);
            }
            else
            {
                matricNoParameter = new ObjectParameter("MatricNo", typeof(global::System.String));
            }
    
            ObjectParameter sessionCodeParameter;
            if (sessionCode.HasValue)
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", sessionCode);
            }
            else
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", typeof(global::System.Int64));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode.HasValue)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.Int64));
            }
    
            ObjectParameter signedParameter;
            if (signed.HasValue)
            {
                signedParameter = new ObjectParameter("Signed", signed);
            }
            else
            {
                signedParameter = new ObjectParameter("Signed", typeof(global::System.Boolean));
            }
    
            ObjectParameter signedByParameter;
            if (signedBy != null)
            {
                signedByParameter = new ObjectParameter("SignedBy", signedBy);
            }
            else
            {
                signedByParameter = new ObjectParameter("SignedBy", typeof(global::System.String));
            }
    
            ObjectParameter signedOnParameter;
            if (signedOn.HasValue)
            {
                signedOnParameter = new ObjectParameter("SignedOn", signedOn);
            }
            else
            {
                signedOnParameter = new ObjectParameter("SignedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter designationCodeParameter;
            if (designationCode != null)
            {
                designationCodeParameter = new ObjectParameter("DesignationCode", designationCode);
            }
            else
            {
                designationCodeParameter = new ObjectParameter("DesignationCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<FinalSignatory>("SPFinalSignatoriesInsertUpdate", codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, levelCodeParameter, studentCodeParameter, matricNoParameter, sessionCodeParameter, semesterCodeParameter, signedParameter, signedByParameter, signedOnParameter, designationCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="levelCode">No Metadata Documentation available.</param>
        /// <param name="studentCode">No Metadata Documentation available.</param>
        /// <param name="matricNo">No Metadata Documentation available.</param>
        /// <param name="sessionCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="signed">No Metadata Documentation available.</param>
        /// <param name="signedBy">No Metadata Documentation available.</param>
        /// <param name="signedOn">No Metadata Documentation available.</param>
        /// <param name="designationCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<FinalSignatory> SPFinalSignatoriesInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, Nullable<global::System.Int32> levelCode, Nullable<global::System.Int64> studentCode, global::System.String matricNo, Nullable<global::System.Int64> sessionCode, Nullable<global::System.Int64> semesterCode, Nullable<global::System.Boolean> signed, global::System.String signedBy, Nullable<global::System.DateTime> signedOn, global::System.String designationCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter levelCodeParameter;
            if (levelCode.HasValue)
            {
                levelCodeParameter = new ObjectParameter("LevelCode", levelCode);
            }
            else
            {
                levelCodeParameter = new ObjectParameter("LevelCode", typeof(global::System.Int32));
            }
    
            ObjectParameter studentCodeParameter;
            if (studentCode.HasValue)
            {
                studentCodeParameter = new ObjectParameter("StudentCode", studentCode);
            }
            else
            {
                studentCodeParameter = new ObjectParameter("StudentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter matricNoParameter;
            if (matricNo != null)
            {
                matricNoParameter = new ObjectParameter("MatricNo", matricNo);
            }
            else
            {
                matricNoParameter = new ObjectParameter("MatricNo", typeof(global::System.String));
            }
    
            ObjectParameter sessionCodeParameter;
            if (sessionCode.HasValue)
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", sessionCode);
            }
            else
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", typeof(global::System.Int64));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode.HasValue)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.Int64));
            }
    
            ObjectParameter signedParameter;
            if (signed.HasValue)
            {
                signedParameter = new ObjectParameter("Signed", signed);
            }
            else
            {
                signedParameter = new ObjectParameter("Signed", typeof(global::System.Boolean));
            }
    
            ObjectParameter signedByParameter;
            if (signedBy != null)
            {
                signedByParameter = new ObjectParameter("SignedBy", signedBy);
            }
            else
            {
                signedByParameter = new ObjectParameter("SignedBy", typeof(global::System.String));
            }
    
            ObjectParameter signedOnParameter;
            if (signedOn.HasValue)
            {
                signedOnParameter = new ObjectParameter("SignedOn", signedOn);
            }
            else
            {
                signedOnParameter = new ObjectParameter("SignedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter designationCodeParameter;
            if (designationCode != null)
            {
                designationCodeParameter = new ObjectParameter("DesignationCode", designationCode);
            }
            else
            {
                designationCodeParameter = new ObjectParameter("DesignationCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<FinalSignatory>("SPFinalSignatoriesInsertUpdate", mergeOption, codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, levelCodeParameter, studentCodeParameter, matricNoParameter, sessionCodeParameter, semesterCodeParameter, signedParameter, signedByParameter, signedOnParameter, designationCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<FinalSignatory> SPFinalSignatoriesSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<FinalSignatory>("SPFinalSignatoriesSelect", codeParameter, universityCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<FinalSignatory> SPFinalSignatoriesSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<FinalSignatory>("SPFinalSignatoriesSelect", mergeOption, codeParameter, universityCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Registration> SPRegistrationsDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Registration>("SPRegistrationsDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Registration> SPRegistrationsDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Registration>("SPRegistrationsDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Registration> SPRegistrationsDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Registration>("SPRegistrationsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Registration> SPRegistrationsDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Registration>("SPRegistrationsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="levelCode">No Metadata Documentation available.</param>
        /// <param name="studentCode">No Metadata Documentation available.</param>
        /// <param name="matricNo">No Metadata Documentation available.</param>
        /// <param name="sessionCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="typeCode">No Metadata Documentation available.</param>
        /// <param name="subCourseCode">No Metadata Documentation available.</param>
        /// <param name="status">No Metadata Documentation available.</param>
        /// <param name="ticketCode">No Metadata Documentation available.</param>
        /// <param name="pinCode">No Metadata Documentation available.</param>
        /// <param name="signed">No Metadata Documentation available.</param>
        /// <param name="signedBy">No Metadata Documentation available.</param>
        /// <param name="signedOn">No Metadata Documentation available.</param>
        /// <param name="selfSigned">No Metadata Documentation available.</param>
        /// <param name="selfSignedOn">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Registration> SPRegistrationsInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, Nullable<global::System.Int32> levelCode, Nullable<global::System.Int64> studentCode, global::System.String matricNo, Nullable<global::System.Int64> sessionCode, Nullable<global::System.Int64> semesterCode, global::System.String typeCode, Nullable<global::System.Int64> subCourseCode, global::System.String status, Nullable<global::System.Decimal> ticketCode, Nullable<global::System.Decimal> pinCode, Nullable<global::System.Boolean> signed, global::System.String signedBy, Nullable<global::System.DateTime> signedOn, Nullable<global::System.Boolean> selfSigned, Nullable<global::System.DateTime> selfSignedOn, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter levelCodeParameter;
            if (levelCode.HasValue)
            {
                levelCodeParameter = new ObjectParameter("LevelCode", levelCode);
            }
            else
            {
                levelCodeParameter = new ObjectParameter("LevelCode", typeof(global::System.Int32));
            }
    
            ObjectParameter studentCodeParameter;
            if (studentCode.HasValue)
            {
                studentCodeParameter = new ObjectParameter("StudentCode", studentCode);
            }
            else
            {
                studentCodeParameter = new ObjectParameter("StudentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter matricNoParameter;
            if (matricNo != null)
            {
                matricNoParameter = new ObjectParameter("MatricNo", matricNo);
            }
            else
            {
                matricNoParameter = new ObjectParameter("MatricNo", typeof(global::System.String));
            }
    
            ObjectParameter sessionCodeParameter;
            if (sessionCode.HasValue)
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", sessionCode);
            }
            else
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", typeof(global::System.Int64));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode.HasValue)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.Int64));
            }
    
            ObjectParameter typeCodeParameter;
            if (typeCode != null)
            {
                typeCodeParameter = new ObjectParameter("TypeCode", typeCode);
            }
            else
            {
                typeCodeParameter = new ObjectParameter("TypeCode", typeof(global::System.String));
            }
    
            ObjectParameter subCourseCodeParameter;
            if (subCourseCode.HasValue)
            {
                subCourseCodeParameter = new ObjectParameter("SubCourseCode", subCourseCode);
            }
            else
            {
                subCourseCodeParameter = new ObjectParameter("SubCourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter statusParameter;
            if (status != null)
            {
                statusParameter = new ObjectParameter("Status", status);
            }
            else
            {
                statusParameter = new ObjectParameter("Status", typeof(global::System.String));
            }
    
            ObjectParameter ticketCodeParameter;
            if (ticketCode.HasValue)
            {
                ticketCodeParameter = new ObjectParameter("TicketCode", ticketCode);
            }
            else
            {
                ticketCodeParameter = new ObjectParameter("TicketCode", typeof(global::System.Decimal));
            }
    
            ObjectParameter pinCodeParameter;
            if (pinCode.HasValue)
            {
                pinCodeParameter = new ObjectParameter("PinCode", pinCode);
            }
            else
            {
                pinCodeParameter = new ObjectParameter("PinCode", typeof(global::System.Decimal));
            }
    
            ObjectParameter signedParameter;
            if (signed.HasValue)
            {
                signedParameter = new ObjectParameter("Signed", signed);
            }
            else
            {
                signedParameter = new ObjectParameter("Signed", typeof(global::System.Boolean));
            }
    
            ObjectParameter signedByParameter;
            if (signedBy != null)
            {
                signedByParameter = new ObjectParameter("SignedBy", signedBy);
            }
            else
            {
                signedByParameter = new ObjectParameter("SignedBy", typeof(global::System.String));
            }
    
            ObjectParameter signedOnParameter;
            if (signedOn.HasValue)
            {
                signedOnParameter = new ObjectParameter("SignedOn", signedOn);
            }
            else
            {
                signedOnParameter = new ObjectParameter("SignedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter selfSignedParameter;
            if (selfSigned.HasValue)
            {
                selfSignedParameter = new ObjectParameter("SelfSigned", selfSigned);
            }
            else
            {
                selfSignedParameter = new ObjectParameter("SelfSigned", typeof(global::System.Boolean));
            }
    
            ObjectParameter selfSignedOnParameter;
            if (selfSignedOn.HasValue)
            {
                selfSignedOnParameter = new ObjectParameter("SelfSignedOn", selfSignedOn);
            }
            else
            {
                selfSignedOnParameter = new ObjectParameter("SelfSignedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Registration>("SPRegistrationsInsertUpdate", codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, levelCodeParameter, studentCodeParameter, matricNoParameter, sessionCodeParameter, semesterCodeParameter, typeCodeParameter, subCourseCodeParameter, statusParameter, ticketCodeParameter, pinCodeParameter, signedParameter, signedByParameter, signedOnParameter, selfSignedParameter, selfSignedOnParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="levelCode">No Metadata Documentation available.</param>
        /// <param name="studentCode">No Metadata Documentation available.</param>
        /// <param name="matricNo">No Metadata Documentation available.</param>
        /// <param name="sessionCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="typeCode">No Metadata Documentation available.</param>
        /// <param name="subCourseCode">No Metadata Documentation available.</param>
        /// <param name="status">No Metadata Documentation available.</param>
        /// <param name="ticketCode">No Metadata Documentation available.</param>
        /// <param name="pinCode">No Metadata Documentation available.</param>
        /// <param name="signed">No Metadata Documentation available.</param>
        /// <param name="signedBy">No Metadata Documentation available.</param>
        /// <param name="signedOn">No Metadata Documentation available.</param>
        /// <param name="selfSigned">No Metadata Documentation available.</param>
        /// <param name="selfSignedOn">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Registration> SPRegistrationsInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, Nullable<global::System.Int32> levelCode, Nullable<global::System.Int64> studentCode, global::System.String matricNo, Nullable<global::System.Int64> sessionCode, Nullable<global::System.Int64> semesterCode, global::System.String typeCode, Nullable<global::System.Int64> subCourseCode, global::System.String status, Nullable<global::System.Decimal> ticketCode, Nullable<global::System.Decimal> pinCode, Nullable<global::System.Boolean> signed, global::System.String signedBy, Nullable<global::System.DateTime> signedOn, Nullable<global::System.Boolean> selfSigned, Nullable<global::System.DateTime> selfSignedOn, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter levelCodeParameter;
            if (levelCode.HasValue)
            {
                levelCodeParameter = new ObjectParameter("LevelCode", levelCode);
            }
            else
            {
                levelCodeParameter = new ObjectParameter("LevelCode", typeof(global::System.Int32));
            }
    
            ObjectParameter studentCodeParameter;
            if (studentCode.HasValue)
            {
                studentCodeParameter = new ObjectParameter("StudentCode", studentCode);
            }
            else
            {
                studentCodeParameter = new ObjectParameter("StudentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter matricNoParameter;
            if (matricNo != null)
            {
                matricNoParameter = new ObjectParameter("MatricNo", matricNo);
            }
            else
            {
                matricNoParameter = new ObjectParameter("MatricNo", typeof(global::System.String));
            }
    
            ObjectParameter sessionCodeParameter;
            if (sessionCode.HasValue)
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", sessionCode);
            }
            else
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", typeof(global::System.Int64));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode.HasValue)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.Int64));
            }
    
            ObjectParameter typeCodeParameter;
            if (typeCode != null)
            {
                typeCodeParameter = new ObjectParameter("TypeCode", typeCode);
            }
            else
            {
                typeCodeParameter = new ObjectParameter("TypeCode", typeof(global::System.String));
            }
    
            ObjectParameter subCourseCodeParameter;
            if (subCourseCode.HasValue)
            {
                subCourseCodeParameter = new ObjectParameter("SubCourseCode", subCourseCode);
            }
            else
            {
                subCourseCodeParameter = new ObjectParameter("SubCourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter statusParameter;
            if (status != null)
            {
                statusParameter = new ObjectParameter("Status", status);
            }
            else
            {
                statusParameter = new ObjectParameter("Status", typeof(global::System.String));
            }
    
            ObjectParameter ticketCodeParameter;
            if (ticketCode.HasValue)
            {
                ticketCodeParameter = new ObjectParameter("TicketCode", ticketCode);
            }
            else
            {
                ticketCodeParameter = new ObjectParameter("TicketCode", typeof(global::System.Decimal));
            }
    
            ObjectParameter pinCodeParameter;
            if (pinCode.HasValue)
            {
                pinCodeParameter = new ObjectParameter("PinCode", pinCode);
            }
            else
            {
                pinCodeParameter = new ObjectParameter("PinCode", typeof(global::System.Decimal));
            }
    
            ObjectParameter signedParameter;
            if (signed.HasValue)
            {
                signedParameter = new ObjectParameter("Signed", signed);
            }
            else
            {
                signedParameter = new ObjectParameter("Signed", typeof(global::System.Boolean));
            }
    
            ObjectParameter signedByParameter;
            if (signedBy != null)
            {
                signedByParameter = new ObjectParameter("SignedBy", signedBy);
            }
            else
            {
                signedByParameter = new ObjectParameter("SignedBy", typeof(global::System.String));
            }
    
            ObjectParameter signedOnParameter;
            if (signedOn.HasValue)
            {
                signedOnParameter = new ObjectParameter("SignedOn", signedOn);
            }
            else
            {
                signedOnParameter = new ObjectParameter("SignedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter selfSignedParameter;
            if (selfSigned.HasValue)
            {
                selfSignedParameter = new ObjectParameter("SelfSigned", selfSigned);
            }
            else
            {
                selfSignedParameter = new ObjectParameter("SelfSigned", typeof(global::System.Boolean));
            }
    
            ObjectParameter selfSignedOnParameter;
            if (selfSignedOn.HasValue)
            {
                selfSignedOnParameter = new ObjectParameter("SelfSignedOn", selfSignedOn);
            }
            else
            {
                selfSignedOnParameter = new ObjectParameter("SelfSignedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Registration>("SPRegistrationsInsertUpdate", mergeOption, codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, levelCodeParameter, studentCodeParameter, matricNoParameter, sessionCodeParameter, semesterCodeParameter, typeCodeParameter, subCourseCodeParameter, statusParameter, ticketCodeParameter, pinCodeParameter, signedParameter, signedByParameter, signedOnParameter, selfSignedParameter, selfSignedOnParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Registration> SPRegistrationsSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Registration>("SPRegistrationsSelect", codeParameter, universityCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Registration> SPRegistrationsSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Registration>("SPRegistrationsSelect", mergeOption, codeParameter, universityCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Semester> SPSemestersDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Semester>("SPSemestersDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Semester> SPSemestersDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Semester>("SPSemestersDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Semester> SPSemestersDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Semester>("SPSemestersDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Semester> SPSemestersDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Semester>("SPSemestersDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="sessionCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="startDate">No Metadata Documentation available.</param>
        /// <param name="endate">No Metadata Documentation available.</param>
        /// <param name="registrationClosingDate">No Metadata Documentation available.</param>
        /// <param name="semesterStatus">No Metadata Documentation available.</param>
        /// <param name="totalDays">No Metadata Documentation available.</param>
        /// <param name="applicable">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Semester> SPSemestersInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> sessionCode, global::System.String semesterCode, Nullable<global::System.DateTime> startDate, Nullable<global::System.DateTime> endate, Nullable<global::System.DateTime> registrationClosingDate, global::System.String semesterStatus, Nullable<global::System.Int32> totalDays, Nullable<global::System.Boolean> applicable, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter sessionCodeParameter;
            if (sessionCode.HasValue)
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", sessionCode);
            }
            else
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", typeof(global::System.Int64));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode != null)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.String));
            }
    
            ObjectParameter startDateParameter;
            if (startDate.HasValue)
            {
                startDateParameter = new ObjectParameter("StartDate", startDate);
            }
            else
            {
                startDateParameter = new ObjectParameter("StartDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter endateParameter;
            if (endate.HasValue)
            {
                endateParameter = new ObjectParameter("Endate", endate);
            }
            else
            {
                endateParameter = new ObjectParameter("Endate", typeof(global::System.DateTime));
            }
    
            ObjectParameter registrationClosingDateParameter;
            if (registrationClosingDate.HasValue)
            {
                registrationClosingDateParameter = new ObjectParameter("RegistrationClosingDate", registrationClosingDate);
            }
            else
            {
                registrationClosingDateParameter = new ObjectParameter("RegistrationClosingDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter semesterStatusParameter;
            if (semesterStatus != null)
            {
                semesterStatusParameter = new ObjectParameter("SemesterStatus", semesterStatus);
            }
            else
            {
                semesterStatusParameter = new ObjectParameter("SemesterStatus", typeof(global::System.String));
            }
    
            ObjectParameter totalDaysParameter;
            if (totalDays.HasValue)
            {
                totalDaysParameter = new ObjectParameter("TotalDays", totalDays);
            }
            else
            {
                totalDaysParameter = new ObjectParameter("TotalDays", typeof(global::System.Int32));
            }
    
            ObjectParameter applicableParameter;
            if (applicable.HasValue)
            {
                applicableParameter = new ObjectParameter("Applicable", applicable);
            }
            else
            {
                applicableParameter = new ObjectParameter("Applicable", typeof(global::System.Boolean));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Semester>("SPSemestersInsertUpdate", codeParameter, universityCodeParameter, sessionCodeParameter, semesterCodeParameter, startDateParameter, endateParameter, registrationClosingDateParameter, semesterStatusParameter, totalDaysParameter, applicableParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="sessionCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="startDate">No Metadata Documentation available.</param>
        /// <param name="endate">No Metadata Documentation available.</param>
        /// <param name="registrationClosingDate">No Metadata Documentation available.</param>
        /// <param name="semesterStatus">No Metadata Documentation available.</param>
        /// <param name="totalDays">No Metadata Documentation available.</param>
        /// <param name="applicable">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Semester> SPSemestersInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> sessionCode, global::System.String semesterCode, Nullable<global::System.DateTime> startDate, Nullable<global::System.DateTime> endate, Nullable<global::System.DateTime> registrationClosingDate, global::System.String semesterStatus, Nullable<global::System.Int32> totalDays, Nullable<global::System.Boolean> applicable, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter sessionCodeParameter;
            if (sessionCode.HasValue)
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", sessionCode);
            }
            else
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", typeof(global::System.Int64));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode != null)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.String));
            }
    
            ObjectParameter startDateParameter;
            if (startDate.HasValue)
            {
                startDateParameter = new ObjectParameter("StartDate", startDate);
            }
            else
            {
                startDateParameter = new ObjectParameter("StartDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter endateParameter;
            if (endate.HasValue)
            {
                endateParameter = new ObjectParameter("Endate", endate);
            }
            else
            {
                endateParameter = new ObjectParameter("Endate", typeof(global::System.DateTime));
            }
    
            ObjectParameter registrationClosingDateParameter;
            if (registrationClosingDate.HasValue)
            {
                registrationClosingDateParameter = new ObjectParameter("RegistrationClosingDate", registrationClosingDate);
            }
            else
            {
                registrationClosingDateParameter = new ObjectParameter("RegistrationClosingDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter semesterStatusParameter;
            if (semesterStatus != null)
            {
                semesterStatusParameter = new ObjectParameter("SemesterStatus", semesterStatus);
            }
            else
            {
                semesterStatusParameter = new ObjectParameter("SemesterStatus", typeof(global::System.String));
            }
    
            ObjectParameter totalDaysParameter;
            if (totalDays.HasValue)
            {
                totalDaysParameter = new ObjectParameter("TotalDays", totalDays);
            }
            else
            {
                totalDaysParameter = new ObjectParameter("TotalDays", typeof(global::System.Int32));
            }
    
            ObjectParameter applicableParameter;
            if (applicable.HasValue)
            {
                applicableParameter = new ObjectParameter("Applicable", applicable);
            }
            else
            {
                applicableParameter = new ObjectParameter("Applicable", typeof(global::System.Boolean));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Semester>("SPSemestersInsertUpdate", mergeOption, codeParameter, universityCodeParameter, sessionCodeParameter, semesterCodeParameter, startDateParameter, endateParameter, registrationClosingDateParameter, semesterStatusParameter, totalDaysParameter, applicableParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Semester> SPSemestersSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Semester>("SPSemestersSelect", codeParameter, universityCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Semester> SPSemestersSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Semester>("SPSemestersSelect", mergeOption, codeParameter, universityCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Session> SPSessionsDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Session>("SPSessionsDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Session> SPSessionsDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Session>("SPSessionsDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Session> SPSessionsDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Session>("SPSessionsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Session> SPSessionsDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Session>("SPSessionsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="currentYear">No Metadata Documentation available.</param>
        /// <param name="nextYear">No Metadata Documentation available.</param>
        /// <param name="startDate">No Metadata Documentation available.</param>
        /// <param name="endDate">No Metadata Documentation available.</param>
        /// <param name="sessionStatus">No Metadata Documentation available.</param>
        /// <param name="applicable">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Session> SPSessionsInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int32> currentYear, Nullable<global::System.Int32> nextYear, Nullable<global::System.DateTime> startDate, Nullable<global::System.DateTime> endDate, global::System.String sessionStatus, Nullable<global::System.Boolean> applicable, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter currentYearParameter;
            if (currentYear.HasValue)
            {
                currentYearParameter = new ObjectParameter("CurrentYear", currentYear);
            }
            else
            {
                currentYearParameter = new ObjectParameter("CurrentYear", typeof(global::System.Int32));
            }
    
            ObjectParameter nextYearParameter;
            if (nextYear.HasValue)
            {
                nextYearParameter = new ObjectParameter("NextYear", nextYear);
            }
            else
            {
                nextYearParameter = new ObjectParameter("NextYear", typeof(global::System.Int32));
            }
    
            ObjectParameter startDateParameter;
            if (startDate.HasValue)
            {
                startDateParameter = new ObjectParameter("StartDate", startDate);
            }
            else
            {
                startDateParameter = new ObjectParameter("StartDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter endDateParameter;
            if (endDate.HasValue)
            {
                endDateParameter = new ObjectParameter("EndDate", endDate);
            }
            else
            {
                endDateParameter = new ObjectParameter("EndDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter sessionStatusParameter;
            if (sessionStatus != null)
            {
                sessionStatusParameter = new ObjectParameter("SessionStatus", sessionStatus);
            }
            else
            {
                sessionStatusParameter = new ObjectParameter("SessionStatus", typeof(global::System.String));
            }
    
            ObjectParameter applicableParameter;
            if (applicable.HasValue)
            {
                applicableParameter = new ObjectParameter("Applicable", applicable);
            }
            else
            {
                applicableParameter = new ObjectParameter("Applicable", typeof(global::System.Boolean));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Session>("SPSessionsInsertUpdate", codeParameter, universityCodeParameter, currentYearParameter, nextYearParameter, startDateParameter, endDateParameter, sessionStatusParameter, applicableParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="currentYear">No Metadata Documentation available.</param>
        /// <param name="nextYear">No Metadata Documentation available.</param>
        /// <param name="startDate">No Metadata Documentation available.</param>
        /// <param name="endDate">No Metadata Documentation available.</param>
        /// <param name="sessionStatus">No Metadata Documentation available.</param>
        /// <param name="applicable">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Session> SPSessionsInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int32> currentYear, Nullable<global::System.Int32> nextYear, Nullable<global::System.DateTime> startDate, Nullable<global::System.DateTime> endDate, global::System.String sessionStatus, Nullable<global::System.Boolean> applicable, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter currentYearParameter;
            if (currentYear.HasValue)
            {
                currentYearParameter = new ObjectParameter("CurrentYear", currentYear);
            }
            else
            {
                currentYearParameter = new ObjectParameter("CurrentYear", typeof(global::System.Int32));
            }
    
            ObjectParameter nextYearParameter;
            if (nextYear.HasValue)
            {
                nextYearParameter = new ObjectParameter("NextYear", nextYear);
            }
            else
            {
                nextYearParameter = new ObjectParameter("NextYear", typeof(global::System.Int32));
            }
    
            ObjectParameter startDateParameter;
            if (startDate.HasValue)
            {
                startDateParameter = new ObjectParameter("StartDate", startDate);
            }
            else
            {
                startDateParameter = new ObjectParameter("StartDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter endDateParameter;
            if (endDate.HasValue)
            {
                endDateParameter = new ObjectParameter("EndDate", endDate);
            }
            else
            {
                endDateParameter = new ObjectParameter("EndDate", typeof(global::System.DateTime));
            }
    
            ObjectParameter sessionStatusParameter;
            if (sessionStatus != null)
            {
                sessionStatusParameter = new ObjectParameter("SessionStatus", sessionStatus);
            }
            else
            {
                sessionStatusParameter = new ObjectParameter("SessionStatus", typeof(global::System.String));
            }
    
            ObjectParameter applicableParameter;
            if (applicable.HasValue)
            {
                applicableParameter = new ObjectParameter("Applicable", applicable);
            }
            else
            {
                applicableParameter = new ObjectParameter("Applicable", typeof(global::System.Boolean));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Session>("SPSessionsInsertUpdate", mergeOption, codeParameter, universityCodeParameter, currentYearParameter, nextYearParameter, startDateParameter, endDateParameter, sessionStatusParameter, applicableParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Session> SPSessionsSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Session>("SPSessionsSelect", codeParameter, universityCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Session> SPSessionsSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Session>("SPSessionsSelect", mergeOption, codeParameter, universityCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<SigningHierarchy> SPSigningHierarchyDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<SigningHierarchy>("SPSigningHierarchyDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<SigningHierarchy> SPSigningHierarchyDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<SigningHierarchy>("SPSigningHierarchyDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<SigningHierarchy> SPSigningHierarchyDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<SigningHierarchy>("SPSigningHierarchyDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<SigningHierarchy> SPSigningHierarchyDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<SigningHierarchy>("SPSigningHierarchyDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="designationCode">No Metadata Documentation available.</param>
        /// <param name="orderCode">No Metadata Documentation available.</param>
        /// <param name="sessionCode">No Metadata Documentation available.</param>
        /// <param name="applicable">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<SigningHierarchy> SPSigningHierarchyInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, global::System.String designationCode, global::System.String orderCode, Nullable<global::System.Int64> sessionCode, Nullable<global::System.Boolean> applicable, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter designationCodeParameter;
            if (designationCode != null)
            {
                designationCodeParameter = new ObjectParameter("DesignationCode", designationCode);
            }
            else
            {
                designationCodeParameter = new ObjectParameter("DesignationCode", typeof(global::System.String));
            }
    
            ObjectParameter orderCodeParameter;
            if (orderCode != null)
            {
                orderCodeParameter = new ObjectParameter("OrderCode", orderCode);
            }
            else
            {
                orderCodeParameter = new ObjectParameter("OrderCode", typeof(global::System.String));
            }
    
            ObjectParameter sessionCodeParameter;
            if (sessionCode.HasValue)
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", sessionCode);
            }
            else
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", typeof(global::System.Int64));
            }
    
            ObjectParameter applicableParameter;
            if (applicable.HasValue)
            {
                applicableParameter = new ObjectParameter("Applicable", applicable);
            }
            else
            {
                applicableParameter = new ObjectParameter("Applicable", typeof(global::System.Boolean));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<SigningHierarchy>("SPSigningHierarchyInsertUpdate", codeParameter, universityCodeParameter, designationCodeParameter, orderCodeParameter, sessionCodeParameter, applicableParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="designationCode">No Metadata Documentation available.</param>
        /// <param name="orderCode">No Metadata Documentation available.</param>
        /// <param name="sessionCode">No Metadata Documentation available.</param>
        /// <param name="applicable">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<SigningHierarchy> SPSigningHierarchyInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, global::System.String designationCode, global::System.String orderCode, Nullable<global::System.Int64> sessionCode, Nullable<global::System.Boolean> applicable, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter designationCodeParameter;
            if (designationCode != null)
            {
                designationCodeParameter = new ObjectParameter("DesignationCode", designationCode);
            }
            else
            {
                designationCodeParameter = new ObjectParameter("DesignationCode", typeof(global::System.String));
            }
    
            ObjectParameter orderCodeParameter;
            if (orderCode != null)
            {
                orderCodeParameter = new ObjectParameter("OrderCode", orderCode);
            }
            else
            {
                orderCodeParameter = new ObjectParameter("OrderCode", typeof(global::System.String));
            }
    
            ObjectParameter sessionCodeParameter;
            if (sessionCode.HasValue)
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", sessionCode);
            }
            else
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", typeof(global::System.Int64));
            }
    
            ObjectParameter applicableParameter;
            if (applicable.HasValue)
            {
                applicableParameter = new ObjectParameter("Applicable", applicable);
            }
            else
            {
                applicableParameter = new ObjectParameter("Applicable", typeof(global::System.Boolean));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<SigningHierarchy>("SPSigningHierarchyInsertUpdate", mergeOption, codeParameter, universityCodeParameter, designationCodeParameter, orderCodeParameter, sessionCodeParameter, applicableParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<SigningHierarchy> SPSigningHierarchySelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<SigningHierarchy>("SPSigningHierarchySelect", codeParameter, universityCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<SigningHierarchy> SPSigningHierarchySelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<SigningHierarchy>("SPSigningHierarchySelect", mergeOption, codeParameter, universityCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Submission> SPSubmissionsDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Submission>("SPSubmissionsDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Submission> SPSubmissionsDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Submission>("SPSubmissionsDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Submission> SPSubmissionsDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Submission>("SPSubmissionsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Submission> SPSubmissionsDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Submission>("SPSubmissionsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="levelCode">No Metadata Documentation available.</param>
        /// <param name="studentCode">No Metadata Documentation available.</param>
        /// <param name="matricNo">No Metadata Documentation available.</param>
        /// <param name="sessionCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="submitted">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="accepted">No Metadata Documentation available.</param>
        /// <param name="acceptedOn">No Metadata Documentation available.</param>
        /// <param name="acceptedBy">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Submission> SPSubmissionsInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, Nullable<global::System.Int32> levelCode, Nullable<global::System.Int64> studentCode, global::System.String matricNo, Nullable<global::System.Int64> sessionCode, Nullable<global::System.Int64> semesterCode, Nullable<global::System.Boolean> submitted, global::System.String screenCode, Nullable<global::System.Boolean> accepted, Nullable<global::System.DateTime> acceptedOn, global::System.String acceptedBy, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter levelCodeParameter;
            if (levelCode.HasValue)
            {
                levelCodeParameter = new ObjectParameter("LevelCode", levelCode);
            }
            else
            {
                levelCodeParameter = new ObjectParameter("LevelCode", typeof(global::System.Int32));
            }
    
            ObjectParameter studentCodeParameter;
            if (studentCode.HasValue)
            {
                studentCodeParameter = new ObjectParameter("StudentCode", studentCode);
            }
            else
            {
                studentCodeParameter = new ObjectParameter("StudentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter matricNoParameter;
            if (matricNo != null)
            {
                matricNoParameter = new ObjectParameter("MatricNo", matricNo);
            }
            else
            {
                matricNoParameter = new ObjectParameter("MatricNo", typeof(global::System.String));
            }
    
            ObjectParameter sessionCodeParameter;
            if (sessionCode.HasValue)
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", sessionCode);
            }
            else
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", typeof(global::System.Int64));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode.HasValue)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.Int64));
            }
    
            ObjectParameter submittedParameter;
            if (submitted.HasValue)
            {
                submittedParameter = new ObjectParameter("Submitted", submitted);
            }
            else
            {
                submittedParameter = new ObjectParameter("Submitted", typeof(global::System.Boolean));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter acceptedParameter;
            if (accepted.HasValue)
            {
                acceptedParameter = new ObjectParameter("Accepted", accepted);
            }
            else
            {
                acceptedParameter = new ObjectParameter("Accepted", typeof(global::System.Boolean));
            }
    
            ObjectParameter acceptedOnParameter;
            if (acceptedOn.HasValue)
            {
                acceptedOnParameter = new ObjectParameter("AcceptedOn", acceptedOn);
            }
            else
            {
                acceptedOnParameter = new ObjectParameter("AcceptedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter acceptedByParameter;
            if (acceptedBy != null)
            {
                acceptedByParameter = new ObjectParameter("AcceptedBy", acceptedBy);
            }
            else
            {
                acceptedByParameter = new ObjectParameter("AcceptedBy", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Submission>("SPSubmissionsInsertUpdate", codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, levelCodeParameter, studentCodeParameter, matricNoParameter, sessionCodeParameter, semesterCodeParameter, submittedParameter, screenCodeParameter, acceptedParameter, acceptedOnParameter, acceptedByParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="levelCode">No Metadata Documentation available.</param>
        /// <param name="studentCode">No Metadata Documentation available.</param>
        /// <param name="matricNo">No Metadata Documentation available.</param>
        /// <param name="sessionCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="submitted">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="accepted">No Metadata Documentation available.</param>
        /// <param name="acceptedOn">No Metadata Documentation available.</param>
        /// <param name="acceptedBy">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Submission> SPSubmissionsInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, Nullable<global::System.Int32> levelCode, Nullable<global::System.Int64> studentCode, global::System.String matricNo, Nullable<global::System.Int64> sessionCode, Nullable<global::System.Int64> semesterCode, Nullable<global::System.Boolean> submitted, global::System.String screenCode, Nullable<global::System.Boolean> accepted, Nullable<global::System.DateTime> acceptedOn, global::System.String acceptedBy, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter levelCodeParameter;
            if (levelCode.HasValue)
            {
                levelCodeParameter = new ObjectParameter("LevelCode", levelCode);
            }
            else
            {
                levelCodeParameter = new ObjectParameter("LevelCode", typeof(global::System.Int32));
            }
    
            ObjectParameter studentCodeParameter;
            if (studentCode.HasValue)
            {
                studentCodeParameter = new ObjectParameter("StudentCode", studentCode);
            }
            else
            {
                studentCodeParameter = new ObjectParameter("StudentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter matricNoParameter;
            if (matricNo != null)
            {
                matricNoParameter = new ObjectParameter("MatricNo", matricNo);
            }
            else
            {
                matricNoParameter = new ObjectParameter("MatricNo", typeof(global::System.String));
            }
    
            ObjectParameter sessionCodeParameter;
            if (sessionCode.HasValue)
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", sessionCode);
            }
            else
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", typeof(global::System.Int64));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode.HasValue)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.Int64));
            }
    
            ObjectParameter submittedParameter;
            if (submitted.HasValue)
            {
                submittedParameter = new ObjectParameter("Submitted", submitted);
            }
            else
            {
                submittedParameter = new ObjectParameter("Submitted", typeof(global::System.Boolean));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter acceptedParameter;
            if (accepted.HasValue)
            {
                acceptedParameter = new ObjectParameter("Accepted", accepted);
            }
            else
            {
                acceptedParameter = new ObjectParameter("Accepted", typeof(global::System.Boolean));
            }
    
            ObjectParameter acceptedOnParameter;
            if (acceptedOn.HasValue)
            {
                acceptedOnParameter = new ObjectParameter("AcceptedOn", acceptedOn);
            }
            else
            {
                acceptedOnParameter = new ObjectParameter("AcceptedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter acceptedByParameter;
            if (acceptedBy != null)
            {
                acceptedByParameter = new ObjectParameter("AcceptedBy", acceptedBy);
            }
            else
            {
                acceptedByParameter = new ObjectParameter("AcceptedBy", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Submission>("SPSubmissionsInsertUpdate", mergeOption, codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, levelCodeParameter, studentCodeParameter, matricNoParameter, sessionCodeParameter, semesterCodeParameter, submittedParameter, screenCodeParameter, acceptedParameter, acceptedOnParameter, acceptedByParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Submission> SPSubmissionsSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Submission>("SPSubmissionsSelect", codeParameter, universityCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Submission> SPSubmissionsSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Submission>("SPSubmissionsSelect", mergeOption, codeParameter, universityCodeParameter, deletedParameter);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Academics", Name="FinalSignatory")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class FinalSignatory : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new FinalSignatory object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static FinalSignatory CreateFinalSignatory(global::System.Int64 code)
        {
            FinalSignatory finalSignatory = new FinalSignatory();
            finalSignatory.Code = code;
            return finalSignatory;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> FacultyCode
        {
            get
            {
                return _FacultyCode;
            }
            set
            {
                OnFacultyCodeChanging(value);
                ReportPropertyChanging("FacultyCode");
                _FacultyCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FacultyCode");
                OnFacultyCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _FacultyCode;
        partial void OnFacultyCodeChanging(Nullable<global::System.Int64> value);
        partial void OnFacultyCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> DepartmentCode
        {
            get
            {
                return _DepartmentCode;
            }
            set
            {
                OnDepartmentCodeChanging(value);
                ReportPropertyChanging("DepartmentCode");
                _DepartmentCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DepartmentCode");
                OnDepartmentCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _DepartmentCode;
        partial void OnDepartmentCodeChanging(Nullable<global::System.Int64> value);
        partial void OnDepartmentCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CourseCode
        {
            get
            {
                return _CourseCode;
            }
            set
            {
                OnCourseCodeChanging(value);
                ReportPropertyChanging("CourseCode");
                _CourseCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CourseCode");
                OnCourseCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _CourseCode;
        partial void OnCourseCodeChanging(Nullable<global::System.Int64> value);
        partial void OnCourseCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ProgramCode
        {
            get
            {
                return _ProgramCode;
            }
            set
            {
                OnProgramCodeChanging(value);
                ReportPropertyChanging("ProgramCode");
                _ProgramCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ProgramCode");
                OnProgramCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _ProgramCode;
        partial void OnProgramCodeChanging(Nullable<global::System.Int64> value);
        partial void OnProgramCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> LevelCode
        {
            get
            {
                return _LevelCode;
            }
            set
            {
                OnLevelCodeChanging(value);
                ReportPropertyChanging("LevelCode");
                _LevelCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LevelCode");
                OnLevelCodeChanged();
            }
        }
        private Nullable<global::System.Int32> _LevelCode;
        partial void OnLevelCodeChanging(Nullable<global::System.Int32> value);
        partial void OnLevelCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> StudentCode
        {
            get
            {
                return _StudentCode;
            }
            set
            {
                OnStudentCodeChanging(value);
                ReportPropertyChanging("StudentCode");
                _StudentCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StudentCode");
                OnStudentCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _StudentCode;
        partial void OnStudentCodeChanging(Nullable<global::System.Int64> value);
        partial void OnStudentCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MatricNo
        {
            get
            {
                return _MatricNo;
            }
            set
            {
                OnMatricNoChanging(value);
                ReportPropertyChanging("MatricNo");
                _MatricNo = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MatricNo");
                OnMatricNoChanged();
            }
        }
        private global::System.String _MatricNo;
        partial void OnMatricNoChanging(global::System.String value);
        partial void OnMatricNoChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> SessionCode
        {
            get
            {
                return _SessionCode;
            }
            set
            {
                OnSessionCodeChanging(value);
                ReportPropertyChanging("SessionCode");
                _SessionCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SessionCode");
                OnSessionCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _SessionCode;
        partial void OnSessionCodeChanging(Nullable<global::System.Int64> value);
        partial void OnSessionCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> SemesterCode
        {
            get
            {
                return _SemesterCode;
            }
            set
            {
                OnSemesterCodeChanging(value);
                ReportPropertyChanging("SemesterCode");
                _SemesterCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SemesterCode");
                OnSemesterCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _SemesterCode;
        partial void OnSemesterCodeChanging(Nullable<global::System.Int64> value);
        partial void OnSemesterCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Signed
        {
            get
            {
                return _Signed;
            }
            set
            {
                OnSignedChanging(value);
                ReportPropertyChanging("Signed");
                _Signed = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Signed");
                OnSignedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Signed;
        partial void OnSignedChanging(Nullable<global::System.Boolean> value);
        partial void OnSignedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> SignedOn
        {
            get
            {
                return _SignedOn;
            }
            set
            {
                OnSignedOnChanging(value);
                ReportPropertyChanging("SignedOn");
                _SignedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SignedOn");
                OnSignedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _SignedOn;
        partial void OnSignedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnSignedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SignedBy
        {
            get
            {
                return _SignedBy;
            }
            set
            {
                OnSignedByChanging(value);
                ReportPropertyChanging("SignedBy");
                _SignedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SignedBy");
                OnSignedByChanged();
            }
        }
        private global::System.String _SignedBy;
        partial void OnSignedByChanging(global::System.String value);
        partial void OnSignedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DesignationCode
        {
            get
            {
                return _DesignationCode;
            }
            set
            {
                OnDesignationCodeChanging(value);
                ReportPropertyChanging("DesignationCode");
                _DesignationCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DesignationCode");
                OnDesignationCodeChanged();
            }
        }
        private global::System.String _DesignationCode;
        partial void OnDesignationCodeChanging(global::System.String value);
        partial void OnDesignationCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Academics", Name="Registration")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Registration : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Registration object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Registration CreateRegistration(global::System.Int64 code)
        {
            Registration registration = new Registration();
            registration.Code = code;
            return registration;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> StudentCode
        {
            get
            {
                return _StudentCode;
            }
            set
            {
                OnStudentCodeChanging(value);
                ReportPropertyChanging("StudentCode");
                _StudentCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StudentCode");
                OnStudentCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _StudentCode;
        partial void OnStudentCodeChanging(Nullable<global::System.Int64> value);
        partial void OnStudentCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MatricNo
        {
            get
            {
                return _MatricNo;
            }
            set
            {
                OnMatricNoChanging(value);
                ReportPropertyChanging("MatricNo");
                _MatricNo = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MatricNo");
                OnMatricNoChanged();
            }
        }
        private global::System.String _MatricNo;
        partial void OnMatricNoChanging(global::System.String value);
        partial void OnMatricNoChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> FacultyCode
        {
            get
            {
                return _FacultyCode;
            }
            set
            {
                OnFacultyCodeChanging(value);
                ReportPropertyChanging("FacultyCode");
                _FacultyCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FacultyCode");
                OnFacultyCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _FacultyCode;
        partial void OnFacultyCodeChanging(Nullable<global::System.Int64> value);
        partial void OnFacultyCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> DepartmentCode
        {
            get
            {
                return _DepartmentCode;
            }
            set
            {
                OnDepartmentCodeChanging(value);
                ReportPropertyChanging("DepartmentCode");
                _DepartmentCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DepartmentCode");
                OnDepartmentCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _DepartmentCode;
        partial void OnDepartmentCodeChanging(Nullable<global::System.Int64> value);
        partial void OnDepartmentCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CourseCode
        {
            get
            {
                return _CourseCode;
            }
            set
            {
                OnCourseCodeChanging(value);
                ReportPropertyChanging("CourseCode");
                _CourseCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CourseCode");
                OnCourseCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _CourseCode;
        partial void OnCourseCodeChanging(Nullable<global::System.Int64> value);
        partial void OnCourseCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ProgramCode
        {
            get
            {
                return _ProgramCode;
            }
            set
            {
                OnProgramCodeChanging(value);
                ReportPropertyChanging("ProgramCode");
                _ProgramCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ProgramCode");
                OnProgramCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _ProgramCode;
        partial void OnProgramCodeChanging(Nullable<global::System.Int64> value);
        partial void OnProgramCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> LevelCode
        {
            get
            {
                return _LevelCode;
            }
            set
            {
                OnLevelCodeChanging(value);
                ReportPropertyChanging("LevelCode");
                _LevelCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LevelCode");
                OnLevelCodeChanged();
            }
        }
        private Nullable<global::System.Int32> _LevelCode;
        partial void OnLevelCodeChanging(Nullable<global::System.Int32> value);
        partial void OnLevelCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String TypeCode
        {
            get
            {
                return _TypeCode;
            }
            set
            {
                OnTypeCodeChanging(value);
                ReportPropertyChanging("TypeCode");
                _TypeCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("TypeCode");
                OnTypeCodeChanged();
            }
        }
        private global::System.String _TypeCode;
        partial void OnTypeCodeChanging(global::System.String value);
        partial void OnTypeCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> SessionCode
        {
            get
            {
                return _SessionCode;
            }
            set
            {
                OnSessionCodeChanging(value);
                ReportPropertyChanging("SessionCode");
                _SessionCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SessionCode");
                OnSessionCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _SessionCode;
        partial void OnSessionCodeChanging(Nullable<global::System.Int64> value);
        partial void OnSessionCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> SemesterCode
        {
            get
            {
                return _SemesterCode;
            }
            set
            {
                OnSemesterCodeChanging(value);
                ReportPropertyChanging("SemesterCode");
                _SemesterCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SemesterCode");
                OnSemesterCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _SemesterCode;
        partial void OnSemesterCodeChanging(Nullable<global::System.Int64> value);
        partial void OnSemesterCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> SubCourseCode
        {
            get
            {
                return _SubCourseCode;
            }
            set
            {
                OnSubCourseCodeChanging(value);
                ReportPropertyChanging("SubCourseCode");
                _SubCourseCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SubCourseCode");
                OnSubCourseCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _SubCourseCode;
        partial void OnSubCourseCodeChanging(Nullable<global::System.Int64> value);
        partial void OnSubCourseCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Status
        {
            get
            {
                return _Status;
            }
            set
            {
                OnStatusChanging(value);
                ReportPropertyChanging("Status");
                _Status = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Status");
                OnStatusChanged();
            }
        }
        private global::System.String _Status;
        partial void OnStatusChanging(global::System.String value);
        partial void OnStatusChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Signed
        {
            get
            {
                return _Signed;
            }
            set
            {
                OnSignedChanging(value);
                ReportPropertyChanging("Signed");
                _Signed = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Signed");
                OnSignedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Signed;
        partial void OnSignedChanging(Nullable<global::System.Boolean> value);
        partial void OnSignedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> SignedOn
        {
            get
            {
                return _SignedOn;
            }
            set
            {
                OnSignedOnChanging(value);
                ReportPropertyChanging("SignedOn");
                _SignedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SignedOn");
                OnSignedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _SignedOn;
        partial void OnSignedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnSignedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SignedBy
        {
            get
            {
                return _SignedBy;
            }
            set
            {
                OnSignedByChanging(value);
                ReportPropertyChanging("SignedBy");
                _SignedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SignedBy");
                OnSignedByChanged();
            }
        }
        private global::System.String _SignedBy;
        partial void OnSignedByChanging(global::System.String value);
        partial void OnSignedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> SelfSigned
        {
            get
            {
                return _SelfSigned;
            }
            set
            {
                OnSelfSignedChanging(value);
                ReportPropertyChanging("SelfSigned");
                _SelfSigned = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SelfSigned");
                OnSelfSignedChanged();
            }
        }
        private Nullable<global::System.Boolean> _SelfSigned;
        partial void OnSelfSignedChanging(Nullable<global::System.Boolean> value);
        partial void OnSelfSignedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> SelfSignedOn
        {
            get
            {
                return _SelfSignedOn;
            }
            set
            {
                OnSelfSignedOnChanging(value);
                ReportPropertyChanging("SelfSignedOn");
                _SelfSignedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SelfSignedOn");
                OnSelfSignedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _SelfSignedOn;
        partial void OnSelfSignedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnSelfSignedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> TicketCode
        {
            get
            {
                return _TicketCode;
            }
            set
            {
                OnTicketCodeChanging(value);
                ReportPropertyChanging("TicketCode");
                _TicketCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TicketCode");
                OnTicketCodeChanged();
            }
        }
        private Nullable<global::System.Decimal> _TicketCode;
        partial void OnTicketCodeChanging(Nullable<global::System.Decimal> value);
        partial void OnTicketCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> PinCode
        {
            get
            {
                return _PinCode;
            }
            set
            {
                OnPinCodeChanging(value);
                ReportPropertyChanging("PinCode");
                _PinCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PinCode");
                OnPinCodeChanged();
            }
        }
        private Nullable<global::System.Decimal> _PinCode;
        partial void OnPinCodeChanging(Nullable<global::System.Decimal> value);
        partial void OnPinCodeChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Academics", Name="Semester")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Semester : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Semester object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Semester CreateSemester(global::System.Int64 code)
        {
            Semester semester = new Semester();
            semester.Code = code;
            return semester;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SemesterCode
        {
            get
            {
                return _SemesterCode;
            }
            set
            {
                OnSemesterCodeChanging(value);
                ReportPropertyChanging("SemesterCode");
                _SemesterCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SemesterCode");
                OnSemesterCodeChanged();
            }
        }
        private global::System.String _SemesterCode;
        partial void OnSemesterCodeChanging(global::System.String value);
        partial void OnSemesterCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> SessionCode
        {
            get
            {
                return _SessionCode;
            }
            set
            {
                OnSessionCodeChanging(value);
                ReportPropertyChanging("SessionCode");
                _SessionCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SessionCode");
                OnSessionCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _SessionCode;
        partial void OnSessionCodeChanging(Nullable<global::System.Int64> value);
        partial void OnSessionCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> StartDate
        {
            get
            {
                return _StartDate;
            }
            set
            {
                OnStartDateChanging(value);
                ReportPropertyChanging("StartDate");
                _StartDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StartDate");
                OnStartDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _StartDate;
        partial void OnStartDateChanging(Nullable<global::System.DateTime> value);
        partial void OnStartDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> Endate
        {
            get
            {
                return _Endate;
            }
            set
            {
                OnEndateChanging(value);
                ReportPropertyChanging("Endate");
                _Endate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Endate");
                OnEndateChanged();
            }
        }
        private Nullable<global::System.DateTime> _Endate;
        partial void OnEndateChanging(Nullable<global::System.DateTime> value);
        partial void OnEndateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> RegistrationClosingDate
        {
            get
            {
                return _RegistrationClosingDate;
            }
            set
            {
                OnRegistrationClosingDateChanging(value);
                ReportPropertyChanging("RegistrationClosingDate");
                _RegistrationClosingDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RegistrationClosingDate");
                OnRegistrationClosingDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _RegistrationClosingDate;
        partial void OnRegistrationClosingDateChanging(Nullable<global::System.DateTime> value);
        partial void OnRegistrationClosingDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SemesterStatus
        {
            get
            {
                return _SemesterStatus;
            }
            set
            {
                OnSemesterStatusChanging(value);
                ReportPropertyChanging("SemesterStatus");
                _SemesterStatus = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SemesterStatus");
                OnSemesterStatusChanged();
            }
        }
        private global::System.String _SemesterStatus;
        partial void OnSemesterStatusChanging(global::System.String value);
        partial void OnSemesterStatusChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> TotalDays
        {
            get
            {
                return _TotalDays;
            }
            set
            {
                OnTotalDaysChanging(value);
                ReportPropertyChanging("TotalDays");
                _TotalDays = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TotalDays");
                OnTotalDaysChanged();
            }
        }
        private Nullable<global::System.Int32> _TotalDays;
        partial void OnTotalDaysChanging(Nullable<global::System.Int32> value);
        partial void OnTotalDaysChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Applicable
        {
            get
            {
                return _Applicable;
            }
            set
            {
                OnApplicableChanging(value);
                ReportPropertyChanging("Applicable");
                _Applicable = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Applicable");
                OnApplicableChanged();
            }
        }
        private Nullable<global::System.Boolean> _Applicable;
        partial void OnApplicableChanging(Nullable<global::System.Boolean> value);
        partial void OnApplicableChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Academics", "FK_Semesters_Sessions", "Sessions")]
        public Session Session
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Session>("Academics.FK_Semesters_Sessions", "Sessions").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Session>("Academics.FK_Semesters_Sessions", "Sessions").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Session> SessionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Session>("Academics.FK_Semesters_Sessions", "Sessions");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Session>("Academics.FK_Semesters_Sessions", "Sessions", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Academics", Name="Session")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Session : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Session object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Session CreateSession(global::System.Int64 code)
        {
            Session session = new Session();
            session.Code = code;
            return session;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> CurrentYear
        {
            get
            {
                return _CurrentYear;
            }
            set
            {
                OnCurrentYearChanging(value);
                ReportPropertyChanging("CurrentYear");
                _CurrentYear = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CurrentYear");
                OnCurrentYearChanged();
            }
        }
        private Nullable<global::System.Int32> _CurrentYear;
        partial void OnCurrentYearChanging(Nullable<global::System.Int32> value);
        partial void OnCurrentYearChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> NextYear
        {
            get
            {
                return _NextYear;
            }
            set
            {
                OnNextYearChanging(value);
                ReportPropertyChanging("NextYear");
                _NextYear = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("NextYear");
                OnNextYearChanged();
            }
        }
        private Nullable<global::System.Int32> _NextYear;
        partial void OnNextYearChanging(Nullable<global::System.Int32> value);
        partial void OnNextYearChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SessionStatus
        {
            get
            {
                return _SessionStatus;
            }
            set
            {
                OnSessionStatusChanging(value);
                ReportPropertyChanging("SessionStatus");
                _SessionStatus = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SessionStatus");
                OnSessionStatusChanged();
            }
        }
        private global::System.String _SessionStatus;
        partial void OnSessionStatusChanging(global::System.String value);
        partial void OnSessionStatusChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> StartDate
        {
            get
            {
                return _StartDate;
            }
            set
            {
                OnStartDateChanging(value);
                ReportPropertyChanging("StartDate");
                _StartDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StartDate");
                OnStartDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _StartDate;
        partial void OnStartDateChanging(Nullable<global::System.DateTime> value);
        partial void OnStartDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> EndDate
        {
            get
            {
                return _EndDate;
            }
            set
            {
                OnEndDateChanging(value);
                ReportPropertyChanging("EndDate");
                _EndDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EndDate");
                OnEndDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _EndDate;
        partial void OnEndDateChanging(Nullable<global::System.DateTime> value);
        partial void OnEndDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Applicable
        {
            get
            {
                return _Applicable;
            }
            set
            {
                OnApplicableChanging(value);
                ReportPropertyChanging("Applicable");
                _Applicable = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Applicable");
                OnApplicableChanged();
            }
        }
        private Nullable<global::System.Boolean> _Applicable;
        partial void OnApplicableChanging(Nullable<global::System.Boolean> value);
        partial void OnApplicableChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Academics", "FK_Semesters_Sessions", "Semesters")]
        public EntityCollection<Semester> Semesters
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Semester>("Academics.FK_Semesters_Sessions", "Semesters");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Semester>("Academics.FK_Semesters_Sessions", "Semesters", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Academics", "FK_SigningHierarchy_Sessions", "SigningHierarchy")]
        public EntityCollection<SigningHierarchy> SigningHierarchies
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SigningHierarchy>("Academics.FK_SigningHierarchy_Sessions", "SigningHierarchy");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SigningHierarchy>("Academics.FK_SigningHierarchy_Sessions", "SigningHierarchy", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Academics", Name="SigningHierarchy")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SigningHierarchy : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new SigningHierarchy object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static SigningHierarchy CreateSigningHierarchy(global::System.Int64 code)
        {
            SigningHierarchy signingHierarchy = new SigningHierarchy();
            signingHierarchy.Code = code;
            return signingHierarchy;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DesignationCode
        {
            get
            {
                return _DesignationCode;
            }
            set
            {
                OnDesignationCodeChanging(value);
                ReportPropertyChanging("DesignationCode");
                _DesignationCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DesignationCode");
                OnDesignationCodeChanged();
            }
        }
        private global::System.String _DesignationCode;
        partial void OnDesignationCodeChanging(global::System.String value);
        partial void OnDesignationCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String OrderCode
        {
            get
            {
                return _OrderCode;
            }
            set
            {
                OnOrderCodeChanging(value);
                ReportPropertyChanging("OrderCode");
                _OrderCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("OrderCode");
                OnOrderCodeChanged();
            }
        }
        private global::System.String _OrderCode;
        partial void OnOrderCodeChanging(global::System.String value);
        partial void OnOrderCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> SessionCode
        {
            get
            {
                return _SessionCode;
            }
            set
            {
                OnSessionCodeChanging(value);
                ReportPropertyChanging("SessionCode");
                _SessionCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SessionCode");
                OnSessionCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _SessionCode;
        partial void OnSessionCodeChanging(Nullable<global::System.Int64> value);
        partial void OnSessionCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Applicable
        {
            get
            {
                return _Applicable;
            }
            set
            {
                OnApplicableChanging(value);
                ReportPropertyChanging("Applicable");
                _Applicable = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Applicable");
                OnApplicableChanged();
            }
        }
        private Nullable<global::System.Boolean> _Applicable;
        partial void OnApplicableChanging(Nullable<global::System.Boolean> value);
        partial void OnApplicableChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Academics", "FK_SigningHierarchy_Sessions", "Sessions")]
        public Session Session
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Session>("Academics.FK_SigningHierarchy_Sessions", "Sessions").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Session>("Academics.FK_SigningHierarchy_Sessions", "Sessions").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Session> SessionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Session>("Academics.FK_SigningHierarchy_Sessions", "Sessions");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Session>("Academics.FK_SigningHierarchy_Sessions", "Sessions", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Academics", Name="Submission")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Submission : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Submission object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Submission CreateSubmission(global::System.Int64 code)
        {
            Submission submission = new Submission();
            submission.Code = code;
            return submission;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> FacultyCode
        {
            get
            {
                return _FacultyCode;
            }
            set
            {
                OnFacultyCodeChanging(value);
                ReportPropertyChanging("FacultyCode");
                _FacultyCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FacultyCode");
                OnFacultyCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _FacultyCode;
        partial void OnFacultyCodeChanging(Nullable<global::System.Int64> value);
        partial void OnFacultyCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> DepartmentCode
        {
            get
            {
                return _DepartmentCode;
            }
            set
            {
                OnDepartmentCodeChanging(value);
                ReportPropertyChanging("DepartmentCode");
                _DepartmentCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DepartmentCode");
                OnDepartmentCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _DepartmentCode;
        partial void OnDepartmentCodeChanging(Nullable<global::System.Int64> value);
        partial void OnDepartmentCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CourseCode
        {
            get
            {
                return _CourseCode;
            }
            set
            {
                OnCourseCodeChanging(value);
                ReportPropertyChanging("CourseCode");
                _CourseCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CourseCode");
                OnCourseCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _CourseCode;
        partial void OnCourseCodeChanging(Nullable<global::System.Int64> value);
        partial void OnCourseCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ProgramCode
        {
            get
            {
                return _ProgramCode;
            }
            set
            {
                OnProgramCodeChanging(value);
                ReportPropertyChanging("ProgramCode");
                _ProgramCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ProgramCode");
                OnProgramCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _ProgramCode;
        partial void OnProgramCodeChanging(Nullable<global::System.Int64> value);
        partial void OnProgramCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> LevelCode
        {
            get
            {
                return _LevelCode;
            }
            set
            {
                OnLevelCodeChanging(value);
                ReportPropertyChanging("LevelCode");
                _LevelCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LevelCode");
                OnLevelCodeChanged();
            }
        }
        private Nullable<global::System.Int32> _LevelCode;
        partial void OnLevelCodeChanging(Nullable<global::System.Int32> value);
        partial void OnLevelCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> StudentCode
        {
            get
            {
                return _StudentCode;
            }
            set
            {
                OnStudentCodeChanging(value);
                ReportPropertyChanging("StudentCode");
                _StudentCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StudentCode");
                OnStudentCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _StudentCode;
        partial void OnStudentCodeChanging(Nullable<global::System.Int64> value);
        partial void OnStudentCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MatricNo
        {
            get
            {
                return _MatricNo;
            }
            set
            {
                OnMatricNoChanging(value);
                ReportPropertyChanging("MatricNo");
                _MatricNo = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MatricNo");
                OnMatricNoChanged();
            }
        }
        private global::System.String _MatricNo;
        partial void OnMatricNoChanging(global::System.String value);
        partial void OnMatricNoChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> SessionCode
        {
            get
            {
                return _SessionCode;
            }
            set
            {
                OnSessionCodeChanging(value);
                ReportPropertyChanging("SessionCode");
                _SessionCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SessionCode");
                OnSessionCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _SessionCode;
        partial void OnSessionCodeChanging(Nullable<global::System.Int64> value);
        partial void OnSessionCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> SemesterCode
        {
            get
            {
                return _SemesterCode;
            }
            set
            {
                OnSemesterCodeChanging(value);
                ReportPropertyChanging("SemesterCode");
                _SemesterCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SemesterCode");
                OnSemesterCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _SemesterCode;
        partial void OnSemesterCodeChanging(Nullable<global::System.Int64> value);
        partial void OnSemesterCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Submitted
        {
            get
            {
                return _Submitted;
            }
            set
            {
                OnSubmittedChanging(value);
                ReportPropertyChanging("Submitted");
                _Submitted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Submitted");
                OnSubmittedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Submitted;
        partial void OnSubmittedChanging(Nullable<global::System.Boolean> value);
        partial void OnSubmittedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScreenCode
        {
            get
            {
                return _ScreenCode;
            }
            set
            {
                OnScreenCodeChanging(value);
                ReportPropertyChanging("ScreenCode");
                _ScreenCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScreenCode");
                OnScreenCodeChanged();
            }
        }
        private global::System.String _ScreenCode;
        partial void OnScreenCodeChanging(global::System.String value);
        partial void OnScreenCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Accepted
        {
            get
            {
                return _Accepted;
            }
            set
            {
                OnAcceptedChanging(value);
                ReportPropertyChanging("Accepted");
                _Accepted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Accepted");
                OnAcceptedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Accepted;
        partial void OnAcceptedChanging(Nullable<global::System.Boolean> value);
        partial void OnAcceptedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> AcceptedOn
        {
            get
            {
                return _AcceptedOn;
            }
            set
            {
                OnAcceptedOnChanging(value);
                ReportPropertyChanging("AcceptedOn");
                _AcceptedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AcceptedOn");
                OnAcceptedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _AcceptedOn;
        partial void OnAcceptedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnAcceptedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AcceptedBy
        {
            get
            {
                return _AcceptedBy;
            }
            set
            {
                OnAcceptedByChanging(value);
                ReportPropertyChanging("AcceptedBy");
                _AcceptedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AcceptedBy");
                OnAcceptedByChanged();
            }
        }
        private global::System.String _AcceptedBy;
        partial void OnAcceptedByChanging(global::System.String value);
        partial void OnAcceptedByChanged();

        #endregion
    
    }

    #endregion
    
}
