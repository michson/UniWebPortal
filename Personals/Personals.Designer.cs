//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("Personals", "FK_BioDataReligion", "BioDatas", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Personals.BioData), "Religions", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Personals.Religion), true)]

#endregion

namespace Personals
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class PersonalEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new PersonalEntities object using the connection string found in the 'PersonalEntities' section of the application configuration file.
        /// </summary>
        public PersonalEntities() : base("name=PersonalEntities", "PersonalEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new PersonalEntities object.
        /// </summary>
        public PersonalEntities(string connectionString) : base(connectionString, "PersonalEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new PersonalEntities object.
        /// </summary>
        public PersonalEntities(EntityConnection connection) : base(connection, "PersonalEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Address> Addresses
        {
            get
            {
                if ((_Addresses == null))
                {
                    _Addresses = base.CreateObjectSet<Address>("Addresses");
                }
                return _Addresses;
            }
        }
        private ObjectSet<Address> _Addresses;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<AreasOfExpertis> AreasOfExpertises
        {
            get
            {
                if ((_AreasOfExpertises == null))
                {
                    _AreasOfExpertises = base.CreateObjectSet<AreasOfExpertis>("AreasOfExpertises");
                }
                return _AreasOfExpertises;
            }
        }
        private ObjectSet<AreasOfExpertis> _AreasOfExpertises;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<BioData> BioDatas
        {
            get
            {
                if ((_BioDatas == null))
                {
                    _BioDatas = base.CreateObjectSet<BioData>("BioDatas");
                }
                return _BioDatas;
            }
        }
        private ObjectSet<BioData> _BioDatas;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Certificate> Certificates
        {
            get
            {
                if ((_Certificates == null))
                {
                    _Certificates = base.CreateObjectSet<Certificate>("Certificates");
                }
                return _Certificates;
            }
        }
        private ObjectSet<Certificate> _Certificates;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Choice> Choices
        {
            get
            {
                if ((_Choices == null))
                {
                    _Choices = base.CreateObjectSet<Choice>("Choices");
                }
                return _Choices;
            }
        }
        private ObjectSet<Choice> _Choices;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Company> Companies
        {
            get
            {
                if ((_Companies == null))
                {
                    _Companies = base.CreateObjectSet<Company>("Companies");
                }
                return _Companies;
            }
        }
        private ObjectSet<Company> _Companies;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ComputerSkill> ComputerSkills
        {
            get
            {
                if ((_ComputerSkills == null))
                {
                    _ComputerSkills = base.CreateObjectSet<ComputerSkill>("ComputerSkills");
                }
                return _ComputerSkills;
            }
        }
        private ObjectSet<ComputerSkill> _ComputerSkills;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Declaration> Declarations
        {
            get
            {
                if ((_Declarations == null))
                {
                    _Declarations = base.CreateObjectSet<Declaration>("Declarations");
                }
                return _Declarations;
            }
        }
        private ObjectSet<Declaration> _Declarations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Email> Emails
        {
            get
            {
                if ((_Emails == null))
                {
                    _Emails = base.CreateObjectSet<Email>("Emails");
                }
                return _Emails;
            }
        }
        private ObjectSet<Email> _Emails;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Emergency> Emergencies
        {
            get
            {
                if ((_Emergencies == null))
                {
                    _Emergencies = base.CreateObjectSet<Emergency>("Emergencies");
                }
                return _Emergencies;
            }
        }
        private ObjectSet<Emergency> _Emergencies;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<EmploymentHistory> EmploymentHistories
        {
            get
            {
                if ((_EmploymentHistories == null))
                {
                    _EmploymentHistories = base.CreateObjectSet<EmploymentHistory>("EmploymentHistories");
                }
                return _EmploymentHistories;
            }
        }
        private ObjectSet<EmploymentHistory> _EmploymentHistories;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Guarantor> Guarantors
        {
            get
            {
                if ((_Guarantors == null))
                {
                    _Guarantors = base.CreateObjectSet<Guarantor>("Guarantors");
                }
                return _Guarantors;
            }
        }
        private ObjectSet<Guarantor> _Guarantors;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Guardian> Guardians
        {
            get
            {
                if ((_Guardians == null))
                {
                    _Guardians = base.CreateObjectSet<Guardian>("Guardians");
                }
                return _Guardians;
            }
        }
        private ObjectSet<Guardian> _Guardians;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Hobby> Hobbies
        {
            get
            {
                if ((_Hobbies == null))
                {
                    _Hobbies = base.CreateObjectSet<Hobby>("Hobbies");
                }
                return _Hobbies;
            }
        }
        private ObjectSet<Hobby> _Hobbies;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<JAMB> JAMBs
        {
            get
            {
                if ((_JAMBs == null))
                {
                    _JAMBs = base.CreateObjectSet<JAMB>("JAMBs");
                }
                return _JAMBs;
            }
        }
        private ObjectSet<JAMB> _JAMBs;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<LanguageSkill> LanguageSkills
        {
            get
            {
                if ((_LanguageSkills == null))
                {
                    _LanguageSkills = base.CreateObjectSet<LanguageSkill>("LanguageSkills");
                }
                return _LanguageSkills;
            }
        }
        private ObjectSet<LanguageSkill> _LanguageSkills;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<MedicalCondition> MedicalConditions
        {
            get
            {
                if ((_MedicalConditions == null))
                {
                    _MedicalConditions = base.CreateObjectSet<MedicalCondition>("MedicalConditions");
                }
                return _MedicalConditions;
            }
        }
        private ObjectSet<MedicalCondition> _MedicalConditions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<NextOfKin> NextOfKins
        {
            get
            {
                if ((_NextOfKins == null))
                {
                    _NextOfKins = base.CreateObjectSet<NextOfKin>("NextOfKins");
                }
                return _NextOfKins;
            }
        }
        private ObjectSet<NextOfKin> _NextOfKins;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<OLevel> OLevels
        {
            get
            {
                if ((_OLevels == null))
                {
                    _OLevels = base.CreateObjectSet<OLevel>("OLevels");
                }
                return _OLevels;
            }
        }
        private ObjectSet<OLevel> _OLevels;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Others> Others
        {
            get
            {
                if ((_Others == null))
                {
                    _Others = base.CreateObjectSet<Others>("Others");
                }
                return _Others;
            }
        }
        private ObjectSet<Others> _Others;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Phone> Phones
        {
            get
            {
                if ((_Phones == null))
                {
                    _Phones = base.CreateObjectSet<Phone>("Phones");
                }
                return _Phones;
            }
        }
        private ObjectSet<Phone> _Phones;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Photo> Photos
        {
            get
            {
                if ((_Photos == null))
                {
                    _Photos = base.CreateObjectSet<Photo>("Photos");
                }
                return _Photos;
            }
        }
        private ObjectSet<Photo> _Photos;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Qualification> Qualifications
        {
            get
            {
                if ((_Qualifications == null))
                {
                    _Qualifications = base.CreateObjectSet<Qualification>("Qualifications");
                }
                return _Qualifications;
            }
        }
        private ObjectSet<Qualification> _Qualifications;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Referee> Referees
        {
            get
            {
                if ((_Referees == null))
                {
                    _Referees = base.CreateObjectSet<Referee>("Referees");
                }
                return _Referees;
            }
        }
        private ObjectSet<Referee> _Referees;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Religion> Religions
        {
            get
            {
                if ((_Religions == null))
                {
                    _Religions = base.CreateObjectSet<Religion>("Religions");
                }
                return _Religions;
            }
        }
        private ObjectSet<Religion> _Religions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Sponsor> Sponsors
        {
            get
            {
                if ((_Sponsors == null))
                {
                    _Sponsors = base.CreateObjectSet<Sponsor>("Sponsors");
                }
                return _Sponsors;
            }
        }
        private ObjectSet<Sponsor> _Sponsors;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Sport> Sports
        {
            get
            {
                if ((_Sports == null))
                {
                    _Sports = base.CreateObjectSet<Sport>("Sports");
                }
                return _Sports;
            }
        }
        private ObjectSet<Sport> _Sports;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Addresses EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAddresses(Address address)
        {
            base.AddObject("Addresses", address);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the AreasOfExpertises EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAreasOfExpertises(AreasOfExpertis areasOfExpertis)
        {
            base.AddObject("AreasOfExpertises", areasOfExpertis);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the BioDatas EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToBioDatas(BioData bioData)
        {
            base.AddObject("BioDatas", bioData);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Certificates EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCertificates(Certificate certificate)
        {
            base.AddObject("Certificates", certificate);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Choices EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToChoices(Choice choice)
        {
            base.AddObject("Choices", choice);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Companies EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompanies(Company company)
        {
            base.AddObject("Companies", company);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ComputerSkills EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToComputerSkills(ComputerSkill computerSkill)
        {
            base.AddObject("ComputerSkills", computerSkill);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Declarations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDeclarations(Declaration declaration)
        {
            base.AddObject("Declarations", declaration);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Emails EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToEmails(Email email)
        {
            base.AddObject("Emails", email);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Emergencies EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToEmergencies(Emergency emergency)
        {
            base.AddObject("Emergencies", emergency);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the EmploymentHistories EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToEmploymentHistories(EmploymentHistory employmentHistory)
        {
            base.AddObject("EmploymentHistories", employmentHistory);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Guarantors EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGuarantors(Guarantor guarantor)
        {
            base.AddObject("Guarantors", guarantor);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Guardians EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGuardians(Guardian guardian)
        {
            base.AddObject("Guardians", guardian);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Hobbies EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToHobbies(Hobby hobby)
        {
            base.AddObject("Hobbies", hobby);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the JAMBs EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToJAMBs(JAMB jAMB)
        {
            base.AddObject("JAMBs", jAMB);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the LanguageSkills EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLanguageSkills(LanguageSkill languageSkill)
        {
            base.AddObject("LanguageSkills", languageSkill);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the MedicalConditions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMedicalConditions(MedicalCondition medicalCondition)
        {
            base.AddObject("MedicalConditions", medicalCondition);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the NextOfKins EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToNextOfKins(NextOfKin nextOfKin)
        {
            base.AddObject("NextOfKins", nextOfKin);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the OLevels EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToOLevels(OLevel oLevel)
        {
            base.AddObject("OLevels", oLevel);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Others EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToOthers(Others others)
        {
            base.AddObject("Others", others);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Phones EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPhones(Phone phone)
        {
            base.AddObject("Phones", phone);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Photos EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPhotos(Photo photo)
        {
            base.AddObject("Photos", photo);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Qualifications EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToQualifications(Qualification qualification)
        {
            base.AddObject("Qualifications", qualification);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Referees EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToReferees(Referee referee)
        {
            base.AddObject("Referees", referee);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Religions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToReligions(Religion religion)
        {
            base.AddObject("Religions", religion);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Sponsors EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSponsors(Sponsor sponsor)
        {
            base.AddObject("Sponsors", sponsor);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Sports EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSports(Sport sport)
        {
            base.AddObject("Sports", sport);
        }

        #endregion
        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Address> SPAddressesDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Address>("SPAddressesDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Address> SPAddressesDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Address>("SPAddressesDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Address> SPAddressesDeletePermanently(Nullable<global::System.Int32> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Address>("SPAddressesDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Address> SPAddressesDeletePermanently(Nullable<global::System.Int32> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Address>("SPAddressesDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="addressTypeCode">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="countryCode">No Metadata Documentation available.</param>
        /// <param name="stateCode">No Metadata Documentation available.</param>
        /// <param name="lgCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Address> SPAddressesInsertUpdate(Nullable<global::System.Int32> code, global::System.String addressTypeCode, global::System.String accountCode, global::System.String description, global::System.String screenCode, global::System.String countryCode, global::System.String stateCode, global::System.String lgCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter addressTypeCodeParameter;
            if (addressTypeCode != null)
            {
                addressTypeCodeParameter = new ObjectParameter("AddressTypeCode", addressTypeCode);
            }
            else
            {
                addressTypeCodeParameter = new ObjectParameter("AddressTypeCode", typeof(global::System.String));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter countryCodeParameter;
            if (countryCode != null)
            {
                countryCodeParameter = new ObjectParameter("CountryCode", countryCode);
            }
            else
            {
                countryCodeParameter = new ObjectParameter("CountryCode", typeof(global::System.String));
            }
    
            ObjectParameter stateCodeParameter;
            if (stateCode != null)
            {
                stateCodeParameter = new ObjectParameter("StateCode", stateCode);
            }
            else
            {
                stateCodeParameter = new ObjectParameter("StateCode", typeof(global::System.String));
            }
    
            ObjectParameter lgCodeParameter;
            if (lgCode != null)
            {
                lgCodeParameter = new ObjectParameter("LgCode", lgCode);
            }
            else
            {
                lgCodeParameter = new ObjectParameter("LgCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Address>("SPAddressesInsertUpdate", codeParameter, addressTypeCodeParameter, accountCodeParameter, descriptionParameter, screenCodeParameter, countryCodeParameter, stateCodeParameter, lgCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="addressTypeCode">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="countryCode">No Metadata Documentation available.</param>
        /// <param name="stateCode">No Metadata Documentation available.</param>
        /// <param name="lgCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Address> SPAddressesInsertUpdate(Nullable<global::System.Int32> code, global::System.String addressTypeCode, global::System.String accountCode, global::System.String description, global::System.String screenCode, global::System.String countryCode, global::System.String stateCode, global::System.String lgCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter addressTypeCodeParameter;
            if (addressTypeCode != null)
            {
                addressTypeCodeParameter = new ObjectParameter("AddressTypeCode", addressTypeCode);
            }
            else
            {
                addressTypeCodeParameter = new ObjectParameter("AddressTypeCode", typeof(global::System.String));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter countryCodeParameter;
            if (countryCode != null)
            {
                countryCodeParameter = new ObjectParameter("CountryCode", countryCode);
            }
            else
            {
                countryCodeParameter = new ObjectParameter("CountryCode", typeof(global::System.String));
            }
    
            ObjectParameter stateCodeParameter;
            if (stateCode != null)
            {
                stateCodeParameter = new ObjectParameter("StateCode", stateCode);
            }
            else
            {
                stateCodeParameter = new ObjectParameter("StateCode", typeof(global::System.String));
            }
    
            ObjectParameter lgCodeParameter;
            if (lgCode != null)
            {
                lgCodeParameter = new ObjectParameter("LgCode", lgCode);
            }
            else
            {
                lgCodeParameter = new ObjectParameter("LgCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Address>("SPAddressesInsertUpdate", mergeOption, codeParameter, addressTypeCodeParameter, accountCodeParameter, descriptionParameter, screenCodeParameter, countryCodeParameter, stateCodeParameter, lgCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Address> SPAddressesSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Address>("SPAddressesSelect", codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Address> SPAddressesSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Address>("SPAddressesSelect", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<AreasOfExpertis> SPAreasOfExpertisesDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<AreasOfExpertis>("SPAreasOfExpertisesDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<AreasOfExpertis> SPAreasOfExpertisesDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<AreasOfExpertis>("SPAreasOfExpertisesDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<AreasOfExpertis> SPAreasOfExpertisesDeletePermanently(Nullable<global::System.Int32> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<AreasOfExpertis>("SPAreasOfExpertisesDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<AreasOfExpertis> SPAreasOfExpertisesDeletePermanently(Nullable<global::System.Int32> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<AreasOfExpertis>("SPAreasOfExpertisesDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="jobCategoryCode">No Metadata Documentation available.</param>
        /// <param name="aOSCode">No Metadata Documentation available.</param>
        /// <param name="yearOfExperience">No Metadata Documentation available.</param>
        /// <param name="leveOfExperience">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<AreasOfExpertis> SPAreasOfExpertisesInsertUpdate(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, global::System.String jobCategoryCode, global::System.String aOSCode, global::System.String yearOfExperience, global::System.String leveOfExperience, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter jobCategoryCodeParameter;
            if (jobCategoryCode != null)
            {
                jobCategoryCodeParameter = new ObjectParameter("JobCategoryCode", jobCategoryCode);
            }
            else
            {
                jobCategoryCodeParameter = new ObjectParameter("JobCategoryCode", typeof(global::System.String));
            }
    
            ObjectParameter aOSCodeParameter;
            if (aOSCode != null)
            {
                aOSCodeParameter = new ObjectParameter("AOSCode", aOSCode);
            }
            else
            {
                aOSCodeParameter = new ObjectParameter("AOSCode", typeof(global::System.String));
            }
    
            ObjectParameter yearOfExperienceParameter;
            if (yearOfExperience != null)
            {
                yearOfExperienceParameter = new ObjectParameter("YearOfExperience", yearOfExperience);
            }
            else
            {
                yearOfExperienceParameter = new ObjectParameter("YearOfExperience", typeof(global::System.String));
            }
    
            ObjectParameter leveOfExperienceParameter;
            if (leveOfExperience != null)
            {
                leveOfExperienceParameter = new ObjectParameter("LeveOfExperience", leveOfExperience);
            }
            else
            {
                leveOfExperienceParameter = new ObjectParameter("LeveOfExperience", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<AreasOfExpertis>("SPAreasOfExpertisesInsertUpdate", codeParameter, accountCodeParameter, screenCodeParameter, jobCategoryCodeParameter, aOSCodeParameter, yearOfExperienceParameter, leveOfExperienceParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="jobCategoryCode">No Metadata Documentation available.</param>
        /// <param name="aOSCode">No Metadata Documentation available.</param>
        /// <param name="yearOfExperience">No Metadata Documentation available.</param>
        /// <param name="leveOfExperience">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<AreasOfExpertis> SPAreasOfExpertisesInsertUpdate(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, global::System.String jobCategoryCode, global::System.String aOSCode, global::System.String yearOfExperience, global::System.String leveOfExperience, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter jobCategoryCodeParameter;
            if (jobCategoryCode != null)
            {
                jobCategoryCodeParameter = new ObjectParameter("JobCategoryCode", jobCategoryCode);
            }
            else
            {
                jobCategoryCodeParameter = new ObjectParameter("JobCategoryCode", typeof(global::System.String));
            }
    
            ObjectParameter aOSCodeParameter;
            if (aOSCode != null)
            {
                aOSCodeParameter = new ObjectParameter("AOSCode", aOSCode);
            }
            else
            {
                aOSCodeParameter = new ObjectParameter("AOSCode", typeof(global::System.String));
            }
    
            ObjectParameter yearOfExperienceParameter;
            if (yearOfExperience != null)
            {
                yearOfExperienceParameter = new ObjectParameter("YearOfExperience", yearOfExperience);
            }
            else
            {
                yearOfExperienceParameter = new ObjectParameter("YearOfExperience", typeof(global::System.String));
            }
    
            ObjectParameter leveOfExperienceParameter;
            if (leveOfExperience != null)
            {
                leveOfExperienceParameter = new ObjectParameter("LeveOfExperience", leveOfExperience);
            }
            else
            {
                leveOfExperienceParameter = new ObjectParameter("LeveOfExperience", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<AreasOfExpertis>("SPAreasOfExpertisesInsertUpdate", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, jobCategoryCodeParameter, aOSCodeParameter, yearOfExperienceParameter, leveOfExperienceParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<AreasOfExpertis> SPAreasOfExpertisesSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<AreasOfExpertis>("SPAreasOfExpertisesSelect", codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<AreasOfExpertis> SPAreasOfExpertisesSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<AreasOfExpertis>("SPAreasOfExpertisesSelect", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<BioData> SPBioDatasDelete(global::System.String code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<BioData>("SPBioDatasDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<BioData> SPBioDatasDelete(global::System.String code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<BioData>("SPBioDatasDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<BioData> SPBioDatasDeletePermanently(global::System.String code)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<BioData>("SPBioDatasDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<BioData> SPBioDatasDeletePermanently(global::System.String code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<BioData>("SPBioDatasDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="surname">No Metadata Documentation available.</param>
        /// <param name="middleName">No Metadata Documentation available.</param>
        /// <param name="firstName">No Metadata Documentation available.</param>
        /// <param name="genderCode">No Metadata Documentation available.</param>
        /// <param name="civilStatus">No Metadata Documentation available.</param>
        /// <param name="dateOfBirth">No Metadata Documentation available.</param>
        /// <param name="countryCode">No Metadata Documentation available.</param>
        /// <param name="stateCode">No Metadata Documentation available.</param>
        /// <param name="lGACode">No Metadata Documentation available.</param>
        /// <param name="placeOfBirth">No Metadata Documentation available.</param>
        /// <param name="height">No Metadata Documentation available.</param>
        /// <param name="weight">No Metadata Documentation available.</param>
        /// <param name="healthStatusCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="positionInFamily">No Metadata Documentation available.</param>
        /// <param name="noOfChildren">No Metadata Documentation available.</param>
        /// <param name="ticketCode">No Metadata Documentation available.</param>
        /// <param name="pinCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<BioData> SPBioDatasInsertUpdate(global::System.String code, global::System.String surname, global::System.String middleName, global::System.String firstName, global::System.String genderCode, global::System.String civilStatus, Nullable<global::System.DateTime> dateOfBirth, global::System.String countryCode, global::System.String stateCode, global::System.String lGACode, global::System.String placeOfBirth, global::System.String height, global::System.String weight, global::System.String healthStatusCode, global::System.String screenCode, Nullable<global::System.Int32> positionInFamily, Nullable<global::System.Int32> noOfChildren, Nullable<global::System.Decimal> ticketCode, Nullable<global::System.Decimal> pinCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter surnameParameter;
            if (surname != null)
            {
                surnameParameter = new ObjectParameter("Surname", surname);
            }
            else
            {
                surnameParameter = new ObjectParameter("Surname", typeof(global::System.String));
            }
    
            ObjectParameter middleNameParameter;
            if (middleName != null)
            {
                middleNameParameter = new ObjectParameter("MiddleName", middleName);
            }
            else
            {
                middleNameParameter = new ObjectParameter("MiddleName", typeof(global::System.String));
            }
    
            ObjectParameter firstNameParameter;
            if (firstName != null)
            {
                firstNameParameter = new ObjectParameter("FirstName", firstName);
            }
            else
            {
                firstNameParameter = new ObjectParameter("FirstName", typeof(global::System.String));
            }
    
            ObjectParameter genderCodeParameter;
            if (genderCode != null)
            {
                genderCodeParameter = new ObjectParameter("GenderCode", genderCode);
            }
            else
            {
                genderCodeParameter = new ObjectParameter("GenderCode", typeof(global::System.String));
            }
    
            ObjectParameter civilStatusParameter;
            if (civilStatus != null)
            {
                civilStatusParameter = new ObjectParameter("CivilStatus", civilStatus);
            }
            else
            {
                civilStatusParameter = new ObjectParameter("CivilStatus", typeof(global::System.String));
            }
    
            ObjectParameter dateOfBirthParameter;
            if (dateOfBirth.HasValue)
            {
                dateOfBirthParameter = new ObjectParameter("DateOfBirth", dateOfBirth);
            }
            else
            {
                dateOfBirthParameter = new ObjectParameter("DateOfBirth", typeof(global::System.DateTime));
            }
    
            ObjectParameter countryCodeParameter;
            if (countryCode != null)
            {
                countryCodeParameter = new ObjectParameter("CountryCode", countryCode);
            }
            else
            {
                countryCodeParameter = new ObjectParameter("CountryCode", typeof(global::System.String));
            }
    
            ObjectParameter stateCodeParameter;
            if (stateCode != null)
            {
                stateCodeParameter = new ObjectParameter("StateCode", stateCode);
            }
            else
            {
                stateCodeParameter = new ObjectParameter("StateCode", typeof(global::System.String));
            }
    
            ObjectParameter lGACodeParameter;
            if (lGACode != null)
            {
                lGACodeParameter = new ObjectParameter("LGACode", lGACode);
            }
            else
            {
                lGACodeParameter = new ObjectParameter("LGACode", typeof(global::System.String));
            }
    
            ObjectParameter placeOfBirthParameter;
            if (placeOfBirth != null)
            {
                placeOfBirthParameter = new ObjectParameter("PlaceOfBirth", placeOfBirth);
            }
            else
            {
                placeOfBirthParameter = new ObjectParameter("PlaceOfBirth", typeof(global::System.String));
            }
    
            ObjectParameter heightParameter;
            if (height != null)
            {
                heightParameter = new ObjectParameter("Height", height);
            }
            else
            {
                heightParameter = new ObjectParameter("Height", typeof(global::System.String));
            }
    
            ObjectParameter weightParameter;
            if (weight != null)
            {
                weightParameter = new ObjectParameter("Weight", weight);
            }
            else
            {
                weightParameter = new ObjectParameter("Weight", typeof(global::System.String));
            }
    
            ObjectParameter healthStatusCodeParameter;
            if (healthStatusCode != null)
            {
                healthStatusCodeParameter = new ObjectParameter("HealthStatusCode", healthStatusCode);
            }
            else
            {
                healthStatusCodeParameter = new ObjectParameter("HealthStatusCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter positionInFamilyParameter;
            if (positionInFamily.HasValue)
            {
                positionInFamilyParameter = new ObjectParameter("PositionInFamily", positionInFamily);
            }
            else
            {
                positionInFamilyParameter = new ObjectParameter("PositionInFamily", typeof(global::System.Int32));
            }
    
            ObjectParameter noOfChildrenParameter;
            if (noOfChildren.HasValue)
            {
                noOfChildrenParameter = new ObjectParameter("NoOfChildren", noOfChildren);
            }
            else
            {
                noOfChildrenParameter = new ObjectParameter("NoOfChildren", typeof(global::System.Int32));
            }
    
            ObjectParameter ticketCodeParameter;
            if (ticketCode.HasValue)
            {
                ticketCodeParameter = new ObjectParameter("TicketCode", ticketCode);
            }
            else
            {
                ticketCodeParameter = new ObjectParameter("TicketCode", typeof(global::System.Decimal));
            }
    
            ObjectParameter pinCodeParameter;
            if (pinCode.HasValue)
            {
                pinCodeParameter = new ObjectParameter("PinCode", pinCode);
            }
            else
            {
                pinCodeParameter = new ObjectParameter("PinCode", typeof(global::System.Decimal));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<BioData>("SPBioDatasInsertUpdate", codeParameter, surnameParameter, middleNameParameter, firstNameParameter, genderCodeParameter, civilStatusParameter, dateOfBirthParameter, countryCodeParameter, stateCodeParameter, lGACodeParameter, placeOfBirthParameter, heightParameter, weightParameter, healthStatusCodeParameter, screenCodeParameter, positionInFamilyParameter, noOfChildrenParameter, ticketCodeParameter, pinCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="surname">No Metadata Documentation available.</param>
        /// <param name="middleName">No Metadata Documentation available.</param>
        /// <param name="firstName">No Metadata Documentation available.</param>
        /// <param name="genderCode">No Metadata Documentation available.</param>
        /// <param name="civilStatus">No Metadata Documentation available.</param>
        /// <param name="dateOfBirth">No Metadata Documentation available.</param>
        /// <param name="countryCode">No Metadata Documentation available.</param>
        /// <param name="stateCode">No Metadata Documentation available.</param>
        /// <param name="lGACode">No Metadata Documentation available.</param>
        /// <param name="placeOfBirth">No Metadata Documentation available.</param>
        /// <param name="height">No Metadata Documentation available.</param>
        /// <param name="weight">No Metadata Documentation available.</param>
        /// <param name="healthStatusCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="positionInFamily">No Metadata Documentation available.</param>
        /// <param name="noOfChildren">No Metadata Documentation available.</param>
        /// <param name="ticketCode">No Metadata Documentation available.</param>
        /// <param name="pinCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<BioData> SPBioDatasInsertUpdate(global::System.String code, global::System.String surname, global::System.String middleName, global::System.String firstName, global::System.String genderCode, global::System.String civilStatus, Nullable<global::System.DateTime> dateOfBirth, global::System.String countryCode, global::System.String stateCode, global::System.String lGACode, global::System.String placeOfBirth, global::System.String height, global::System.String weight, global::System.String healthStatusCode, global::System.String screenCode, Nullable<global::System.Int32> positionInFamily, Nullable<global::System.Int32> noOfChildren, Nullable<global::System.Decimal> ticketCode, Nullable<global::System.Decimal> pinCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter surnameParameter;
            if (surname != null)
            {
                surnameParameter = new ObjectParameter("Surname", surname);
            }
            else
            {
                surnameParameter = new ObjectParameter("Surname", typeof(global::System.String));
            }
    
            ObjectParameter middleNameParameter;
            if (middleName != null)
            {
                middleNameParameter = new ObjectParameter("MiddleName", middleName);
            }
            else
            {
                middleNameParameter = new ObjectParameter("MiddleName", typeof(global::System.String));
            }
    
            ObjectParameter firstNameParameter;
            if (firstName != null)
            {
                firstNameParameter = new ObjectParameter("FirstName", firstName);
            }
            else
            {
                firstNameParameter = new ObjectParameter("FirstName", typeof(global::System.String));
            }
    
            ObjectParameter genderCodeParameter;
            if (genderCode != null)
            {
                genderCodeParameter = new ObjectParameter("GenderCode", genderCode);
            }
            else
            {
                genderCodeParameter = new ObjectParameter("GenderCode", typeof(global::System.String));
            }
    
            ObjectParameter civilStatusParameter;
            if (civilStatus != null)
            {
                civilStatusParameter = new ObjectParameter("CivilStatus", civilStatus);
            }
            else
            {
                civilStatusParameter = new ObjectParameter("CivilStatus", typeof(global::System.String));
            }
    
            ObjectParameter dateOfBirthParameter;
            if (dateOfBirth.HasValue)
            {
                dateOfBirthParameter = new ObjectParameter("DateOfBirth", dateOfBirth);
            }
            else
            {
                dateOfBirthParameter = new ObjectParameter("DateOfBirth", typeof(global::System.DateTime));
            }
    
            ObjectParameter countryCodeParameter;
            if (countryCode != null)
            {
                countryCodeParameter = new ObjectParameter("CountryCode", countryCode);
            }
            else
            {
                countryCodeParameter = new ObjectParameter("CountryCode", typeof(global::System.String));
            }
    
            ObjectParameter stateCodeParameter;
            if (stateCode != null)
            {
                stateCodeParameter = new ObjectParameter("StateCode", stateCode);
            }
            else
            {
                stateCodeParameter = new ObjectParameter("StateCode", typeof(global::System.String));
            }
    
            ObjectParameter lGACodeParameter;
            if (lGACode != null)
            {
                lGACodeParameter = new ObjectParameter("LGACode", lGACode);
            }
            else
            {
                lGACodeParameter = new ObjectParameter("LGACode", typeof(global::System.String));
            }
    
            ObjectParameter placeOfBirthParameter;
            if (placeOfBirth != null)
            {
                placeOfBirthParameter = new ObjectParameter("PlaceOfBirth", placeOfBirth);
            }
            else
            {
                placeOfBirthParameter = new ObjectParameter("PlaceOfBirth", typeof(global::System.String));
            }
    
            ObjectParameter heightParameter;
            if (height != null)
            {
                heightParameter = new ObjectParameter("Height", height);
            }
            else
            {
                heightParameter = new ObjectParameter("Height", typeof(global::System.String));
            }
    
            ObjectParameter weightParameter;
            if (weight != null)
            {
                weightParameter = new ObjectParameter("Weight", weight);
            }
            else
            {
                weightParameter = new ObjectParameter("Weight", typeof(global::System.String));
            }
    
            ObjectParameter healthStatusCodeParameter;
            if (healthStatusCode != null)
            {
                healthStatusCodeParameter = new ObjectParameter("HealthStatusCode", healthStatusCode);
            }
            else
            {
                healthStatusCodeParameter = new ObjectParameter("HealthStatusCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter positionInFamilyParameter;
            if (positionInFamily.HasValue)
            {
                positionInFamilyParameter = new ObjectParameter("PositionInFamily", positionInFamily);
            }
            else
            {
                positionInFamilyParameter = new ObjectParameter("PositionInFamily", typeof(global::System.Int32));
            }
    
            ObjectParameter noOfChildrenParameter;
            if (noOfChildren.HasValue)
            {
                noOfChildrenParameter = new ObjectParameter("NoOfChildren", noOfChildren);
            }
            else
            {
                noOfChildrenParameter = new ObjectParameter("NoOfChildren", typeof(global::System.Int32));
            }
    
            ObjectParameter ticketCodeParameter;
            if (ticketCode.HasValue)
            {
                ticketCodeParameter = new ObjectParameter("TicketCode", ticketCode);
            }
            else
            {
                ticketCodeParameter = new ObjectParameter("TicketCode", typeof(global::System.Decimal));
            }
    
            ObjectParameter pinCodeParameter;
            if (pinCode.HasValue)
            {
                pinCodeParameter = new ObjectParameter("PinCode", pinCode);
            }
            else
            {
                pinCodeParameter = new ObjectParameter("PinCode", typeof(global::System.Decimal));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<BioData>("SPBioDatasInsertUpdate", mergeOption, codeParameter, surnameParameter, middleNameParameter, firstNameParameter, genderCodeParameter, civilStatusParameter, dateOfBirthParameter, countryCodeParameter, stateCodeParameter, lGACodeParameter, placeOfBirthParameter, heightParameter, weightParameter, healthStatusCodeParameter, screenCodeParameter, positionInFamilyParameter, noOfChildrenParameter, ticketCodeParameter, pinCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<BioData> SPBioDatasSelect(global::System.String code, global::System.String screenCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<BioData>("SPBioDatasSelect", codeParameter, screenCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<BioData> SPBioDatasSelect(global::System.String code, global::System.String screenCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<BioData>("SPBioDatasSelect", mergeOption, codeParameter, screenCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Certificate> SPCertificatesDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Certificate>("SPCertificatesDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Certificate> SPCertificatesDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Certificate>("SPCertificatesDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Certificate> SPCertificatesDeletePermanently(Nullable<global::System.Int32> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Certificate>("SPCertificatesDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Certificate> SPCertificatesDeletePermanently(Nullable<global::System.Int32> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Certificate>("SPCertificatesDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="awardingBody">No Metadata Documentation available.</param>
        /// <param name="yearObtained">No Metadata Documentation available.</param>
        /// <param name="title">No Metadata Documentation available.</param>
        /// <param name="certificate">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Certificate> SPCertificatesInsertUpdate(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, global::System.String awardingBody, global::System.String yearObtained, global::System.String title, global::System.String certificate, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter awardingBodyParameter;
            if (awardingBody != null)
            {
                awardingBodyParameter = new ObjectParameter("AwardingBody", awardingBody);
            }
            else
            {
                awardingBodyParameter = new ObjectParameter("AwardingBody", typeof(global::System.String));
            }
    
            ObjectParameter yearObtainedParameter;
            if (yearObtained != null)
            {
                yearObtainedParameter = new ObjectParameter("YearObtained", yearObtained);
            }
            else
            {
                yearObtainedParameter = new ObjectParameter("YearObtained", typeof(global::System.String));
            }
    
            ObjectParameter titleParameter;
            if (title != null)
            {
                titleParameter = new ObjectParameter("Title", title);
            }
            else
            {
                titleParameter = new ObjectParameter("Title", typeof(global::System.String));
            }
    
            ObjectParameter certificateParameter;
            if (certificate != null)
            {
                certificateParameter = new ObjectParameter("Certificate", certificate);
            }
            else
            {
                certificateParameter = new ObjectParameter("Certificate", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Certificate>("SPCertificatesInsertUpdate", codeParameter, accountCodeParameter, screenCodeParameter, awardingBodyParameter, yearObtainedParameter, titleParameter, certificateParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="awardingBody">No Metadata Documentation available.</param>
        /// <param name="yearObtained">No Metadata Documentation available.</param>
        /// <param name="title">No Metadata Documentation available.</param>
        /// <param name="certificate">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Certificate> SPCertificatesInsertUpdate(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, global::System.String awardingBody, global::System.String yearObtained, global::System.String title, global::System.String certificate, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter awardingBodyParameter;
            if (awardingBody != null)
            {
                awardingBodyParameter = new ObjectParameter("AwardingBody", awardingBody);
            }
            else
            {
                awardingBodyParameter = new ObjectParameter("AwardingBody", typeof(global::System.String));
            }
    
            ObjectParameter yearObtainedParameter;
            if (yearObtained != null)
            {
                yearObtainedParameter = new ObjectParameter("YearObtained", yearObtained);
            }
            else
            {
                yearObtainedParameter = new ObjectParameter("YearObtained", typeof(global::System.String));
            }
    
            ObjectParameter titleParameter;
            if (title != null)
            {
                titleParameter = new ObjectParameter("Title", title);
            }
            else
            {
                titleParameter = new ObjectParameter("Title", typeof(global::System.String));
            }
    
            ObjectParameter certificateParameter;
            if (certificate != null)
            {
                certificateParameter = new ObjectParameter("Certificate", certificate);
            }
            else
            {
                certificateParameter = new ObjectParameter("Certificate", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Certificate>("SPCertificatesInsertUpdate", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, awardingBodyParameter, yearObtainedParameter, titleParameter, certificateParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Certificate> SPCertificatesSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Certificate>("SPCertificatesSelect", codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Certificate> SPCertificatesSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Certificate>("SPCertificatesSelect", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Choice> SPChoicesDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Choice>("SPChoicesDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Choice> SPChoicesDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Choice>("SPChoicesDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Choice> SPChoicesDeletePermanently(Nullable<global::System.Int32> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Choice>("SPChoicesDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Choice> SPChoicesDeletePermanently(Nullable<global::System.Int32> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Choice>("SPChoicesDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="firstChoice">No Metadata Documentation available.</param>
        /// <param name="secondChoice">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Choice> SPChoicesInsertUpdate(Nullable<global::System.Int32> code, global::System.String firstChoice, global::System.String secondChoice, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter firstChoiceParameter;
            if (firstChoice != null)
            {
                firstChoiceParameter = new ObjectParameter("FirstChoice", firstChoice);
            }
            else
            {
                firstChoiceParameter = new ObjectParameter("FirstChoice", typeof(global::System.String));
            }
    
            ObjectParameter secondChoiceParameter;
            if (secondChoice != null)
            {
                secondChoiceParameter = new ObjectParameter("SecondChoice", secondChoice);
            }
            else
            {
                secondChoiceParameter = new ObjectParameter("SecondChoice", typeof(global::System.String));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Choice>("SPChoicesInsertUpdate", codeParameter, firstChoiceParameter, secondChoiceParameter, accountCodeParameter, screenCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="firstChoice">No Metadata Documentation available.</param>
        /// <param name="secondChoice">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Choice> SPChoicesInsertUpdate(Nullable<global::System.Int32> code, global::System.String firstChoice, global::System.String secondChoice, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter firstChoiceParameter;
            if (firstChoice != null)
            {
                firstChoiceParameter = new ObjectParameter("FirstChoice", firstChoice);
            }
            else
            {
                firstChoiceParameter = new ObjectParameter("FirstChoice", typeof(global::System.String));
            }
    
            ObjectParameter secondChoiceParameter;
            if (secondChoice != null)
            {
                secondChoiceParameter = new ObjectParameter("SecondChoice", secondChoice);
            }
            else
            {
                secondChoiceParameter = new ObjectParameter("SecondChoice", typeof(global::System.String));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Choice>("SPChoicesInsertUpdate", mergeOption, codeParameter, firstChoiceParameter, secondChoiceParameter, accountCodeParameter, screenCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Choice> SPChoicesSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Choice>("SPChoicesSelect", codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Choice> SPChoicesSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Choice>("SPChoicesSelect", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Company> SPCompaniesDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Company>("SPCompaniesDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Company> SPCompaniesDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Company>("SPCompaniesDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Company> SPCompaniesDeletePermanently(Nullable<global::System.Int32> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Company>("SPCompaniesDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Company> SPCompaniesDeletePermanently(Nullable<global::System.Int32> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Company>("SPCompaniesDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="companyName">No Metadata Documentation available.</param>
        /// <param name="contactName">No Metadata Documentation available.</param>
        /// <param name="contactTitle">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Company> SPCompaniesInsertUpdate(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, global::System.String companyName, global::System.String contactName, global::System.String contactTitle, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter companyNameParameter;
            if (companyName != null)
            {
                companyNameParameter = new ObjectParameter("CompanyName", companyName);
            }
            else
            {
                companyNameParameter = new ObjectParameter("CompanyName", typeof(global::System.String));
            }
    
            ObjectParameter contactNameParameter;
            if (contactName != null)
            {
                contactNameParameter = new ObjectParameter("ContactName", contactName);
            }
            else
            {
                contactNameParameter = new ObjectParameter("ContactName", typeof(global::System.String));
            }
    
            ObjectParameter contactTitleParameter;
            if (contactTitle != null)
            {
                contactTitleParameter = new ObjectParameter("ContactTitle", contactTitle);
            }
            else
            {
                contactTitleParameter = new ObjectParameter("ContactTitle", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Company>("SPCompaniesInsertUpdate", codeParameter, accountCodeParameter, screenCodeParameter, companyNameParameter, contactNameParameter, contactTitleParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="companyName">No Metadata Documentation available.</param>
        /// <param name="contactName">No Metadata Documentation available.</param>
        /// <param name="contactTitle">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Company> SPCompaniesInsertUpdate(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, global::System.String companyName, global::System.String contactName, global::System.String contactTitle, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter companyNameParameter;
            if (companyName != null)
            {
                companyNameParameter = new ObjectParameter("CompanyName", companyName);
            }
            else
            {
                companyNameParameter = new ObjectParameter("CompanyName", typeof(global::System.String));
            }
    
            ObjectParameter contactNameParameter;
            if (contactName != null)
            {
                contactNameParameter = new ObjectParameter("ContactName", contactName);
            }
            else
            {
                contactNameParameter = new ObjectParameter("ContactName", typeof(global::System.String));
            }
    
            ObjectParameter contactTitleParameter;
            if (contactTitle != null)
            {
                contactTitleParameter = new ObjectParameter("ContactTitle", contactTitle);
            }
            else
            {
                contactTitleParameter = new ObjectParameter("ContactTitle", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Company>("SPCompaniesInsertUpdate", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, companyNameParameter, contactNameParameter, contactTitleParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Company> SPCompaniesSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Company>("SPCompaniesSelect", codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Company> SPCompaniesSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Company>("SPCompaniesSelect", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<ComputerSkill> SPComputerSkillsDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<ComputerSkill>("SPComputerSkillsDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<ComputerSkill> SPComputerSkillsDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<ComputerSkill>("SPComputerSkillsDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<ComputerSkill> SPComputerSkillsDeletePermanently(Nullable<global::System.Int32> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<ComputerSkill>("SPComputerSkillsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<ComputerSkill> SPComputerSkillsDeletePermanently(Nullable<global::System.Int32> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<ComputerSkill>("SPComputerSkillsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="packageCode">No Metadata Documentation available.</param>
        /// <param name="levelOfKnowledgeCode">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<ComputerSkill> SPComputerSkillsInsertUpdate(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, global::System.String packageCode, global::System.String levelOfKnowledgeCode, global::System.String notes, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter packageCodeParameter;
            if (packageCode != null)
            {
                packageCodeParameter = new ObjectParameter("PackageCode", packageCode);
            }
            else
            {
                packageCodeParameter = new ObjectParameter("PackageCode", typeof(global::System.String));
            }
    
            ObjectParameter levelOfKnowledgeCodeParameter;
            if (levelOfKnowledgeCode != null)
            {
                levelOfKnowledgeCodeParameter = new ObjectParameter("LevelOfKnowledgeCode", levelOfKnowledgeCode);
            }
            else
            {
                levelOfKnowledgeCodeParameter = new ObjectParameter("LevelOfKnowledgeCode", typeof(global::System.String));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<ComputerSkill>("SPComputerSkillsInsertUpdate", codeParameter, accountCodeParameter, screenCodeParameter, packageCodeParameter, levelOfKnowledgeCodeParameter, notesParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="packageCode">No Metadata Documentation available.</param>
        /// <param name="levelOfKnowledgeCode">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<ComputerSkill> SPComputerSkillsInsertUpdate(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, global::System.String packageCode, global::System.String levelOfKnowledgeCode, global::System.String notes, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter packageCodeParameter;
            if (packageCode != null)
            {
                packageCodeParameter = new ObjectParameter("PackageCode", packageCode);
            }
            else
            {
                packageCodeParameter = new ObjectParameter("PackageCode", typeof(global::System.String));
            }
    
            ObjectParameter levelOfKnowledgeCodeParameter;
            if (levelOfKnowledgeCode != null)
            {
                levelOfKnowledgeCodeParameter = new ObjectParameter("LevelOfKnowledgeCode", levelOfKnowledgeCode);
            }
            else
            {
                levelOfKnowledgeCodeParameter = new ObjectParameter("LevelOfKnowledgeCode", typeof(global::System.String));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<ComputerSkill>("SPComputerSkillsInsertUpdate", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, packageCodeParameter, levelOfKnowledgeCodeParameter, notesParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<ComputerSkill> SPComputerSkillsSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<ComputerSkill>("SPComputerSkillsSelect", codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<ComputerSkill> SPComputerSkillsSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<ComputerSkill>("SPComputerSkillsSelect", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Declaration> SPDeclarationsDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Declaration>("SPDeclarationsDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Declaration> SPDeclarationsDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Declaration>("SPDeclarationsDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Declaration> SPDeclarationsDeletePermanently(Nullable<global::System.Int32> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Declaration>("SPDeclarationsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Declaration> SPDeclarationsDeletePermanently(Nullable<global::System.Int32> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Declaration>("SPDeclarationsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="guardianCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Declaration> SPDeclarationsInsertUpdate(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, global::System.String notes, Nullable<global::System.Int32> guardianCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter guardianCodeParameter;
            if (guardianCode.HasValue)
            {
                guardianCodeParameter = new ObjectParameter("GuardianCode", guardianCode);
            }
            else
            {
                guardianCodeParameter = new ObjectParameter("GuardianCode", typeof(global::System.Int32));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Declaration>("SPDeclarationsInsertUpdate", codeParameter, accountCodeParameter, screenCodeParameter, notesParameter, guardianCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="guardianCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Declaration> SPDeclarationsInsertUpdate(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, global::System.String notes, Nullable<global::System.Int32> guardianCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter guardianCodeParameter;
            if (guardianCode.HasValue)
            {
                guardianCodeParameter = new ObjectParameter("GuardianCode", guardianCode);
            }
            else
            {
                guardianCodeParameter = new ObjectParameter("GuardianCode", typeof(global::System.Int32));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Declaration>("SPDeclarationsInsertUpdate", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, notesParameter, guardianCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Declaration> SPDeclarationsSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Declaration>("SPDeclarationsSelect", codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Declaration> SPDeclarationsSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Declaration>("SPDeclarationsSelect", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Email> SPEmailsDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Email>("SPEmailsDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Email> SPEmailsDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Email>("SPEmailsDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Email> SPEmailsDeletePermanently(Nullable<global::System.Int32> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Email>("SPEmailsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Email> SPEmailsDeletePermanently(Nullable<global::System.Int32> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Email>("SPEmailsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="email">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Email> SPEmailsInsertUpdate(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String email, global::System.String screenCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter emailParameter;
            if (email != null)
            {
                emailParameter = new ObjectParameter("Email", email);
            }
            else
            {
                emailParameter = new ObjectParameter("Email", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Email>("SPEmailsInsertUpdate", codeParameter, accountCodeParameter, emailParameter, screenCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="email">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Email> SPEmailsInsertUpdate(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String email, global::System.String screenCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter emailParameter;
            if (email != null)
            {
                emailParameter = new ObjectParameter("Email", email);
            }
            else
            {
                emailParameter = new ObjectParameter("Email", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Email>("SPEmailsInsertUpdate", mergeOption, codeParameter, accountCodeParameter, emailParameter, screenCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Email> SPEmailsSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Email>("SPEmailsSelect", codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Email> SPEmailsSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Email>("SPEmailsSelect", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Emergency> SPEmergenciesDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Emergency>("SPEmergenciesDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Emergency> SPEmergenciesDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Emergency>("SPEmergenciesDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Emergency> SPEmergenciesDeletePermanently(Nullable<global::System.Int32> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Emergency>("SPEmergenciesDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Emergency> SPEmergenciesDeletePermanently(Nullable<global::System.Int32> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Emergency>("SPEmergenciesDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="titleCode">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Emergency> SPEmergenciesInsertUpdate(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, global::System.String titleCode, global::System.String name, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter titleCodeParameter;
            if (titleCode != null)
            {
                titleCodeParameter = new ObjectParameter("TitleCode", titleCode);
            }
            else
            {
                titleCodeParameter = new ObjectParameter("TitleCode", typeof(global::System.String));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Emergency>("SPEmergenciesInsertUpdate", codeParameter, accountCodeParameter, screenCodeParameter, titleCodeParameter, nameParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="titleCode">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Emergency> SPEmergenciesInsertUpdate(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, global::System.String titleCode, global::System.String name, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter titleCodeParameter;
            if (titleCode != null)
            {
                titleCodeParameter = new ObjectParameter("TitleCode", titleCode);
            }
            else
            {
                titleCodeParameter = new ObjectParameter("TitleCode", typeof(global::System.String));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Emergency>("SPEmergenciesInsertUpdate", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, titleCodeParameter, nameParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Emergency> SPEmergenciesSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Emergency>("SPEmergenciesSelect", codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Emergency> SPEmergenciesSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Emergency>("SPEmergenciesSelect", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<EmploymentHistory> SPEmploymentHistoriesDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<EmploymentHistory>("SPEmploymentHistoriesDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<EmploymentHistory> SPEmploymentHistoriesDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<EmploymentHistory>("SPEmploymentHistoriesDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<EmploymentHistory> SPEmploymentHistoriesDeletePermanently(Nullable<global::System.Int32> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<EmploymentHistory>("SPEmploymentHistoriesDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<EmploymentHistory> SPEmploymentHistoriesDeletePermanently(Nullable<global::System.Int32> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<EmploymentHistory>("SPEmploymentHistoriesDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="titleCode">No Metadata Documentation available.</param>
        /// <param name="jobCategoryCode">No Metadata Documentation available.</param>
        /// <param name="jobDescCode">No Metadata Documentation available.</param>
        /// <param name="levelOfXpertiseCode">No Metadata Documentation available.</param>
        /// <param name="workPercentageCode">No Metadata Documentation available.</param>
        /// <param name="fromYearCode">No Metadata Documentation available.</param>
        /// <param name="toYearCode">No Metadata Documentation available.</param>
        /// <param name="fromMonthCode">No Metadata Documentation available.</param>
        /// <param name="toMonthCode">No Metadata Documentation available.</param>
        /// <param name="fromSAS">No Metadata Documentation available.</param>
        /// <param name="fromSASCurrencyCode">No Metadata Documentation available.</param>
        /// <param name="fromSASTotals">No Metadata Documentation available.</param>
        /// <param name="fromEAS">No Metadata Documentation available.</param>
        /// <param name="fromEASCurrencyCode">No Metadata Documentation available.</param>
        /// <param name="fromEASTotals">No Metadata Documentation available.</param>
        /// <param name="supervisor">No Metadata Documentation available.</param>
        /// <param name="supervisorTitle">No Metadata Documentation available.</param>
        /// <param name="employer">No Metadata Documentation available.</param>
        /// <param name="employerAddress">No Metadata Documentation available.</param>
        /// <param name="employerBusinessNatureCode">No Metadata Documentation available.</param>
        /// <param name="employerURL">No Metadata Documentation available.</param>
        /// <param name="dutiesDescription">No Metadata Documentation available.</param>
        /// <param name="keyAchievements">No Metadata Documentation available.</param>
        /// <param name="contactRefrenceCode">No Metadata Documentation available.</param>
        /// <param name="noOfPeopleSupervised">No Metadata Documentation available.</param>
        /// <param name="reasonForLeaving">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<EmploymentHistory> SPEmploymentHistoriesInsertUpdate(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, global::System.String titleCode, global::System.String jobCategoryCode, global::System.String jobDescCode, global::System.String levelOfXpertiseCode, global::System.String workPercentageCode, global::System.String fromYearCode, global::System.String toYearCode, global::System.String fromMonthCode, global::System.String toMonthCode, global::System.String fromSAS, global::System.String fromSASCurrencyCode, Nullable<global::System.Decimal> fromSASTotals, global::System.String fromEAS, global::System.String fromEASCurrencyCode, Nullable<global::System.Decimal> fromEASTotals, global::System.String supervisor, global::System.String supervisorTitle, global::System.String employer, global::System.String employerAddress, global::System.String employerBusinessNatureCode, global::System.String employerURL, global::System.String dutiesDescription, global::System.String keyAchievements, global::System.String contactRefrenceCode, Nullable<global::System.Int32> noOfPeopleSupervised, global::System.String reasonForLeaving, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter titleCodeParameter;
            if (titleCode != null)
            {
                titleCodeParameter = new ObjectParameter("TitleCode", titleCode);
            }
            else
            {
                titleCodeParameter = new ObjectParameter("TitleCode", typeof(global::System.String));
            }
    
            ObjectParameter jobCategoryCodeParameter;
            if (jobCategoryCode != null)
            {
                jobCategoryCodeParameter = new ObjectParameter("JobCategoryCode", jobCategoryCode);
            }
            else
            {
                jobCategoryCodeParameter = new ObjectParameter("JobCategoryCode", typeof(global::System.String));
            }
    
            ObjectParameter jobDescCodeParameter;
            if (jobDescCode != null)
            {
                jobDescCodeParameter = new ObjectParameter("JobDescCode", jobDescCode);
            }
            else
            {
                jobDescCodeParameter = new ObjectParameter("JobDescCode", typeof(global::System.String));
            }
    
            ObjectParameter levelOfXpertiseCodeParameter;
            if (levelOfXpertiseCode != null)
            {
                levelOfXpertiseCodeParameter = new ObjectParameter("LevelOfXpertiseCode", levelOfXpertiseCode);
            }
            else
            {
                levelOfXpertiseCodeParameter = new ObjectParameter("LevelOfXpertiseCode", typeof(global::System.String));
            }
    
            ObjectParameter workPercentageCodeParameter;
            if (workPercentageCode != null)
            {
                workPercentageCodeParameter = new ObjectParameter("WorkPercentageCode", workPercentageCode);
            }
            else
            {
                workPercentageCodeParameter = new ObjectParameter("WorkPercentageCode", typeof(global::System.String));
            }
    
            ObjectParameter fromYearCodeParameter;
            if (fromYearCode != null)
            {
                fromYearCodeParameter = new ObjectParameter("FromYearCode", fromYearCode);
            }
            else
            {
                fromYearCodeParameter = new ObjectParameter("FromYearCode", typeof(global::System.String));
            }
    
            ObjectParameter toYearCodeParameter;
            if (toYearCode != null)
            {
                toYearCodeParameter = new ObjectParameter("ToYearCode", toYearCode);
            }
            else
            {
                toYearCodeParameter = new ObjectParameter("ToYearCode", typeof(global::System.String));
            }
    
            ObjectParameter fromMonthCodeParameter;
            if (fromMonthCode != null)
            {
                fromMonthCodeParameter = new ObjectParameter("FromMonthCode", fromMonthCode);
            }
            else
            {
                fromMonthCodeParameter = new ObjectParameter("FromMonthCode", typeof(global::System.String));
            }
    
            ObjectParameter toMonthCodeParameter;
            if (toMonthCode != null)
            {
                toMonthCodeParameter = new ObjectParameter("ToMonthCode", toMonthCode);
            }
            else
            {
                toMonthCodeParameter = new ObjectParameter("ToMonthCode", typeof(global::System.String));
            }
    
            ObjectParameter fromSASParameter;
            if (fromSAS != null)
            {
                fromSASParameter = new ObjectParameter("FromSAS", fromSAS);
            }
            else
            {
                fromSASParameter = new ObjectParameter("FromSAS", typeof(global::System.String));
            }
    
            ObjectParameter fromSASCurrencyCodeParameter;
            if (fromSASCurrencyCode != null)
            {
                fromSASCurrencyCodeParameter = new ObjectParameter("FromSASCurrencyCode", fromSASCurrencyCode);
            }
            else
            {
                fromSASCurrencyCodeParameter = new ObjectParameter("FromSASCurrencyCode", typeof(global::System.String));
            }
    
            ObjectParameter fromSASTotalsParameter;
            if (fromSASTotals.HasValue)
            {
                fromSASTotalsParameter = new ObjectParameter("FromSASTotals", fromSASTotals);
            }
            else
            {
                fromSASTotalsParameter = new ObjectParameter("FromSASTotals", typeof(global::System.Decimal));
            }
    
            ObjectParameter fromEASParameter;
            if (fromEAS != null)
            {
                fromEASParameter = new ObjectParameter("FromEAS", fromEAS);
            }
            else
            {
                fromEASParameter = new ObjectParameter("FromEAS", typeof(global::System.String));
            }
    
            ObjectParameter fromEASCurrencyCodeParameter;
            if (fromEASCurrencyCode != null)
            {
                fromEASCurrencyCodeParameter = new ObjectParameter("FromEASCurrencyCode", fromEASCurrencyCode);
            }
            else
            {
                fromEASCurrencyCodeParameter = new ObjectParameter("FromEASCurrencyCode", typeof(global::System.String));
            }
    
            ObjectParameter fromEASTotalsParameter;
            if (fromEASTotals.HasValue)
            {
                fromEASTotalsParameter = new ObjectParameter("FromEASTotals", fromEASTotals);
            }
            else
            {
                fromEASTotalsParameter = new ObjectParameter("FromEASTotals", typeof(global::System.Decimal));
            }
    
            ObjectParameter supervisorParameter;
            if (supervisor != null)
            {
                supervisorParameter = new ObjectParameter("Supervisor", supervisor);
            }
            else
            {
                supervisorParameter = new ObjectParameter("Supervisor", typeof(global::System.String));
            }
    
            ObjectParameter supervisorTitleParameter;
            if (supervisorTitle != null)
            {
                supervisorTitleParameter = new ObjectParameter("SupervisorTitle", supervisorTitle);
            }
            else
            {
                supervisorTitleParameter = new ObjectParameter("SupervisorTitle", typeof(global::System.String));
            }
    
            ObjectParameter employerParameter;
            if (employer != null)
            {
                employerParameter = new ObjectParameter("Employer", employer);
            }
            else
            {
                employerParameter = new ObjectParameter("Employer", typeof(global::System.String));
            }
    
            ObjectParameter employerAddressParameter;
            if (employerAddress != null)
            {
                employerAddressParameter = new ObjectParameter("EmployerAddress", employerAddress);
            }
            else
            {
                employerAddressParameter = new ObjectParameter("EmployerAddress", typeof(global::System.String));
            }
    
            ObjectParameter employerBusinessNatureCodeParameter;
            if (employerBusinessNatureCode != null)
            {
                employerBusinessNatureCodeParameter = new ObjectParameter("EmployerBusinessNatureCode", employerBusinessNatureCode);
            }
            else
            {
                employerBusinessNatureCodeParameter = new ObjectParameter("EmployerBusinessNatureCode", typeof(global::System.String));
            }
    
            ObjectParameter employerURLParameter;
            if (employerURL != null)
            {
                employerURLParameter = new ObjectParameter("EmployerURL", employerURL);
            }
            else
            {
                employerURLParameter = new ObjectParameter("EmployerURL", typeof(global::System.String));
            }
    
            ObjectParameter dutiesDescriptionParameter;
            if (dutiesDescription != null)
            {
                dutiesDescriptionParameter = new ObjectParameter("DutiesDescription", dutiesDescription);
            }
            else
            {
                dutiesDescriptionParameter = new ObjectParameter("DutiesDescription", typeof(global::System.String));
            }
    
            ObjectParameter keyAchievementsParameter;
            if (keyAchievements != null)
            {
                keyAchievementsParameter = new ObjectParameter("KeyAchievements", keyAchievements);
            }
            else
            {
                keyAchievementsParameter = new ObjectParameter("KeyAchievements", typeof(global::System.String));
            }
    
            ObjectParameter contactRefrenceCodeParameter;
            if (contactRefrenceCode != null)
            {
                contactRefrenceCodeParameter = new ObjectParameter("ContactRefrenceCode", contactRefrenceCode);
            }
            else
            {
                contactRefrenceCodeParameter = new ObjectParameter("ContactRefrenceCode", typeof(global::System.String));
            }
    
            ObjectParameter noOfPeopleSupervisedParameter;
            if (noOfPeopleSupervised.HasValue)
            {
                noOfPeopleSupervisedParameter = new ObjectParameter("NoOfPeopleSupervised", noOfPeopleSupervised);
            }
            else
            {
                noOfPeopleSupervisedParameter = new ObjectParameter("NoOfPeopleSupervised", typeof(global::System.Int32));
            }
    
            ObjectParameter reasonForLeavingParameter;
            if (reasonForLeaving != null)
            {
                reasonForLeavingParameter = new ObjectParameter("ReasonForLeaving", reasonForLeaving);
            }
            else
            {
                reasonForLeavingParameter = new ObjectParameter("ReasonForLeaving", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<EmploymentHistory>("SPEmploymentHistoriesInsertUpdate", codeParameter, accountCodeParameter, screenCodeParameter, titleCodeParameter, jobCategoryCodeParameter, jobDescCodeParameter, levelOfXpertiseCodeParameter, workPercentageCodeParameter, fromYearCodeParameter, toYearCodeParameter, fromMonthCodeParameter, toMonthCodeParameter, fromSASParameter, fromSASCurrencyCodeParameter, fromSASTotalsParameter, fromEASParameter, fromEASCurrencyCodeParameter, fromEASTotalsParameter, supervisorParameter, supervisorTitleParameter, employerParameter, employerAddressParameter, employerBusinessNatureCodeParameter, employerURLParameter, dutiesDescriptionParameter, keyAchievementsParameter, contactRefrenceCodeParameter, noOfPeopleSupervisedParameter, reasonForLeavingParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="titleCode">No Metadata Documentation available.</param>
        /// <param name="jobCategoryCode">No Metadata Documentation available.</param>
        /// <param name="jobDescCode">No Metadata Documentation available.</param>
        /// <param name="levelOfXpertiseCode">No Metadata Documentation available.</param>
        /// <param name="workPercentageCode">No Metadata Documentation available.</param>
        /// <param name="fromYearCode">No Metadata Documentation available.</param>
        /// <param name="toYearCode">No Metadata Documentation available.</param>
        /// <param name="fromMonthCode">No Metadata Documentation available.</param>
        /// <param name="toMonthCode">No Metadata Documentation available.</param>
        /// <param name="fromSAS">No Metadata Documentation available.</param>
        /// <param name="fromSASCurrencyCode">No Metadata Documentation available.</param>
        /// <param name="fromSASTotals">No Metadata Documentation available.</param>
        /// <param name="fromEAS">No Metadata Documentation available.</param>
        /// <param name="fromEASCurrencyCode">No Metadata Documentation available.</param>
        /// <param name="fromEASTotals">No Metadata Documentation available.</param>
        /// <param name="supervisor">No Metadata Documentation available.</param>
        /// <param name="supervisorTitle">No Metadata Documentation available.</param>
        /// <param name="employer">No Metadata Documentation available.</param>
        /// <param name="employerAddress">No Metadata Documentation available.</param>
        /// <param name="employerBusinessNatureCode">No Metadata Documentation available.</param>
        /// <param name="employerURL">No Metadata Documentation available.</param>
        /// <param name="dutiesDescription">No Metadata Documentation available.</param>
        /// <param name="keyAchievements">No Metadata Documentation available.</param>
        /// <param name="contactRefrenceCode">No Metadata Documentation available.</param>
        /// <param name="noOfPeopleSupervised">No Metadata Documentation available.</param>
        /// <param name="reasonForLeaving">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<EmploymentHistory> SPEmploymentHistoriesInsertUpdate(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, global::System.String titleCode, global::System.String jobCategoryCode, global::System.String jobDescCode, global::System.String levelOfXpertiseCode, global::System.String workPercentageCode, global::System.String fromYearCode, global::System.String toYearCode, global::System.String fromMonthCode, global::System.String toMonthCode, global::System.String fromSAS, global::System.String fromSASCurrencyCode, Nullable<global::System.Decimal> fromSASTotals, global::System.String fromEAS, global::System.String fromEASCurrencyCode, Nullable<global::System.Decimal> fromEASTotals, global::System.String supervisor, global::System.String supervisorTitle, global::System.String employer, global::System.String employerAddress, global::System.String employerBusinessNatureCode, global::System.String employerURL, global::System.String dutiesDescription, global::System.String keyAchievements, global::System.String contactRefrenceCode, Nullable<global::System.Int32> noOfPeopleSupervised, global::System.String reasonForLeaving, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter titleCodeParameter;
            if (titleCode != null)
            {
                titleCodeParameter = new ObjectParameter("TitleCode", titleCode);
            }
            else
            {
                titleCodeParameter = new ObjectParameter("TitleCode", typeof(global::System.String));
            }
    
            ObjectParameter jobCategoryCodeParameter;
            if (jobCategoryCode != null)
            {
                jobCategoryCodeParameter = new ObjectParameter("JobCategoryCode", jobCategoryCode);
            }
            else
            {
                jobCategoryCodeParameter = new ObjectParameter("JobCategoryCode", typeof(global::System.String));
            }
    
            ObjectParameter jobDescCodeParameter;
            if (jobDescCode != null)
            {
                jobDescCodeParameter = new ObjectParameter("JobDescCode", jobDescCode);
            }
            else
            {
                jobDescCodeParameter = new ObjectParameter("JobDescCode", typeof(global::System.String));
            }
    
            ObjectParameter levelOfXpertiseCodeParameter;
            if (levelOfXpertiseCode != null)
            {
                levelOfXpertiseCodeParameter = new ObjectParameter("LevelOfXpertiseCode", levelOfXpertiseCode);
            }
            else
            {
                levelOfXpertiseCodeParameter = new ObjectParameter("LevelOfXpertiseCode", typeof(global::System.String));
            }
    
            ObjectParameter workPercentageCodeParameter;
            if (workPercentageCode != null)
            {
                workPercentageCodeParameter = new ObjectParameter("WorkPercentageCode", workPercentageCode);
            }
            else
            {
                workPercentageCodeParameter = new ObjectParameter("WorkPercentageCode", typeof(global::System.String));
            }
    
            ObjectParameter fromYearCodeParameter;
            if (fromYearCode != null)
            {
                fromYearCodeParameter = new ObjectParameter("FromYearCode", fromYearCode);
            }
            else
            {
                fromYearCodeParameter = new ObjectParameter("FromYearCode", typeof(global::System.String));
            }
    
            ObjectParameter toYearCodeParameter;
            if (toYearCode != null)
            {
                toYearCodeParameter = new ObjectParameter("ToYearCode", toYearCode);
            }
            else
            {
                toYearCodeParameter = new ObjectParameter("ToYearCode", typeof(global::System.String));
            }
    
            ObjectParameter fromMonthCodeParameter;
            if (fromMonthCode != null)
            {
                fromMonthCodeParameter = new ObjectParameter("FromMonthCode", fromMonthCode);
            }
            else
            {
                fromMonthCodeParameter = new ObjectParameter("FromMonthCode", typeof(global::System.String));
            }
    
            ObjectParameter toMonthCodeParameter;
            if (toMonthCode != null)
            {
                toMonthCodeParameter = new ObjectParameter("ToMonthCode", toMonthCode);
            }
            else
            {
                toMonthCodeParameter = new ObjectParameter("ToMonthCode", typeof(global::System.String));
            }
    
            ObjectParameter fromSASParameter;
            if (fromSAS != null)
            {
                fromSASParameter = new ObjectParameter("FromSAS", fromSAS);
            }
            else
            {
                fromSASParameter = new ObjectParameter("FromSAS", typeof(global::System.String));
            }
    
            ObjectParameter fromSASCurrencyCodeParameter;
            if (fromSASCurrencyCode != null)
            {
                fromSASCurrencyCodeParameter = new ObjectParameter("FromSASCurrencyCode", fromSASCurrencyCode);
            }
            else
            {
                fromSASCurrencyCodeParameter = new ObjectParameter("FromSASCurrencyCode", typeof(global::System.String));
            }
    
            ObjectParameter fromSASTotalsParameter;
            if (fromSASTotals.HasValue)
            {
                fromSASTotalsParameter = new ObjectParameter("FromSASTotals", fromSASTotals);
            }
            else
            {
                fromSASTotalsParameter = new ObjectParameter("FromSASTotals", typeof(global::System.Decimal));
            }
    
            ObjectParameter fromEASParameter;
            if (fromEAS != null)
            {
                fromEASParameter = new ObjectParameter("FromEAS", fromEAS);
            }
            else
            {
                fromEASParameter = new ObjectParameter("FromEAS", typeof(global::System.String));
            }
    
            ObjectParameter fromEASCurrencyCodeParameter;
            if (fromEASCurrencyCode != null)
            {
                fromEASCurrencyCodeParameter = new ObjectParameter("FromEASCurrencyCode", fromEASCurrencyCode);
            }
            else
            {
                fromEASCurrencyCodeParameter = new ObjectParameter("FromEASCurrencyCode", typeof(global::System.String));
            }
    
            ObjectParameter fromEASTotalsParameter;
            if (fromEASTotals.HasValue)
            {
                fromEASTotalsParameter = new ObjectParameter("FromEASTotals", fromEASTotals);
            }
            else
            {
                fromEASTotalsParameter = new ObjectParameter("FromEASTotals", typeof(global::System.Decimal));
            }
    
            ObjectParameter supervisorParameter;
            if (supervisor != null)
            {
                supervisorParameter = new ObjectParameter("Supervisor", supervisor);
            }
            else
            {
                supervisorParameter = new ObjectParameter("Supervisor", typeof(global::System.String));
            }
    
            ObjectParameter supervisorTitleParameter;
            if (supervisorTitle != null)
            {
                supervisorTitleParameter = new ObjectParameter("SupervisorTitle", supervisorTitle);
            }
            else
            {
                supervisorTitleParameter = new ObjectParameter("SupervisorTitle", typeof(global::System.String));
            }
    
            ObjectParameter employerParameter;
            if (employer != null)
            {
                employerParameter = new ObjectParameter("Employer", employer);
            }
            else
            {
                employerParameter = new ObjectParameter("Employer", typeof(global::System.String));
            }
    
            ObjectParameter employerAddressParameter;
            if (employerAddress != null)
            {
                employerAddressParameter = new ObjectParameter("EmployerAddress", employerAddress);
            }
            else
            {
                employerAddressParameter = new ObjectParameter("EmployerAddress", typeof(global::System.String));
            }
    
            ObjectParameter employerBusinessNatureCodeParameter;
            if (employerBusinessNatureCode != null)
            {
                employerBusinessNatureCodeParameter = new ObjectParameter("EmployerBusinessNatureCode", employerBusinessNatureCode);
            }
            else
            {
                employerBusinessNatureCodeParameter = new ObjectParameter("EmployerBusinessNatureCode", typeof(global::System.String));
            }
    
            ObjectParameter employerURLParameter;
            if (employerURL != null)
            {
                employerURLParameter = new ObjectParameter("EmployerURL", employerURL);
            }
            else
            {
                employerURLParameter = new ObjectParameter("EmployerURL", typeof(global::System.String));
            }
    
            ObjectParameter dutiesDescriptionParameter;
            if (dutiesDescription != null)
            {
                dutiesDescriptionParameter = new ObjectParameter("DutiesDescription", dutiesDescription);
            }
            else
            {
                dutiesDescriptionParameter = new ObjectParameter("DutiesDescription", typeof(global::System.String));
            }
    
            ObjectParameter keyAchievementsParameter;
            if (keyAchievements != null)
            {
                keyAchievementsParameter = new ObjectParameter("KeyAchievements", keyAchievements);
            }
            else
            {
                keyAchievementsParameter = new ObjectParameter("KeyAchievements", typeof(global::System.String));
            }
    
            ObjectParameter contactRefrenceCodeParameter;
            if (contactRefrenceCode != null)
            {
                contactRefrenceCodeParameter = new ObjectParameter("ContactRefrenceCode", contactRefrenceCode);
            }
            else
            {
                contactRefrenceCodeParameter = new ObjectParameter("ContactRefrenceCode", typeof(global::System.String));
            }
    
            ObjectParameter noOfPeopleSupervisedParameter;
            if (noOfPeopleSupervised.HasValue)
            {
                noOfPeopleSupervisedParameter = new ObjectParameter("NoOfPeopleSupervised", noOfPeopleSupervised);
            }
            else
            {
                noOfPeopleSupervisedParameter = new ObjectParameter("NoOfPeopleSupervised", typeof(global::System.Int32));
            }
    
            ObjectParameter reasonForLeavingParameter;
            if (reasonForLeaving != null)
            {
                reasonForLeavingParameter = new ObjectParameter("ReasonForLeaving", reasonForLeaving);
            }
            else
            {
                reasonForLeavingParameter = new ObjectParameter("ReasonForLeaving", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<EmploymentHistory>("SPEmploymentHistoriesInsertUpdate", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, titleCodeParameter, jobCategoryCodeParameter, jobDescCodeParameter, levelOfXpertiseCodeParameter, workPercentageCodeParameter, fromYearCodeParameter, toYearCodeParameter, fromMonthCodeParameter, toMonthCodeParameter, fromSASParameter, fromSASCurrencyCodeParameter, fromSASTotalsParameter, fromEASParameter, fromEASCurrencyCodeParameter, fromEASTotalsParameter, supervisorParameter, supervisorTitleParameter, employerParameter, employerAddressParameter, employerBusinessNatureCodeParameter, employerURLParameter, dutiesDescriptionParameter, keyAchievementsParameter, contactRefrenceCodeParameter, noOfPeopleSupervisedParameter, reasonForLeavingParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<EmploymentHistory> SPEmploymentHistoriesSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<EmploymentHistory>("SPEmploymentHistoriesSelect", codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<EmploymentHistory> SPEmploymentHistoriesSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<EmploymentHistory>("SPEmploymentHistoriesSelect", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Guarantor> SPGuarantorsDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Guarantor>("SPGuarantorsDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Guarantor> SPGuarantorsDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Guarantor>("SPGuarantorsDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Guarantor> SPGuarantorsDeletePermanently(Nullable<global::System.Int32> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Guarantor>("SPGuarantorsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Guarantor> SPGuarantorsDeletePermanently(Nullable<global::System.Int32> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Guarantor>("SPGuarantorsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="titleCode">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        /// <param name="occupationCode">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="undertaking">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Guarantor> SPGuarantorsInsertUpdate(Nullable<global::System.Int32> code, global::System.String titleCode, global::System.String name, global::System.String occupationCode, global::System.String accountCode, global::System.String screenCode, global::System.String undertaking, global::System.String notes, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter titleCodeParameter;
            if (titleCode != null)
            {
                titleCodeParameter = new ObjectParameter("TitleCode", titleCode);
            }
            else
            {
                titleCodeParameter = new ObjectParameter("TitleCode", typeof(global::System.String));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter occupationCodeParameter;
            if (occupationCode != null)
            {
                occupationCodeParameter = new ObjectParameter("OccupationCode", occupationCode);
            }
            else
            {
                occupationCodeParameter = new ObjectParameter("OccupationCode", typeof(global::System.String));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter undertakingParameter;
            if (undertaking != null)
            {
                undertakingParameter = new ObjectParameter("Undertaking", undertaking);
            }
            else
            {
                undertakingParameter = new ObjectParameter("Undertaking", typeof(global::System.String));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Guarantor>("SPGuarantorsInsertUpdate", codeParameter, titleCodeParameter, nameParameter, occupationCodeParameter, accountCodeParameter, screenCodeParameter, undertakingParameter, notesParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="titleCode">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        /// <param name="occupationCode">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="undertaking">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Guarantor> SPGuarantorsInsertUpdate(Nullable<global::System.Int32> code, global::System.String titleCode, global::System.String name, global::System.String occupationCode, global::System.String accountCode, global::System.String screenCode, global::System.String undertaking, global::System.String notes, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter titleCodeParameter;
            if (titleCode != null)
            {
                titleCodeParameter = new ObjectParameter("TitleCode", titleCode);
            }
            else
            {
                titleCodeParameter = new ObjectParameter("TitleCode", typeof(global::System.String));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter occupationCodeParameter;
            if (occupationCode != null)
            {
                occupationCodeParameter = new ObjectParameter("OccupationCode", occupationCode);
            }
            else
            {
                occupationCodeParameter = new ObjectParameter("OccupationCode", typeof(global::System.String));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter undertakingParameter;
            if (undertaking != null)
            {
                undertakingParameter = new ObjectParameter("Undertaking", undertaking);
            }
            else
            {
                undertakingParameter = new ObjectParameter("Undertaking", typeof(global::System.String));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Guarantor>("SPGuarantorsInsertUpdate", mergeOption, codeParameter, titleCodeParameter, nameParameter, occupationCodeParameter, accountCodeParameter, screenCodeParameter, undertakingParameter, notesParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Guarantor> SPGuarantorsSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Guarantor>("SPGuarantorsSelect", codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Guarantor> SPGuarantorsSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Guarantor>("SPGuarantorsSelect", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Guardian> SPGuardiansDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Guardian>("SPGuardiansDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Guardian> SPGuardiansDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Guardian>("SPGuardiansDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Guardian> SPGuardiansDeletePermanently(Nullable<global::System.Int32> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Guardian>("SPGuardiansDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Guardian> SPGuardiansDeletePermanently(Nullable<global::System.Int32> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Guardian>("SPGuardiansDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="guardianCode">No Metadata Documentation available.</param>
        /// <param name="titleCode">No Metadata Documentation available.</param>
        /// <param name="guardianName">No Metadata Documentation available.</param>
        /// <param name="occupationCode">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Guardian> SPGuardiansInsertUpdate(Nullable<global::System.Int32> code, global::System.String guardianCode, global::System.String titleCode, global::System.String guardianName, global::System.String occupationCode, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter guardianCodeParameter;
            if (guardianCode != null)
            {
                guardianCodeParameter = new ObjectParameter("GuardianCode", guardianCode);
            }
            else
            {
                guardianCodeParameter = new ObjectParameter("GuardianCode", typeof(global::System.String));
            }
    
            ObjectParameter titleCodeParameter;
            if (titleCode != null)
            {
                titleCodeParameter = new ObjectParameter("TitleCode", titleCode);
            }
            else
            {
                titleCodeParameter = new ObjectParameter("TitleCode", typeof(global::System.String));
            }
    
            ObjectParameter guardianNameParameter;
            if (guardianName != null)
            {
                guardianNameParameter = new ObjectParameter("GuardianName", guardianName);
            }
            else
            {
                guardianNameParameter = new ObjectParameter("GuardianName", typeof(global::System.String));
            }
    
            ObjectParameter occupationCodeParameter;
            if (occupationCode != null)
            {
                occupationCodeParameter = new ObjectParameter("OccupationCode", occupationCode);
            }
            else
            {
                occupationCodeParameter = new ObjectParameter("OccupationCode", typeof(global::System.String));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Guardian>("SPGuardiansInsertUpdate", codeParameter, guardianCodeParameter, titleCodeParameter, guardianNameParameter, occupationCodeParameter, accountCodeParameter, screenCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="guardianCode">No Metadata Documentation available.</param>
        /// <param name="titleCode">No Metadata Documentation available.</param>
        /// <param name="guardianName">No Metadata Documentation available.</param>
        /// <param name="occupationCode">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Guardian> SPGuardiansInsertUpdate(Nullable<global::System.Int32> code, global::System.String guardianCode, global::System.String titleCode, global::System.String guardianName, global::System.String occupationCode, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter guardianCodeParameter;
            if (guardianCode != null)
            {
                guardianCodeParameter = new ObjectParameter("GuardianCode", guardianCode);
            }
            else
            {
                guardianCodeParameter = new ObjectParameter("GuardianCode", typeof(global::System.String));
            }
    
            ObjectParameter titleCodeParameter;
            if (titleCode != null)
            {
                titleCodeParameter = new ObjectParameter("TitleCode", titleCode);
            }
            else
            {
                titleCodeParameter = new ObjectParameter("TitleCode", typeof(global::System.String));
            }
    
            ObjectParameter guardianNameParameter;
            if (guardianName != null)
            {
                guardianNameParameter = new ObjectParameter("GuardianName", guardianName);
            }
            else
            {
                guardianNameParameter = new ObjectParameter("GuardianName", typeof(global::System.String));
            }
    
            ObjectParameter occupationCodeParameter;
            if (occupationCode != null)
            {
                occupationCodeParameter = new ObjectParameter("OccupationCode", occupationCode);
            }
            else
            {
                occupationCodeParameter = new ObjectParameter("OccupationCode", typeof(global::System.String));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Guardian>("SPGuardiansInsertUpdate", mergeOption, codeParameter, guardianCodeParameter, titleCodeParameter, guardianNameParameter, occupationCodeParameter, accountCodeParameter, screenCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Guardian> SPGuardiansSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Guardian>("SPGuardiansSelect", codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Guardian> SPGuardiansSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Guardian>("SPGuardiansSelect", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Hobby> SPHobbiesDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Hobby>("SPHobbiesDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Hobby> SPHobbiesDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Hobby>("SPHobbiesDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Hobby> SPHobbiesDeletePermanently(Nullable<global::System.Int32> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Hobby>("SPHobbiesDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Hobby> SPHobbiesDeletePermanently(Nullable<global::System.Int32> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Hobby>("SPHobbiesDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="hobbyCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Hobby> SPHobbiesInsertUpdate(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, global::System.String hobbyCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter hobbyCodeParameter;
            if (hobbyCode != null)
            {
                hobbyCodeParameter = new ObjectParameter("HobbyCode", hobbyCode);
            }
            else
            {
                hobbyCodeParameter = new ObjectParameter("HobbyCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Hobby>("SPHobbiesInsertUpdate", codeParameter, accountCodeParameter, screenCodeParameter, hobbyCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="hobbyCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Hobby> SPHobbiesInsertUpdate(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, global::System.String hobbyCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter hobbyCodeParameter;
            if (hobbyCode != null)
            {
                hobbyCodeParameter = new ObjectParameter("HobbyCode", hobbyCode);
            }
            else
            {
                hobbyCodeParameter = new ObjectParameter("HobbyCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Hobby>("SPHobbiesInsertUpdate", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, hobbyCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Hobby> SPHobbiesSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Hobby>("SPHobbiesSelect", codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Hobby> SPHobbiesSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Hobby>("SPHobbiesSelect", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<JAMB> SPJAMBsDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<JAMB>("SPJAMBsDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<JAMB> SPJAMBsDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<JAMB>("SPJAMBsDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<JAMB> SPJAMBsDeletePermanently(Nullable<global::System.Int32> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<JAMB>("SPJAMBsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<JAMB> SPJAMBsDeletePermanently(Nullable<global::System.Int32> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<JAMB>("SPJAMBsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="regNo">No Metadata Documentation available.</param>
        /// <param name="score">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="year">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<JAMB> SPJAMBsInsertUpdate(Nullable<global::System.Int32> code, global::System.String regNo, Nullable<global::System.Int32> score, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Int32> year, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter regNoParameter;
            if (regNo != null)
            {
                regNoParameter = new ObjectParameter("RegNo", regNo);
            }
            else
            {
                regNoParameter = new ObjectParameter("RegNo", typeof(global::System.String));
            }
    
            ObjectParameter scoreParameter;
            if (score.HasValue)
            {
                scoreParameter = new ObjectParameter("Score", score);
            }
            else
            {
                scoreParameter = new ObjectParameter("Score", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter yearParameter;
            if (year.HasValue)
            {
                yearParameter = new ObjectParameter("Year", year);
            }
            else
            {
                yearParameter = new ObjectParameter("Year", typeof(global::System.Int32));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<JAMB>("SPJAMBsInsertUpdate", codeParameter, regNoParameter, scoreParameter, accountCodeParameter, screenCodeParameter, yearParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="regNo">No Metadata Documentation available.</param>
        /// <param name="score">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="year">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<JAMB> SPJAMBsInsertUpdate(Nullable<global::System.Int32> code, global::System.String regNo, Nullable<global::System.Int32> score, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Int32> year, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter regNoParameter;
            if (regNo != null)
            {
                regNoParameter = new ObjectParameter("RegNo", regNo);
            }
            else
            {
                regNoParameter = new ObjectParameter("RegNo", typeof(global::System.String));
            }
    
            ObjectParameter scoreParameter;
            if (score.HasValue)
            {
                scoreParameter = new ObjectParameter("Score", score);
            }
            else
            {
                scoreParameter = new ObjectParameter("Score", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter yearParameter;
            if (year.HasValue)
            {
                yearParameter = new ObjectParameter("Year", year);
            }
            else
            {
                yearParameter = new ObjectParameter("Year", typeof(global::System.Int32));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<JAMB>("SPJAMBsInsertUpdate", mergeOption, codeParameter, regNoParameter, scoreParameter, accountCodeParameter, screenCodeParameter, yearParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<JAMB> SPJAMBsSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<JAMB>("SPJAMBsSelect", codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<JAMB> SPJAMBsSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<JAMB>("SPJAMBsSelect", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<LanguageSkill> SPLanguageSkillsDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<LanguageSkill>("SPLanguageSkillsDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<LanguageSkill> SPLanguageSkillsDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<LanguageSkill>("SPLanguageSkillsDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<LanguageSkill> SPLanguageSkillsDeletePermanently(Nullable<global::System.Int32> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<LanguageSkill>("SPLanguageSkillsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<LanguageSkill> SPLanguageSkillsDeletePermanently(Nullable<global::System.Int32> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<LanguageSkill>("SPLanguageSkillsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="languageCode">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="dateX">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="readingDegree">No Metadata Documentation available.</param>
        /// <param name="speakingDegree">No Metadata Documentation available.</param>
        /// <param name="writingDegree">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<LanguageSkill> SPLanguageSkillsInsertUpdate(Nullable<global::System.Int32> code, global::System.String languageCode, global::System.String accountCode, Nullable<global::System.DateTime> dateX, global::System.String screenCode, global::System.String readingDegree, global::System.String speakingDegree, global::System.String writingDegree, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter languageCodeParameter;
            if (languageCode != null)
            {
                languageCodeParameter = new ObjectParameter("LanguageCode", languageCode);
            }
            else
            {
                languageCodeParameter = new ObjectParameter("LanguageCode", typeof(global::System.String));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter dateXParameter;
            if (dateX.HasValue)
            {
                dateXParameter = new ObjectParameter("DateX", dateX);
            }
            else
            {
                dateXParameter = new ObjectParameter("DateX", typeof(global::System.DateTime));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter readingDegreeParameter;
            if (readingDegree != null)
            {
                readingDegreeParameter = new ObjectParameter("ReadingDegree", readingDegree);
            }
            else
            {
                readingDegreeParameter = new ObjectParameter("ReadingDegree", typeof(global::System.String));
            }
    
            ObjectParameter speakingDegreeParameter;
            if (speakingDegree != null)
            {
                speakingDegreeParameter = new ObjectParameter("SpeakingDegree", speakingDegree);
            }
            else
            {
                speakingDegreeParameter = new ObjectParameter("SpeakingDegree", typeof(global::System.String));
            }
    
            ObjectParameter writingDegreeParameter;
            if (writingDegree != null)
            {
                writingDegreeParameter = new ObjectParameter("WritingDegree", writingDegree);
            }
            else
            {
                writingDegreeParameter = new ObjectParameter("WritingDegree", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<LanguageSkill>("SPLanguageSkillsInsertUpdate", codeParameter, languageCodeParameter, accountCodeParameter, dateXParameter, screenCodeParameter, readingDegreeParameter, speakingDegreeParameter, writingDegreeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="languageCode">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="dateX">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="readingDegree">No Metadata Documentation available.</param>
        /// <param name="speakingDegree">No Metadata Documentation available.</param>
        /// <param name="writingDegree">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<LanguageSkill> SPLanguageSkillsInsertUpdate(Nullable<global::System.Int32> code, global::System.String languageCode, global::System.String accountCode, Nullable<global::System.DateTime> dateX, global::System.String screenCode, global::System.String readingDegree, global::System.String speakingDegree, global::System.String writingDegree, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter languageCodeParameter;
            if (languageCode != null)
            {
                languageCodeParameter = new ObjectParameter("LanguageCode", languageCode);
            }
            else
            {
                languageCodeParameter = new ObjectParameter("LanguageCode", typeof(global::System.String));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter dateXParameter;
            if (dateX.HasValue)
            {
                dateXParameter = new ObjectParameter("DateX", dateX);
            }
            else
            {
                dateXParameter = new ObjectParameter("DateX", typeof(global::System.DateTime));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter readingDegreeParameter;
            if (readingDegree != null)
            {
                readingDegreeParameter = new ObjectParameter("ReadingDegree", readingDegree);
            }
            else
            {
                readingDegreeParameter = new ObjectParameter("ReadingDegree", typeof(global::System.String));
            }
    
            ObjectParameter speakingDegreeParameter;
            if (speakingDegree != null)
            {
                speakingDegreeParameter = new ObjectParameter("SpeakingDegree", speakingDegree);
            }
            else
            {
                speakingDegreeParameter = new ObjectParameter("SpeakingDegree", typeof(global::System.String));
            }
    
            ObjectParameter writingDegreeParameter;
            if (writingDegree != null)
            {
                writingDegreeParameter = new ObjectParameter("WritingDegree", writingDegree);
            }
            else
            {
                writingDegreeParameter = new ObjectParameter("WritingDegree", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<LanguageSkill>("SPLanguageSkillsInsertUpdate", mergeOption, codeParameter, languageCodeParameter, accountCodeParameter, dateXParameter, screenCodeParameter, readingDegreeParameter, speakingDegreeParameter, writingDegreeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<LanguageSkill> SPLanguageSkillsSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<LanguageSkill>("SPLanguageSkillsSelect", codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<LanguageSkill> SPLanguageSkillsSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<LanguageSkill>("SPLanguageSkillsSelect", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<MedicalCondition> SPMedicalConditionsDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<MedicalCondition>("SPMedicalConditionsDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<MedicalCondition> SPMedicalConditionsDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<MedicalCondition>("SPMedicalConditionsDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<MedicalCondition> SPMedicalConditionsDeletePermanently(Nullable<global::System.Int32> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<MedicalCondition>("SPMedicalConditionsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<MedicalCondition> SPMedicalConditionsDeletePermanently(Nullable<global::System.Int32> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<MedicalCondition>("SPMedicalConditionsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="diseaseCode">No Metadata Documentation available.</param>
        /// <param name="conditions">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<MedicalCondition> SPMedicalConditionsInsertUpdate(Nullable<global::System.Int32> code, global::System.String diseaseCode, global::System.String conditions, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter diseaseCodeParameter;
            if (diseaseCode != null)
            {
                diseaseCodeParameter = new ObjectParameter("DiseaseCode", diseaseCode);
            }
            else
            {
                diseaseCodeParameter = new ObjectParameter("DiseaseCode", typeof(global::System.String));
            }
    
            ObjectParameter conditionsParameter;
            if (conditions != null)
            {
                conditionsParameter = new ObjectParameter("Conditions", conditions);
            }
            else
            {
                conditionsParameter = new ObjectParameter("Conditions", typeof(global::System.String));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<MedicalCondition>("SPMedicalConditionsInsertUpdate", codeParameter, diseaseCodeParameter, conditionsParameter, accountCodeParameter, screenCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="diseaseCode">No Metadata Documentation available.</param>
        /// <param name="conditions">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<MedicalCondition> SPMedicalConditionsInsertUpdate(Nullable<global::System.Int32> code, global::System.String diseaseCode, global::System.String conditions, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter diseaseCodeParameter;
            if (diseaseCode != null)
            {
                diseaseCodeParameter = new ObjectParameter("DiseaseCode", diseaseCode);
            }
            else
            {
                diseaseCodeParameter = new ObjectParameter("DiseaseCode", typeof(global::System.String));
            }
    
            ObjectParameter conditionsParameter;
            if (conditions != null)
            {
                conditionsParameter = new ObjectParameter("Conditions", conditions);
            }
            else
            {
                conditionsParameter = new ObjectParameter("Conditions", typeof(global::System.String));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<MedicalCondition>("SPMedicalConditionsInsertUpdate", mergeOption, codeParameter, diseaseCodeParameter, conditionsParameter, accountCodeParameter, screenCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<MedicalCondition> SPMedicalConditionsSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<MedicalCondition>("SPMedicalConditionsSelect", codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<MedicalCondition> SPMedicalConditionsSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<MedicalCondition>("SPMedicalConditionsSelect", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<NextOfKin> SPNextOfKinsDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<NextOfKin>("SPNextOfKinsDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<NextOfKin> SPNextOfKinsDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<NextOfKin>("SPNextOfKinsDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<NextOfKin> SPNextOfKinsDeletePermanently(Nullable<global::System.Int32> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<NextOfKin>("SPNextOfKinsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<NextOfKin> SPNextOfKinsDeletePermanently(Nullable<global::System.Int32> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<NextOfKin>("SPNextOfKinsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="relTypeCode">No Metadata Documentation available.</param>
        /// <param name="titleCode">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        /// <param name="occupationCode">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<NextOfKin> SPNextOfKinsInsertUpdate(Nullable<global::System.Int32> code, global::System.String relTypeCode, global::System.String titleCode, global::System.String name, global::System.String occupationCode, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter relTypeCodeParameter;
            if (relTypeCode != null)
            {
                relTypeCodeParameter = new ObjectParameter("RelTypeCode", relTypeCode);
            }
            else
            {
                relTypeCodeParameter = new ObjectParameter("RelTypeCode", typeof(global::System.String));
            }
    
            ObjectParameter titleCodeParameter;
            if (titleCode != null)
            {
                titleCodeParameter = new ObjectParameter("TitleCode", titleCode);
            }
            else
            {
                titleCodeParameter = new ObjectParameter("TitleCode", typeof(global::System.String));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter occupationCodeParameter;
            if (occupationCode != null)
            {
                occupationCodeParameter = new ObjectParameter("OccupationCode", occupationCode);
            }
            else
            {
                occupationCodeParameter = new ObjectParameter("OccupationCode", typeof(global::System.String));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<NextOfKin>("SPNextOfKinsInsertUpdate", codeParameter, relTypeCodeParameter, titleCodeParameter, nameParameter, occupationCodeParameter, accountCodeParameter, screenCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="relTypeCode">No Metadata Documentation available.</param>
        /// <param name="titleCode">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        /// <param name="occupationCode">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<NextOfKin> SPNextOfKinsInsertUpdate(Nullable<global::System.Int32> code, global::System.String relTypeCode, global::System.String titleCode, global::System.String name, global::System.String occupationCode, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter relTypeCodeParameter;
            if (relTypeCode != null)
            {
                relTypeCodeParameter = new ObjectParameter("RelTypeCode", relTypeCode);
            }
            else
            {
                relTypeCodeParameter = new ObjectParameter("RelTypeCode", typeof(global::System.String));
            }
    
            ObjectParameter titleCodeParameter;
            if (titleCode != null)
            {
                titleCodeParameter = new ObjectParameter("TitleCode", titleCode);
            }
            else
            {
                titleCodeParameter = new ObjectParameter("TitleCode", typeof(global::System.String));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter occupationCodeParameter;
            if (occupationCode != null)
            {
                occupationCodeParameter = new ObjectParameter("OccupationCode", occupationCode);
            }
            else
            {
                occupationCodeParameter = new ObjectParameter("OccupationCode", typeof(global::System.String));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<NextOfKin>("SPNextOfKinsInsertUpdate", mergeOption, codeParameter, relTypeCodeParameter, titleCodeParameter, nameParameter, occupationCodeParameter, accountCodeParameter, screenCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<NextOfKin> SPNextOfKinsSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<NextOfKin>("SPNextOfKinsSelect", codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<NextOfKin> SPNextOfKinsSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<NextOfKin>("SPNextOfKinsSelect", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<OLevel> SPOLevelsDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<OLevel>("SPOLevelsDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<OLevel> SPOLevelsDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<OLevel>("SPOLevelsDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<OLevel> SPOLevelsDeletePermanently(Nullable<global::System.Int32> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<OLevel>("SPOLevelsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<OLevel> SPOLevelsDeletePermanently(Nullable<global::System.Int32> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<OLevel>("SPOLevelsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="subjectCode">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="gradeCode">No Metadata Documentation available.</param>
        /// <param name="gradeDescCode">No Metadata Documentation available.</param>
        /// <param name="examTypeCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<OLevel> SPOLevelsInsertUpdate(Nullable<global::System.Int32> code, global::System.String subjectCode, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Int32> gradeCode, global::System.String gradeDescCode, global::System.String examTypeCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter subjectCodeParameter;
            if (subjectCode != null)
            {
                subjectCodeParameter = new ObjectParameter("SubjectCode", subjectCode);
            }
            else
            {
                subjectCodeParameter = new ObjectParameter("SubjectCode", typeof(global::System.String));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter gradeCodeParameter;
            if (gradeCode.HasValue)
            {
                gradeCodeParameter = new ObjectParameter("GradeCode", gradeCode);
            }
            else
            {
                gradeCodeParameter = new ObjectParameter("GradeCode", typeof(global::System.Int32));
            }
    
            ObjectParameter gradeDescCodeParameter;
            if (gradeDescCode != null)
            {
                gradeDescCodeParameter = new ObjectParameter("GradeDescCode", gradeDescCode);
            }
            else
            {
                gradeDescCodeParameter = new ObjectParameter("GradeDescCode", typeof(global::System.String));
            }
    
            ObjectParameter examTypeCodeParameter;
            if (examTypeCode != null)
            {
                examTypeCodeParameter = new ObjectParameter("ExamTypeCode", examTypeCode);
            }
            else
            {
                examTypeCodeParameter = new ObjectParameter("ExamTypeCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<OLevel>("SPOLevelsInsertUpdate", codeParameter, subjectCodeParameter, accountCodeParameter, screenCodeParameter, gradeCodeParameter, gradeDescCodeParameter, examTypeCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="subjectCode">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="gradeCode">No Metadata Documentation available.</param>
        /// <param name="gradeDescCode">No Metadata Documentation available.</param>
        /// <param name="examTypeCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<OLevel> SPOLevelsInsertUpdate(Nullable<global::System.Int32> code, global::System.String subjectCode, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Int32> gradeCode, global::System.String gradeDescCode, global::System.String examTypeCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter subjectCodeParameter;
            if (subjectCode != null)
            {
                subjectCodeParameter = new ObjectParameter("SubjectCode", subjectCode);
            }
            else
            {
                subjectCodeParameter = new ObjectParameter("SubjectCode", typeof(global::System.String));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter gradeCodeParameter;
            if (gradeCode.HasValue)
            {
                gradeCodeParameter = new ObjectParameter("GradeCode", gradeCode);
            }
            else
            {
                gradeCodeParameter = new ObjectParameter("GradeCode", typeof(global::System.Int32));
            }
    
            ObjectParameter gradeDescCodeParameter;
            if (gradeDescCode != null)
            {
                gradeDescCodeParameter = new ObjectParameter("GradeDescCode", gradeDescCode);
            }
            else
            {
                gradeDescCodeParameter = new ObjectParameter("GradeDescCode", typeof(global::System.String));
            }
    
            ObjectParameter examTypeCodeParameter;
            if (examTypeCode != null)
            {
                examTypeCodeParameter = new ObjectParameter("ExamTypeCode", examTypeCode);
            }
            else
            {
                examTypeCodeParameter = new ObjectParameter("ExamTypeCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<OLevel>("SPOLevelsInsertUpdate", mergeOption, codeParameter, subjectCodeParameter, accountCodeParameter, screenCodeParameter, gradeCodeParameter, gradeDescCodeParameter, examTypeCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<OLevel> SPOLevelsSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<OLevel>("SPOLevelsSelect", codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<OLevel> SPOLevelsSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<OLevel>("SPOLevelsSelect", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Others> SPOthersDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Others>("SPOthersDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Others> SPOthersDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Others>("SPOthersDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Others> SPOthersDeletePermanently(Nullable<global::System.Int32> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Others>("SPOthersDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Others> SPOthersDeletePermanently(Nullable<global::System.Int32> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Others>("SPOthersDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="othersCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Others> SPOthersInsertUpdate(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String notes, global::System.String screenCode, global::System.String othersCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter othersCodeParameter;
            if (othersCode != null)
            {
                othersCodeParameter = new ObjectParameter("OthersCode", othersCode);
            }
            else
            {
                othersCodeParameter = new ObjectParameter("OthersCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Others>("SPOthersInsertUpdate", codeParameter, accountCodeParameter, notesParameter, screenCodeParameter, othersCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="othersCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Others> SPOthersInsertUpdate(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String notes, global::System.String screenCode, global::System.String othersCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter othersCodeParameter;
            if (othersCode != null)
            {
                othersCodeParameter = new ObjectParameter("OthersCode", othersCode);
            }
            else
            {
                othersCodeParameter = new ObjectParameter("OthersCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Others>("SPOthersInsertUpdate", mergeOption, codeParameter, accountCodeParameter, notesParameter, screenCodeParameter, othersCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Others> SPOthersSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Others>("SPOthersSelect", codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Others> SPOthersSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Others>("SPOthersSelect", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Phone> SPPhonesDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Phone>("SPPhonesDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Phone> SPPhonesDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Phone>("SPPhonesDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Phone> SPPhonesDeletePermanently(Nullable<global::System.Int32> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Phone>("SPPhonesDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Phone> SPPhonesDeletePermanently(Nullable<global::System.Int32> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Phone>("SPPhonesDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="phoneTypeCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="postalCode">No Metadata Documentation available.</param>
        /// <param name="phoneNumber">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Phone> SPPhonesInsertUpdate(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String phoneTypeCode, global::System.String screenCode, global::System.String postalCode, global::System.String phoneNumber, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter phoneTypeCodeParameter;
            if (phoneTypeCode != null)
            {
                phoneTypeCodeParameter = new ObjectParameter("PhoneTypeCode", phoneTypeCode);
            }
            else
            {
                phoneTypeCodeParameter = new ObjectParameter("PhoneTypeCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter postalCodeParameter;
            if (postalCode != null)
            {
                postalCodeParameter = new ObjectParameter("PostalCode", postalCode);
            }
            else
            {
                postalCodeParameter = new ObjectParameter("PostalCode", typeof(global::System.String));
            }
    
            ObjectParameter phoneNumberParameter;
            if (phoneNumber != null)
            {
                phoneNumberParameter = new ObjectParameter("PhoneNumber", phoneNumber);
            }
            else
            {
                phoneNumberParameter = new ObjectParameter("PhoneNumber", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Phone>("SPPhonesInsertUpdate", codeParameter, accountCodeParameter, phoneTypeCodeParameter, screenCodeParameter, postalCodeParameter, phoneNumberParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="phoneTypeCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="postalCode">No Metadata Documentation available.</param>
        /// <param name="phoneNumber">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Phone> SPPhonesInsertUpdate(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String phoneTypeCode, global::System.String screenCode, global::System.String postalCode, global::System.String phoneNumber, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter phoneTypeCodeParameter;
            if (phoneTypeCode != null)
            {
                phoneTypeCodeParameter = new ObjectParameter("PhoneTypeCode", phoneTypeCode);
            }
            else
            {
                phoneTypeCodeParameter = new ObjectParameter("PhoneTypeCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter postalCodeParameter;
            if (postalCode != null)
            {
                postalCodeParameter = new ObjectParameter("PostalCode", postalCode);
            }
            else
            {
                postalCodeParameter = new ObjectParameter("PostalCode", typeof(global::System.String));
            }
    
            ObjectParameter phoneNumberParameter;
            if (phoneNumber != null)
            {
                phoneNumberParameter = new ObjectParameter("PhoneNumber", phoneNumber);
            }
            else
            {
                phoneNumberParameter = new ObjectParameter("PhoneNumber", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Phone>("SPPhonesInsertUpdate", mergeOption, codeParameter, accountCodeParameter, phoneTypeCodeParameter, screenCodeParameter, postalCodeParameter, phoneNumberParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Phone> SPPhonesSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Phone>("SPPhonesSelect", codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Phone> SPPhonesSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Phone>("SPPhonesSelect", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Photo> SPPhotosDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Photo>("SPPhotosDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Photo> SPPhotosDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Photo>("SPPhotosDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Photo> SPPhotosDeletePermanently(Nullable<global::System.Int32> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Photo>("SPPhotosDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Photo> SPPhotosDeletePermanently(Nullable<global::System.Int32> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Photo>("SPPhotosDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="moduleCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="imageTypeCode">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="byteThumb">No Metadata Documentation available.</param>
        /// <param name="bytePoster">No Metadata Documentation available.</param>
        /// <param name="byteFull">No Metadata Documentation available.</param>
        /// <param name="byteOriginal">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Photo> SPPhotosInsertUpdate(Nullable<global::System.Int32> code, global::System.String moduleCode, global::System.String screenCode, global::System.String imageTypeCode, global::System.String accountCode, global::System.Byte[] byteThumb, global::System.Byte[] bytePoster, global::System.Byte[] byteFull, global::System.Byte[] byteOriginal, global::System.String notes, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter moduleCodeParameter;
            if (moduleCode != null)
            {
                moduleCodeParameter = new ObjectParameter("ModuleCode", moduleCode);
            }
            else
            {
                moduleCodeParameter = new ObjectParameter("ModuleCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter imageTypeCodeParameter;
            if (imageTypeCode != null)
            {
                imageTypeCodeParameter = new ObjectParameter("ImageTypeCode", imageTypeCode);
            }
            else
            {
                imageTypeCodeParameter = new ObjectParameter("ImageTypeCode", typeof(global::System.String));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter byteThumbParameter;
            if (byteThumb != null)
            {
                byteThumbParameter = new ObjectParameter("ByteThumb", byteThumb);
            }
            else
            {
                byteThumbParameter = new ObjectParameter("ByteThumb", typeof(global::System.Byte[]));
            }
    
            ObjectParameter bytePosterParameter;
            if (bytePoster != null)
            {
                bytePosterParameter = new ObjectParameter("BytePoster", bytePoster);
            }
            else
            {
                bytePosterParameter = new ObjectParameter("BytePoster", typeof(global::System.Byte[]));
            }
    
            ObjectParameter byteFullParameter;
            if (byteFull != null)
            {
                byteFullParameter = new ObjectParameter("ByteFull", byteFull);
            }
            else
            {
                byteFullParameter = new ObjectParameter("ByteFull", typeof(global::System.Byte[]));
            }
    
            ObjectParameter byteOriginalParameter;
            if (byteOriginal != null)
            {
                byteOriginalParameter = new ObjectParameter("ByteOriginal", byteOriginal);
            }
            else
            {
                byteOriginalParameter = new ObjectParameter("ByteOriginal", typeof(global::System.Byte[]));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Photo>("SPPhotosInsertUpdate", codeParameter, moduleCodeParameter, screenCodeParameter, imageTypeCodeParameter, accountCodeParameter, byteThumbParameter, bytePosterParameter, byteFullParameter, byteOriginalParameter, notesParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="moduleCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="imageTypeCode">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="byteThumb">No Metadata Documentation available.</param>
        /// <param name="bytePoster">No Metadata Documentation available.</param>
        /// <param name="byteFull">No Metadata Documentation available.</param>
        /// <param name="byteOriginal">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Photo> SPPhotosInsertUpdate(Nullable<global::System.Int32> code, global::System.String moduleCode, global::System.String screenCode, global::System.String imageTypeCode, global::System.String accountCode, global::System.Byte[] byteThumb, global::System.Byte[] bytePoster, global::System.Byte[] byteFull, global::System.Byte[] byteOriginal, global::System.String notes, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter moduleCodeParameter;
            if (moduleCode != null)
            {
                moduleCodeParameter = new ObjectParameter("ModuleCode", moduleCode);
            }
            else
            {
                moduleCodeParameter = new ObjectParameter("ModuleCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter imageTypeCodeParameter;
            if (imageTypeCode != null)
            {
                imageTypeCodeParameter = new ObjectParameter("ImageTypeCode", imageTypeCode);
            }
            else
            {
                imageTypeCodeParameter = new ObjectParameter("ImageTypeCode", typeof(global::System.String));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter byteThumbParameter;
            if (byteThumb != null)
            {
                byteThumbParameter = new ObjectParameter("ByteThumb", byteThumb);
            }
            else
            {
                byteThumbParameter = new ObjectParameter("ByteThumb", typeof(global::System.Byte[]));
            }
    
            ObjectParameter bytePosterParameter;
            if (bytePoster != null)
            {
                bytePosterParameter = new ObjectParameter("BytePoster", bytePoster);
            }
            else
            {
                bytePosterParameter = new ObjectParameter("BytePoster", typeof(global::System.Byte[]));
            }
    
            ObjectParameter byteFullParameter;
            if (byteFull != null)
            {
                byteFullParameter = new ObjectParameter("ByteFull", byteFull);
            }
            else
            {
                byteFullParameter = new ObjectParameter("ByteFull", typeof(global::System.Byte[]));
            }
    
            ObjectParameter byteOriginalParameter;
            if (byteOriginal != null)
            {
                byteOriginalParameter = new ObjectParameter("ByteOriginal", byteOriginal);
            }
            else
            {
                byteOriginalParameter = new ObjectParameter("ByteOriginal", typeof(global::System.Byte[]));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Photo>("SPPhotosInsertUpdate", mergeOption, codeParameter, moduleCodeParameter, screenCodeParameter, imageTypeCodeParameter, accountCodeParameter, byteThumbParameter, bytePosterParameter, byteFullParameter, byteOriginalParameter, notesParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Photo> SPPhotosSelect(Nullable<global::System.Int32> code, global::System.String screenCode, global::System.String accountCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Photo>("SPPhotosSelect", codeParameter, screenCodeParameter, accountCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Photo> SPPhotosSelect(Nullable<global::System.Int32> code, global::System.String screenCode, global::System.String accountCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Photo>("SPPhotosSelect", mergeOption, codeParameter, screenCodeParameter, accountCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Qualification> SPQualificationsDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Qualification>("SPQualificationsDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Qualification> SPQualificationsDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Qualification>("SPQualificationsDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Qualification> SPQualificationsDeletePermanently(Nullable<global::System.Int32> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Qualification>("SPQualificationsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Qualification> SPQualificationsDeletePermanently(Nullable<global::System.Int32> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Qualification>("SPQualificationsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="educationTypeCode">No Metadata Documentation available.</param>
        /// <param name="qualificationTypeCode">No Metadata Documentation available.</param>
        /// <param name="fromYear">No Metadata Documentation available.</param>
        /// <param name="toYear">No Metadata Documentation available.</param>
        /// <param name="fromMonth">No Metadata Documentation available.</param>
        /// <param name="toMonth">No Metadata Documentation available.</param>
        /// <param name="awardingBody">No Metadata Documentation available.</param>
        /// <param name="certificate">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Qualification> SPQualificationsInsertUpdate(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, global::System.String educationTypeCode, global::System.String qualificationTypeCode, global::System.String fromYear, global::System.String toYear, global::System.String fromMonth, global::System.String toMonth, global::System.String awardingBody, global::System.String certificate, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter educationTypeCodeParameter;
            if (educationTypeCode != null)
            {
                educationTypeCodeParameter = new ObjectParameter("EducationTypeCode", educationTypeCode);
            }
            else
            {
                educationTypeCodeParameter = new ObjectParameter("EducationTypeCode", typeof(global::System.String));
            }
    
            ObjectParameter qualificationTypeCodeParameter;
            if (qualificationTypeCode != null)
            {
                qualificationTypeCodeParameter = new ObjectParameter("QualificationTypeCode", qualificationTypeCode);
            }
            else
            {
                qualificationTypeCodeParameter = new ObjectParameter("QualificationTypeCode", typeof(global::System.String));
            }
    
            ObjectParameter fromYearParameter;
            if (fromYear != null)
            {
                fromYearParameter = new ObjectParameter("FromYear", fromYear);
            }
            else
            {
                fromYearParameter = new ObjectParameter("FromYear", typeof(global::System.String));
            }
    
            ObjectParameter toYearParameter;
            if (toYear != null)
            {
                toYearParameter = new ObjectParameter("ToYear", toYear);
            }
            else
            {
                toYearParameter = new ObjectParameter("ToYear", typeof(global::System.String));
            }
    
            ObjectParameter fromMonthParameter;
            if (fromMonth != null)
            {
                fromMonthParameter = new ObjectParameter("FromMonth", fromMonth);
            }
            else
            {
                fromMonthParameter = new ObjectParameter("FromMonth", typeof(global::System.String));
            }
    
            ObjectParameter toMonthParameter;
            if (toMonth != null)
            {
                toMonthParameter = new ObjectParameter("ToMonth", toMonth);
            }
            else
            {
                toMonthParameter = new ObjectParameter("ToMonth", typeof(global::System.String));
            }
    
            ObjectParameter awardingBodyParameter;
            if (awardingBody != null)
            {
                awardingBodyParameter = new ObjectParameter("AwardingBody", awardingBody);
            }
            else
            {
                awardingBodyParameter = new ObjectParameter("AwardingBody", typeof(global::System.String));
            }
    
            ObjectParameter certificateParameter;
            if (certificate != null)
            {
                certificateParameter = new ObjectParameter("Certificate", certificate);
            }
            else
            {
                certificateParameter = new ObjectParameter("Certificate", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Qualification>("SPQualificationsInsertUpdate", codeParameter, accountCodeParameter, screenCodeParameter, educationTypeCodeParameter, qualificationTypeCodeParameter, fromYearParameter, toYearParameter, fromMonthParameter, toMonthParameter, awardingBodyParameter, certificateParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="educationTypeCode">No Metadata Documentation available.</param>
        /// <param name="qualificationTypeCode">No Metadata Documentation available.</param>
        /// <param name="fromYear">No Metadata Documentation available.</param>
        /// <param name="toYear">No Metadata Documentation available.</param>
        /// <param name="fromMonth">No Metadata Documentation available.</param>
        /// <param name="toMonth">No Metadata Documentation available.</param>
        /// <param name="awardingBody">No Metadata Documentation available.</param>
        /// <param name="certificate">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Qualification> SPQualificationsInsertUpdate(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, global::System.String educationTypeCode, global::System.String qualificationTypeCode, global::System.String fromYear, global::System.String toYear, global::System.String fromMonth, global::System.String toMonth, global::System.String awardingBody, global::System.String certificate, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter educationTypeCodeParameter;
            if (educationTypeCode != null)
            {
                educationTypeCodeParameter = new ObjectParameter("EducationTypeCode", educationTypeCode);
            }
            else
            {
                educationTypeCodeParameter = new ObjectParameter("EducationTypeCode", typeof(global::System.String));
            }
    
            ObjectParameter qualificationTypeCodeParameter;
            if (qualificationTypeCode != null)
            {
                qualificationTypeCodeParameter = new ObjectParameter("QualificationTypeCode", qualificationTypeCode);
            }
            else
            {
                qualificationTypeCodeParameter = new ObjectParameter("QualificationTypeCode", typeof(global::System.String));
            }
    
            ObjectParameter fromYearParameter;
            if (fromYear != null)
            {
                fromYearParameter = new ObjectParameter("FromYear", fromYear);
            }
            else
            {
                fromYearParameter = new ObjectParameter("FromYear", typeof(global::System.String));
            }
    
            ObjectParameter toYearParameter;
            if (toYear != null)
            {
                toYearParameter = new ObjectParameter("ToYear", toYear);
            }
            else
            {
                toYearParameter = new ObjectParameter("ToYear", typeof(global::System.String));
            }
    
            ObjectParameter fromMonthParameter;
            if (fromMonth != null)
            {
                fromMonthParameter = new ObjectParameter("FromMonth", fromMonth);
            }
            else
            {
                fromMonthParameter = new ObjectParameter("FromMonth", typeof(global::System.String));
            }
    
            ObjectParameter toMonthParameter;
            if (toMonth != null)
            {
                toMonthParameter = new ObjectParameter("ToMonth", toMonth);
            }
            else
            {
                toMonthParameter = new ObjectParameter("ToMonth", typeof(global::System.String));
            }
    
            ObjectParameter awardingBodyParameter;
            if (awardingBody != null)
            {
                awardingBodyParameter = new ObjectParameter("AwardingBody", awardingBody);
            }
            else
            {
                awardingBodyParameter = new ObjectParameter("AwardingBody", typeof(global::System.String));
            }
    
            ObjectParameter certificateParameter;
            if (certificate != null)
            {
                certificateParameter = new ObjectParameter("Certificate", certificate);
            }
            else
            {
                certificateParameter = new ObjectParameter("Certificate", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Qualification>("SPQualificationsInsertUpdate", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, educationTypeCodeParameter, qualificationTypeCodeParameter, fromYearParameter, toYearParameter, fromMonthParameter, toMonthParameter, awardingBodyParameter, certificateParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Qualification> SPQualificationsSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Qualification>("SPQualificationsSelect", codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Qualification> SPQualificationsSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Qualification>("SPQualificationsSelect", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Referee> SPRefereesDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Referee>("SPRefereesDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Referee> SPRefereesDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Referee>("SPRefereesDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Referee> SPRefereesDeletePermanently(Nullable<global::System.Int32> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Referee>("SPRefereesDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Referee> SPRefereesDeletePermanently(Nullable<global::System.Int32> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Referee>("SPRefereesDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="titleCode">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        /// <param name="occupationCode">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="knowingMode">No Metadata Documentation available.</param>
        /// <param name="contactReferenceCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Referee> SPRefereesInsertUpdate(Nullable<global::System.Int32> code, global::System.String titleCode, global::System.String name, global::System.String occupationCode, global::System.String accountCode, global::System.String screenCode, global::System.String knowingMode, global::System.String contactReferenceCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter titleCodeParameter;
            if (titleCode != null)
            {
                titleCodeParameter = new ObjectParameter("TitleCode", titleCode);
            }
            else
            {
                titleCodeParameter = new ObjectParameter("TitleCode", typeof(global::System.String));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter occupationCodeParameter;
            if (occupationCode != null)
            {
                occupationCodeParameter = new ObjectParameter("OccupationCode", occupationCode);
            }
            else
            {
                occupationCodeParameter = new ObjectParameter("OccupationCode", typeof(global::System.String));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter knowingModeParameter;
            if (knowingMode != null)
            {
                knowingModeParameter = new ObjectParameter("KnowingMode", knowingMode);
            }
            else
            {
                knowingModeParameter = new ObjectParameter("KnowingMode", typeof(global::System.String));
            }
    
            ObjectParameter contactReferenceCodeParameter;
            if (contactReferenceCode != null)
            {
                contactReferenceCodeParameter = new ObjectParameter("ContactReferenceCode", contactReferenceCode);
            }
            else
            {
                contactReferenceCodeParameter = new ObjectParameter("ContactReferenceCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Referee>("SPRefereesInsertUpdate", codeParameter, titleCodeParameter, nameParameter, occupationCodeParameter, accountCodeParameter, screenCodeParameter, knowingModeParameter, contactReferenceCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="titleCode">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        /// <param name="occupationCode">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="knowingMode">No Metadata Documentation available.</param>
        /// <param name="contactReferenceCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Referee> SPRefereesInsertUpdate(Nullable<global::System.Int32> code, global::System.String titleCode, global::System.String name, global::System.String occupationCode, global::System.String accountCode, global::System.String screenCode, global::System.String knowingMode, global::System.String contactReferenceCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter titleCodeParameter;
            if (titleCode != null)
            {
                titleCodeParameter = new ObjectParameter("TitleCode", titleCode);
            }
            else
            {
                titleCodeParameter = new ObjectParameter("TitleCode", typeof(global::System.String));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("Name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("Name", typeof(global::System.String));
            }
    
            ObjectParameter occupationCodeParameter;
            if (occupationCode != null)
            {
                occupationCodeParameter = new ObjectParameter("OccupationCode", occupationCode);
            }
            else
            {
                occupationCodeParameter = new ObjectParameter("OccupationCode", typeof(global::System.String));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter knowingModeParameter;
            if (knowingMode != null)
            {
                knowingModeParameter = new ObjectParameter("KnowingMode", knowingMode);
            }
            else
            {
                knowingModeParameter = new ObjectParameter("KnowingMode", typeof(global::System.String));
            }
    
            ObjectParameter contactReferenceCodeParameter;
            if (contactReferenceCode != null)
            {
                contactReferenceCodeParameter = new ObjectParameter("ContactReferenceCode", contactReferenceCode);
            }
            else
            {
                contactReferenceCodeParameter = new ObjectParameter("ContactReferenceCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Referee>("SPRefereesInsertUpdate", mergeOption, codeParameter, titleCodeParameter, nameParameter, occupationCodeParameter, accountCodeParameter, screenCodeParameter, knowingModeParameter, contactReferenceCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Referee> SPRefereesSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Referee>("SPRefereesSelect", codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Referee> SPRefereesSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Referee>("SPRefereesSelect", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Religion> SPReligionsDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Religion>("SPReligionsDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Religion> SPReligionsDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Religion>("SPReligionsDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Religion> SPReligionsDeletePermanently(Nullable<global::System.Int32> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Religion>("SPReligionsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Religion> SPReligionsDeletePermanently(Nullable<global::System.Int32> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Religion>("SPReligionsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="bioDataCode">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="religionCode">No Metadata Documentation available.</param>
        /// <param name="clergy">No Metadata Documentation available.</param>
        /// <param name="placeOfWorship">No Metadata Documentation available.</param>
        /// <param name="placeOfWorshipAddress">No Metadata Documentation available.</param>
        /// <param name="clergyPhoneNumber">No Metadata Documentation available.</param>
        /// <param name="clergyEmail">No Metadata Documentation available.</param>
        /// <param name="placeOfWorshipPhoneNumber">No Metadata Documentation available.</param>
        /// <param name="placeOfWorshipEmail">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Religion> SPReligionsInsertUpdate(Nullable<global::System.Int32> code, global::System.String bioDataCode, global::System.String accountCode, global::System.String religionCode, global::System.String clergy, global::System.String placeOfWorship, global::System.String placeOfWorshipAddress, global::System.String clergyPhoneNumber, global::System.String clergyEmail, global::System.String placeOfWorshipPhoneNumber, global::System.String placeOfWorshipEmail, global::System.String screenCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter bioDataCodeParameter;
            if (bioDataCode != null)
            {
                bioDataCodeParameter = new ObjectParameter("BioDataCode", bioDataCode);
            }
            else
            {
                bioDataCodeParameter = new ObjectParameter("BioDataCode", typeof(global::System.String));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter religionCodeParameter;
            if (religionCode != null)
            {
                religionCodeParameter = new ObjectParameter("ReligionCode", religionCode);
            }
            else
            {
                religionCodeParameter = new ObjectParameter("ReligionCode", typeof(global::System.String));
            }
    
            ObjectParameter clergyParameter;
            if (clergy != null)
            {
                clergyParameter = new ObjectParameter("Clergy", clergy);
            }
            else
            {
                clergyParameter = new ObjectParameter("Clergy", typeof(global::System.String));
            }
    
            ObjectParameter placeOfWorshipParameter;
            if (placeOfWorship != null)
            {
                placeOfWorshipParameter = new ObjectParameter("PlaceOfWorship", placeOfWorship);
            }
            else
            {
                placeOfWorshipParameter = new ObjectParameter("PlaceOfWorship", typeof(global::System.String));
            }
    
            ObjectParameter placeOfWorshipAddressParameter;
            if (placeOfWorshipAddress != null)
            {
                placeOfWorshipAddressParameter = new ObjectParameter("PlaceOfWorshipAddress", placeOfWorshipAddress);
            }
            else
            {
                placeOfWorshipAddressParameter = new ObjectParameter("PlaceOfWorshipAddress", typeof(global::System.String));
            }
    
            ObjectParameter clergyPhoneNumberParameter;
            if (clergyPhoneNumber != null)
            {
                clergyPhoneNumberParameter = new ObjectParameter("ClergyPhoneNumber", clergyPhoneNumber);
            }
            else
            {
                clergyPhoneNumberParameter = new ObjectParameter("ClergyPhoneNumber", typeof(global::System.String));
            }
    
            ObjectParameter clergyEmailParameter;
            if (clergyEmail != null)
            {
                clergyEmailParameter = new ObjectParameter("ClergyEmail", clergyEmail);
            }
            else
            {
                clergyEmailParameter = new ObjectParameter("ClergyEmail", typeof(global::System.String));
            }
    
            ObjectParameter placeOfWorshipPhoneNumberParameter;
            if (placeOfWorshipPhoneNumber != null)
            {
                placeOfWorshipPhoneNumberParameter = new ObjectParameter("PlaceOfWorshipPhoneNumber", placeOfWorshipPhoneNumber);
            }
            else
            {
                placeOfWorshipPhoneNumberParameter = new ObjectParameter("PlaceOfWorshipPhoneNumber", typeof(global::System.String));
            }
    
            ObjectParameter placeOfWorshipEmailParameter;
            if (placeOfWorshipEmail != null)
            {
                placeOfWorshipEmailParameter = new ObjectParameter("PlaceOfWorshipEmail", placeOfWorshipEmail);
            }
            else
            {
                placeOfWorshipEmailParameter = new ObjectParameter("PlaceOfWorshipEmail", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Religion>("SPReligionsInsertUpdate", codeParameter, bioDataCodeParameter, accountCodeParameter, religionCodeParameter, clergyParameter, placeOfWorshipParameter, placeOfWorshipAddressParameter, clergyPhoneNumberParameter, clergyEmailParameter, placeOfWorshipPhoneNumberParameter, placeOfWorshipEmailParameter, screenCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="bioDataCode">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="religionCode">No Metadata Documentation available.</param>
        /// <param name="clergy">No Metadata Documentation available.</param>
        /// <param name="placeOfWorship">No Metadata Documentation available.</param>
        /// <param name="placeOfWorshipAddress">No Metadata Documentation available.</param>
        /// <param name="clergyPhoneNumber">No Metadata Documentation available.</param>
        /// <param name="clergyEmail">No Metadata Documentation available.</param>
        /// <param name="placeOfWorshipPhoneNumber">No Metadata Documentation available.</param>
        /// <param name="placeOfWorshipEmail">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Religion> SPReligionsInsertUpdate(Nullable<global::System.Int32> code, global::System.String bioDataCode, global::System.String accountCode, global::System.String religionCode, global::System.String clergy, global::System.String placeOfWorship, global::System.String placeOfWorshipAddress, global::System.String clergyPhoneNumber, global::System.String clergyEmail, global::System.String placeOfWorshipPhoneNumber, global::System.String placeOfWorshipEmail, global::System.String screenCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter bioDataCodeParameter;
            if (bioDataCode != null)
            {
                bioDataCodeParameter = new ObjectParameter("BioDataCode", bioDataCode);
            }
            else
            {
                bioDataCodeParameter = new ObjectParameter("BioDataCode", typeof(global::System.String));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter religionCodeParameter;
            if (religionCode != null)
            {
                religionCodeParameter = new ObjectParameter("ReligionCode", religionCode);
            }
            else
            {
                religionCodeParameter = new ObjectParameter("ReligionCode", typeof(global::System.String));
            }
    
            ObjectParameter clergyParameter;
            if (clergy != null)
            {
                clergyParameter = new ObjectParameter("Clergy", clergy);
            }
            else
            {
                clergyParameter = new ObjectParameter("Clergy", typeof(global::System.String));
            }
    
            ObjectParameter placeOfWorshipParameter;
            if (placeOfWorship != null)
            {
                placeOfWorshipParameter = new ObjectParameter("PlaceOfWorship", placeOfWorship);
            }
            else
            {
                placeOfWorshipParameter = new ObjectParameter("PlaceOfWorship", typeof(global::System.String));
            }
    
            ObjectParameter placeOfWorshipAddressParameter;
            if (placeOfWorshipAddress != null)
            {
                placeOfWorshipAddressParameter = new ObjectParameter("PlaceOfWorshipAddress", placeOfWorshipAddress);
            }
            else
            {
                placeOfWorshipAddressParameter = new ObjectParameter("PlaceOfWorshipAddress", typeof(global::System.String));
            }
    
            ObjectParameter clergyPhoneNumberParameter;
            if (clergyPhoneNumber != null)
            {
                clergyPhoneNumberParameter = new ObjectParameter("ClergyPhoneNumber", clergyPhoneNumber);
            }
            else
            {
                clergyPhoneNumberParameter = new ObjectParameter("ClergyPhoneNumber", typeof(global::System.String));
            }
    
            ObjectParameter clergyEmailParameter;
            if (clergyEmail != null)
            {
                clergyEmailParameter = new ObjectParameter("ClergyEmail", clergyEmail);
            }
            else
            {
                clergyEmailParameter = new ObjectParameter("ClergyEmail", typeof(global::System.String));
            }
    
            ObjectParameter placeOfWorshipPhoneNumberParameter;
            if (placeOfWorshipPhoneNumber != null)
            {
                placeOfWorshipPhoneNumberParameter = new ObjectParameter("PlaceOfWorshipPhoneNumber", placeOfWorshipPhoneNumber);
            }
            else
            {
                placeOfWorshipPhoneNumberParameter = new ObjectParameter("PlaceOfWorshipPhoneNumber", typeof(global::System.String));
            }
    
            ObjectParameter placeOfWorshipEmailParameter;
            if (placeOfWorshipEmail != null)
            {
                placeOfWorshipEmailParameter = new ObjectParameter("PlaceOfWorshipEmail", placeOfWorshipEmail);
            }
            else
            {
                placeOfWorshipEmailParameter = new ObjectParameter("PlaceOfWorshipEmail", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Religion>("SPReligionsInsertUpdate", mergeOption, codeParameter, bioDataCodeParameter, accountCodeParameter, religionCodeParameter, clergyParameter, placeOfWorshipParameter, placeOfWorshipAddressParameter, clergyPhoneNumberParameter, clergyEmailParameter, placeOfWorshipPhoneNumberParameter, placeOfWorshipEmailParameter, screenCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Religion> SPReligionsSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Religion>("SPReligionsSelect", codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Religion> SPReligionsSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Religion>("SPReligionsSelect", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Sponsor> SPSponsorsDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Sponsor>("SPSponsorsDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Sponsor> SPSponsorsDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Sponsor>("SPSponsorsDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Sponsor> SPSponsorsDeletePermanently(Nullable<global::System.Int32> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Sponsor>("SPSponsorsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Sponsor> SPSponsorsDeletePermanently(Nullable<global::System.Int32> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Sponsor>("SPSponsorsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="sponsorCode">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Sponsor> SPSponsorsInsertUpdate(Nullable<global::System.Int32> code, global::System.String sponsorCode, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter sponsorCodeParameter;
            if (sponsorCode != null)
            {
                sponsorCodeParameter = new ObjectParameter("SponsorCode", sponsorCode);
            }
            else
            {
                sponsorCodeParameter = new ObjectParameter("SponsorCode", typeof(global::System.String));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Sponsor>("SPSponsorsInsertUpdate", codeParameter, sponsorCodeParameter, accountCodeParameter, screenCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="sponsorCode">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Sponsor> SPSponsorsInsertUpdate(Nullable<global::System.Int32> code, global::System.String sponsorCode, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter sponsorCodeParameter;
            if (sponsorCode != null)
            {
                sponsorCodeParameter = new ObjectParameter("SponsorCode", sponsorCode);
            }
            else
            {
                sponsorCodeParameter = new ObjectParameter("SponsorCode", typeof(global::System.String));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Sponsor>("SPSponsorsInsertUpdate", mergeOption, codeParameter, sponsorCodeParameter, accountCodeParameter, screenCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Sponsor> SPSponsorsSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Sponsor>("SPSponsorsSelect", codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Sponsor> SPSponsorsSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Sponsor>("SPSponsorsSelect", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Sport> SPSportsDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Sport>("SPSportsDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Sport> SPSportsDelete(Nullable<global::System.Int32> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Sport>("SPSportsDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Sport> SPSportsDeletePermanently(Nullable<global::System.Int32> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Sport>("SPSportsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Sport> SPSportsDeletePermanently(Nullable<global::System.Int32> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Sport>("SPSportsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="sportCode">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Sport> SPSportsInsertUpdate(Nullable<global::System.Int32> code, global::System.String sportCode, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter sportCodeParameter;
            if (sportCode != null)
            {
                sportCodeParameter = new ObjectParameter("SportCode", sportCode);
            }
            else
            {
                sportCodeParameter = new ObjectParameter("SportCode", typeof(global::System.String));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Sport>("SPSportsInsertUpdate", codeParameter, sportCodeParameter, accountCodeParameter, screenCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="sportCode">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Sport> SPSportsInsertUpdate(Nullable<global::System.Int32> code, global::System.String sportCode, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter sportCodeParameter;
            if (sportCode != null)
            {
                sportCodeParameter = new ObjectParameter("SportCode", sportCode);
            }
            else
            {
                sportCodeParameter = new ObjectParameter("SportCode", typeof(global::System.String));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Sport>("SPSportsInsertUpdate", mergeOption, codeParameter, sportCodeParameter, accountCodeParameter, screenCodeParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Sport> SPSportsSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Sport>("SPSportsSelect", codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="screenCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Sport> SPSportsSelect(Nullable<global::System.Int32> code, global::System.String accountCode, global::System.String screenCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode != null)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.String));
            }
    
            ObjectParameter screenCodeParameter;
            if (screenCode != null)
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", screenCode);
            }
            else
            {
                screenCodeParameter = new ObjectParameter("ScreenCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Sport>("SPSportsSelect", mergeOption, codeParameter, accountCodeParameter, screenCodeParameter, deletedParameter);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Personals", Name="Address")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Address : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Address object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Address CreateAddress(global::System.Int32 code)
        {
            Address address = new Address();
            address.Code = code;
            return address;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int32 _Code;
        partial void OnCodeChanging(global::System.Int32 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AddressTypeCode
        {
            get
            {
                return _AddressTypeCode;
            }
            set
            {
                OnAddressTypeCodeChanging(value);
                ReportPropertyChanging("AddressTypeCode");
                _AddressTypeCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AddressTypeCode");
                OnAddressTypeCodeChanged();
            }
        }
        private global::System.String _AddressTypeCode;
        partial void OnAddressTypeCodeChanging(global::System.String value);
        partial void OnAddressTypeCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountCode
        {
            get
            {
                return _AccountCode;
            }
            set
            {
                OnAccountCodeChanging(value);
                ReportPropertyChanging("AccountCode");
                _AccountCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountCode");
                OnAccountCodeChanged();
            }
        }
        private global::System.String _AccountCode;
        partial void OnAccountCodeChanging(global::System.String value);
        partial void OnAccountCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScreenCode
        {
            get
            {
                return _ScreenCode;
            }
            set
            {
                OnScreenCodeChanging(value);
                ReportPropertyChanging("ScreenCode");
                _ScreenCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScreenCode");
                OnScreenCodeChanged();
            }
        }
        private global::System.String _ScreenCode;
        partial void OnScreenCodeChanging(global::System.String value);
        partial void OnScreenCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CountryCode
        {
            get
            {
                return _CountryCode;
            }
            set
            {
                OnCountryCodeChanging(value);
                ReportPropertyChanging("CountryCode");
                _CountryCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CountryCode");
                OnCountryCodeChanged();
            }
        }
        private global::System.String _CountryCode;
        partial void OnCountryCodeChanging(global::System.String value);
        partial void OnCountryCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String StateCode
        {
            get
            {
                return _StateCode;
            }
            set
            {
                OnStateCodeChanging(value);
                ReportPropertyChanging("StateCode");
                _StateCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("StateCode");
                OnStateCodeChanged();
            }
        }
        private global::System.String _StateCode;
        partial void OnStateCodeChanging(global::System.String value);
        partial void OnStateCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LgCode
        {
            get
            {
                return _LgCode;
            }
            set
            {
                OnLgCodeChanging(value);
                ReportPropertyChanging("LgCode");
                _LgCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LgCode");
                OnLgCodeChanged();
            }
        }
        private global::System.String _LgCode;
        partial void OnLgCodeChanging(global::System.String value);
        partial void OnLgCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Personals", Name="AreasOfExpertis")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class AreasOfExpertis : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new AreasOfExpertis object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static AreasOfExpertis CreateAreasOfExpertis(global::System.Int32 code)
        {
            AreasOfExpertis areasOfExpertis = new AreasOfExpertis();
            areasOfExpertis.Code = code;
            return areasOfExpertis;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int32 _Code;
        partial void OnCodeChanging(global::System.Int32 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountCode
        {
            get
            {
                return _AccountCode;
            }
            set
            {
                OnAccountCodeChanging(value);
                ReportPropertyChanging("AccountCode");
                _AccountCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountCode");
                OnAccountCodeChanged();
            }
        }
        private global::System.String _AccountCode;
        partial void OnAccountCodeChanging(global::System.String value);
        partial void OnAccountCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScreenCode
        {
            get
            {
                return _ScreenCode;
            }
            set
            {
                OnScreenCodeChanging(value);
                ReportPropertyChanging("ScreenCode");
                _ScreenCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScreenCode");
                OnScreenCodeChanged();
            }
        }
        private global::System.String _ScreenCode;
        partial void OnScreenCodeChanging(global::System.String value);
        partial void OnScreenCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String JobCategoryCode
        {
            get
            {
                return _JobCategoryCode;
            }
            set
            {
                OnJobCategoryCodeChanging(value);
                ReportPropertyChanging("JobCategoryCode");
                _JobCategoryCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("JobCategoryCode");
                OnJobCategoryCodeChanged();
            }
        }
        private global::System.String _JobCategoryCode;
        partial void OnJobCategoryCodeChanging(global::System.String value);
        partial void OnJobCategoryCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AOSCode
        {
            get
            {
                return _AOSCode;
            }
            set
            {
                OnAOSCodeChanging(value);
                ReportPropertyChanging("AOSCode");
                _AOSCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AOSCode");
                OnAOSCodeChanged();
            }
        }
        private global::System.String _AOSCode;
        partial void OnAOSCodeChanging(global::System.String value);
        partial void OnAOSCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String YearOfExperience
        {
            get
            {
                return _YearOfExperience;
            }
            set
            {
                OnYearOfExperienceChanging(value);
                ReportPropertyChanging("YearOfExperience");
                _YearOfExperience = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("YearOfExperience");
                OnYearOfExperienceChanged();
            }
        }
        private global::System.String _YearOfExperience;
        partial void OnYearOfExperienceChanging(global::System.String value);
        partial void OnYearOfExperienceChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LeveOfExperience
        {
            get
            {
                return _LeveOfExperience;
            }
            set
            {
                OnLeveOfExperienceChanging(value);
                ReportPropertyChanging("LeveOfExperience");
                _LeveOfExperience = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LeveOfExperience");
                OnLeveOfExperienceChanged();
            }
        }
        private global::System.String _LeveOfExperience;
        partial void OnLeveOfExperienceChanging(global::System.String value);
        partial void OnLeveOfExperienceChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Personals", Name="BioData")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class BioData : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new BioData object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        /// <param name="firstName">Initial value of the FirstName property.</param>
        public static BioData CreateBioData(global::System.String code, global::System.String firstName)
        {
            BioData bioData = new BioData();
            bioData.Code = code;
            bioData.FirstName = firstName;
            return bioData;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.String _Code;
        partial void OnCodeChanging(global::System.String value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Surname
        {
            get
            {
                return _Surname;
            }
            set
            {
                OnSurnameChanging(value);
                ReportPropertyChanging("Surname");
                _Surname = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Surname");
                OnSurnameChanged();
            }
        }
        private global::System.String _Surname;
        partial void OnSurnameChanging(global::System.String value);
        partial void OnSurnameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MiddleName
        {
            get
            {
                return _MiddleName;
            }
            set
            {
                OnMiddleNameChanging(value);
                ReportPropertyChanging("MiddleName");
                _MiddleName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MiddleName");
                OnMiddleNameChanged();
            }
        }
        private global::System.String _MiddleName;
        partial void OnMiddleNameChanging(global::System.String value);
        partial void OnMiddleNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                OnFirstNameChanging(value);
                ReportPropertyChanging("FirstName");
                _FirstName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FirstName");
                OnFirstNameChanged();
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String GenderCode
        {
            get
            {
                return _GenderCode;
            }
            set
            {
                OnGenderCodeChanging(value);
                ReportPropertyChanging("GenderCode");
                _GenderCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("GenderCode");
                OnGenderCodeChanged();
            }
        }
        private global::System.String _GenderCode;
        partial void OnGenderCodeChanging(global::System.String value);
        partial void OnGenderCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CivilStatus
        {
            get
            {
                return _CivilStatus;
            }
            set
            {
                OnCivilStatusChanging(value);
                ReportPropertyChanging("CivilStatus");
                _CivilStatus = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CivilStatus");
                OnCivilStatusChanged();
            }
        }
        private global::System.String _CivilStatus;
        partial void OnCivilStatusChanging(global::System.String value);
        partial void OnCivilStatusChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateOfBirth
        {
            get
            {
                return _DateOfBirth;
            }
            set
            {
                OnDateOfBirthChanging(value);
                ReportPropertyChanging("DateOfBirth");
                _DateOfBirth = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateOfBirth");
                OnDateOfBirthChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateOfBirth;
        partial void OnDateOfBirthChanging(Nullable<global::System.DateTime> value);
        partial void OnDateOfBirthChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CountryCode
        {
            get
            {
                return _CountryCode;
            }
            set
            {
                OnCountryCodeChanging(value);
                ReportPropertyChanging("CountryCode");
                _CountryCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CountryCode");
                OnCountryCodeChanged();
            }
        }
        private global::System.String _CountryCode;
        partial void OnCountryCodeChanging(global::System.String value);
        partial void OnCountryCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String StateCode
        {
            get
            {
                return _StateCode;
            }
            set
            {
                OnStateCodeChanging(value);
                ReportPropertyChanging("StateCode");
                _StateCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("StateCode");
                OnStateCodeChanged();
            }
        }
        private global::System.String _StateCode;
        partial void OnStateCodeChanging(global::System.String value);
        partial void OnStateCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LGACode
        {
            get
            {
                return _LGACode;
            }
            set
            {
                OnLGACodeChanging(value);
                ReportPropertyChanging("LGACode");
                _LGACode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LGACode");
                OnLGACodeChanged();
            }
        }
        private global::System.String _LGACode;
        partial void OnLGACodeChanging(global::System.String value);
        partial void OnLGACodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PlaceOfBirth
        {
            get
            {
                return _PlaceOfBirth;
            }
            set
            {
                OnPlaceOfBirthChanging(value);
                ReportPropertyChanging("PlaceOfBirth");
                _PlaceOfBirth = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PlaceOfBirth");
                OnPlaceOfBirthChanged();
            }
        }
        private global::System.String _PlaceOfBirth;
        partial void OnPlaceOfBirthChanging(global::System.String value);
        partial void OnPlaceOfBirthChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Height
        {
            get
            {
                return _Height;
            }
            set
            {
                OnHeightChanging(value);
                ReportPropertyChanging("Height");
                _Height = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Height");
                OnHeightChanged();
            }
        }
        private global::System.String _Height;
        partial void OnHeightChanging(global::System.String value);
        partial void OnHeightChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Weight
        {
            get
            {
                return _Weight;
            }
            set
            {
                OnWeightChanging(value);
                ReportPropertyChanging("Weight");
                _Weight = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Weight");
                OnWeightChanged();
            }
        }
        private global::System.String _Weight;
        partial void OnWeightChanging(global::System.String value);
        partial void OnWeightChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String HealthStatusCode
        {
            get
            {
                return _HealthStatusCode;
            }
            set
            {
                OnHealthStatusCodeChanging(value);
                ReportPropertyChanging("HealthStatusCode");
                _HealthStatusCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("HealthStatusCode");
                OnHealthStatusCodeChanged();
            }
        }
        private global::System.String _HealthStatusCode;
        partial void OnHealthStatusCodeChanging(global::System.String value);
        partial void OnHealthStatusCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScreenCode
        {
            get
            {
                return _ScreenCode;
            }
            set
            {
                OnScreenCodeChanging(value);
                ReportPropertyChanging("ScreenCode");
                _ScreenCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScreenCode");
                OnScreenCodeChanged();
            }
        }
        private global::System.String _ScreenCode;
        partial void OnScreenCodeChanging(global::System.String value);
        partial void OnScreenCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> PositionInFamily
        {
            get
            {
                return _PositionInFamily;
            }
            set
            {
                OnPositionInFamilyChanging(value);
                ReportPropertyChanging("PositionInFamily");
                _PositionInFamily = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PositionInFamily");
                OnPositionInFamilyChanged();
            }
        }
        private Nullable<global::System.Int32> _PositionInFamily;
        partial void OnPositionInFamilyChanging(Nullable<global::System.Int32> value);
        partial void OnPositionInFamilyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> NoOfChildren
        {
            get
            {
                return _NoOfChildren;
            }
            set
            {
                OnNoOfChildrenChanging(value);
                ReportPropertyChanging("NoOfChildren");
                _NoOfChildren = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("NoOfChildren");
                OnNoOfChildrenChanged();
            }
        }
        private Nullable<global::System.Int32> _NoOfChildren;
        partial void OnNoOfChildrenChanging(Nullable<global::System.Int32> value);
        partial void OnNoOfChildrenChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> TicketCode
        {
            get
            {
                return _TicketCode;
            }
            set
            {
                OnTicketCodeChanging(value);
                ReportPropertyChanging("TicketCode");
                _TicketCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TicketCode");
                OnTicketCodeChanged();
            }
        }
        private Nullable<global::System.Decimal> _TicketCode;
        partial void OnTicketCodeChanging(Nullable<global::System.Decimal> value);
        partial void OnTicketCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> PinCode
        {
            get
            {
                return _PinCode;
            }
            set
            {
                OnPinCodeChanging(value);
                ReportPropertyChanging("PinCode");
                _PinCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PinCode");
                OnPinCodeChanged();
            }
        }
        private Nullable<global::System.Decimal> _PinCode;
        partial void OnPinCodeChanging(Nullable<global::System.Decimal> value);
        partial void OnPinCodeChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Personals", "FK_BioDataReligion", "Religions")]
        public EntityCollection<Religion> Religions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Religion>("Personals.FK_BioDataReligion", "Religions");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Religion>("Personals.FK_BioDataReligion", "Religions", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Personals", Name="Certificate")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Certificate : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Certificate object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        /// <param name="yearObtained">Initial value of the YearObtained property.</param>
        public static Certificate CreateCertificate(global::System.Int32 code, global::System.String yearObtained)
        {
            Certificate certificate = new Certificate();
            certificate.Code = code;
            certificate.YearObtained = yearObtained;
            return certificate;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int32 _Code;
        partial void OnCodeChanging(global::System.Int32 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountCode
        {
            get
            {
                return _AccountCode;
            }
            set
            {
                OnAccountCodeChanging(value);
                ReportPropertyChanging("AccountCode");
                _AccountCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountCode");
                OnAccountCodeChanged();
            }
        }
        private global::System.String _AccountCode;
        partial void OnAccountCodeChanging(global::System.String value);
        partial void OnAccountCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScreenCode
        {
            get
            {
                return _ScreenCode;
            }
            set
            {
                OnScreenCodeChanging(value);
                ReportPropertyChanging("ScreenCode");
                _ScreenCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScreenCode");
                OnScreenCodeChanged();
            }
        }
        private global::System.String _ScreenCode;
        partial void OnScreenCodeChanging(global::System.String value);
        partial void OnScreenCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AwardingBody
        {
            get
            {
                return _AwardingBody;
            }
            set
            {
                OnAwardingBodyChanging(value);
                ReportPropertyChanging("AwardingBody");
                _AwardingBody = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AwardingBody");
                OnAwardingBodyChanged();
            }
        }
        private global::System.String _AwardingBody;
        partial void OnAwardingBodyChanging(global::System.String value);
        partial void OnAwardingBodyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String YearObtained
        {
            get
            {
                return _YearObtained;
            }
            set
            {
                OnYearObtainedChanging(value);
                ReportPropertyChanging("YearObtained");
                _YearObtained = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("YearObtained");
                OnYearObtainedChanged();
            }
        }
        private global::System.String _YearObtained;
        partial void OnYearObtainedChanging(global::System.String value);
        partial void OnYearObtainedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Certificate1
        {
            get
            {
                return _Certificate1;
            }
            set
            {
                OnCertificate1Changing(value);
                ReportPropertyChanging("Certificate1");
                _Certificate1 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Certificate1");
                OnCertificate1Changed();
            }
        }
        private global::System.String _Certificate1;
        partial void OnCertificate1Changing(global::System.String value);
        partial void OnCertificate1Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Personals", Name="Choice")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Choice : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Choice object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Choice CreateChoice(global::System.Int32 code)
        {
            Choice choice = new Choice();
            choice.Code = code;
            return choice;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int32 _Code;
        partial void OnCodeChanging(global::System.Int32 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FirstChoice
        {
            get
            {
                return _FirstChoice;
            }
            set
            {
                OnFirstChoiceChanging(value);
                ReportPropertyChanging("FirstChoice");
                _FirstChoice = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FirstChoice");
                OnFirstChoiceChanged();
            }
        }
        private global::System.String _FirstChoice;
        partial void OnFirstChoiceChanging(global::System.String value);
        partial void OnFirstChoiceChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SecondChoice
        {
            get
            {
                return _SecondChoice;
            }
            set
            {
                OnSecondChoiceChanging(value);
                ReportPropertyChanging("SecondChoice");
                _SecondChoice = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SecondChoice");
                OnSecondChoiceChanged();
            }
        }
        private global::System.String _SecondChoice;
        partial void OnSecondChoiceChanging(global::System.String value);
        partial void OnSecondChoiceChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountCode
        {
            get
            {
                return _AccountCode;
            }
            set
            {
                OnAccountCodeChanging(value);
                ReportPropertyChanging("AccountCode");
                _AccountCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountCode");
                OnAccountCodeChanged();
            }
        }
        private global::System.String _AccountCode;
        partial void OnAccountCodeChanging(global::System.String value);
        partial void OnAccountCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScreenCode
        {
            get
            {
                return _ScreenCode;
            }
            set
            {
                OnScreenCodeChanging(value);
                ReportPropertyChanging("ScreenCode");
                _ScreenCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScreenCode");
                OnScreenCodeChanged();
            }
        }
        private global::System.String _ScreenCode;
        partial void OnScreenCodeChanging(global::System.String value);
        partial void OnScreenCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Personals", Name="Company")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Company : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Company object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        /// <param name="companyName">Initial value of the CompanyName property.</param>
        public static Company CreateCompany(global::System.Int32 code, global::System.String companyName)
        {
            Company company = new Company();
            company.Code = code;
            company.CompanyName = companyName;
            return company;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int32 _Code;
        partial void OnCodeChanging(global::System.Int32 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountCode
        {
            get
            {
                return _AccountCode;
            }
            set
            {
                OnAccountCodeChanging(value);
                ReportPropertyChanging("AccountCode");
                _AccountCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountCode");
                OnAccountCodeChanged();
            }
        }
        private global::System.String _AccountCode;
        partial void OnAccountCodeChanging(global::System.String value);
        partial void OnAccountCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScreenCode
        {
            get
            {
                return _ScreenCode;
            }
            set
            {
                OnScreenCodeChanging(value);
                ReportPropertyChanging("ScreenCode");
                _ScreenCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScreenCode");
                OnScreenCodeChanged();
            }
        }
        private global::System.String _ScreenCode;
        partial void OnScreenCodeChanging(global::System.String value);
        partial void OnScreenCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CompanyName
        {
            get
            {
                return _CompanyName;
            }
            set
            {
                OnCompanyNameChanging(value);
                ReportPropertyChanging("CompanyName");
                _CompanyName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("CompanyName");
                OnCompanyNameChanged();
            }
        }
        private global::System.String _CompanyName;
        partial void OnCompanyNameChanging(global::System.String value);
        partial void OnCompanyNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ContactName
        {
            get
            {
                return _ContactName;
            }
            set
            {
                OnContactNameChanging(value);
                ReportPropertyChanging("ContactName");
                _ContactName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ContactName");
                OnContactNameChanged();
            }
        }
        private global::System.String _ContactName;
        partial void OnContactNameChanging(global::System.String value);
        partial void OnContactNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ContactTitle
        {
            get
            {
                return _ContactTitle;
            }
            set
            {
                OnContactTitleChanging(value);
                ReportPropertyChanging("ContactTitle");
                _ContactTitle = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ContactTitle");
                OnContactTitleChanged();
            }
        }
        private global::System.String _ContactTitle;
        partial void OnContactTitleChanging(global::System.String value);
        partial void OnContactTitleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Personals", Name="ComputerSkill")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ComputerSkill : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ComputerSkill object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static ComputerSkill CreateComputerSkill(global::System.Int32 code)
        {
            ComputerSkill computerSkill = new ComputerSkill();
            computerSkill.Code = code;
            return computerSkill;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int32 _Code;
        partial void OnCodeChanging(global::System.Int32 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountCode
        {
            get
            {
                return _AccountCode;
            }
            set
            {
                OnAccountCodeChanging(value);
                ReportPropertyChanging("AccountCode");
                _AccountCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountCode");
                OnAccountCodeChanged();
            }
        }
        private global::System.String _AccountCode;
        partial void OnAccountCodeChanging(global::System.String value);
        partial void OnAccountCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScreenCode
        {
            get
            {
                return _ScreenCode;
            }
            set
            {
                OnScreenCodeChanging(value);
                ReportPropertyChanging("ScreenCode");
                _ScreenCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScreenCode");
                OnScreenCodeChanged();
            }
        }
        private global::System.String _ScreenCode;
        partial void OnScreenCodeChanging(global::System.String value);
        partial void OnScreenCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PackageCode
        {
            get
            {
                return _PackageCode;
            }
            set
            {
                OnPackageCodeChanging(value);
                ReportPropertyChanging("PackageCode");
                _PackageCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PackageCode");
                OnPackageCodeChanged();
            }
        }
        private global::System.String _PackageCode;
        partial void OnPackageCodeChanging(global::System.String value);
        partial void OnPackageCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LevelOfKnowledgeCode
        {
            get
            {
                return _LevelOfKnowledgeCode;
            }
            set
            {
                OnLevelOfKnowledgeCodeChanging(value);
                ReportPropertyChanging("LevelOfKnowledgeCode");
                _LevelOfKnowledgeCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LevelOfKnowledgeCode");
                OnLevelOfKnowledgeCodeChanged();
            }
        }
        private global::System.String _LevelOfKnowledgeCode;
        partial void OnLevelOfKnowledgeCodeChanging(global::System.String value);
        partial void OnLevelOfKnowledgeCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Notes
        {
            get
            {
                return _Notes;
            }
            set
            {
                OnNotesChanging(value);
                ReportPropertyChanging("Notes");
                _Notes = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Notes");
                OnNotesChanged();
            }
        }
        private global::System.String _Notes;
        partial void OnNotesChanging(global::System.String value);
        partial void OnNotesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Personals", Name="Declaration")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Declaration : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Declaration object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        /// <param name="guardianCode">Initial value of the GuardianCode property.</param>
        public static Declaration CreateDeclaration(global::System.Int32 code, global::System.Int32 guardianCode)
        {
            Declaration declaration = new Declaration();
            declaration.Code = code;
            declaration.GuardianCode = guardianCode;
            return declaration;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int32 _Code;
        partial void OnCodeChanging(global::System.Int32 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountCode
        {
            get
            {
                return _AccountCode;
            }
            set
            {
                OnAccountCodeChanging(value);
                ReportPropertyChanging("AccountCode");
                _AccountCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountCode");
                OnAccountCodeChanged();
            }
        }
        private global::System.String _AccountCode;
        partial void OnAccountCodeChanging(global::System.String value);
        partial void OnAccountCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScreenCode
        {
            get
            {
                return _ScreenCode;
            }
            set
            {
                OnScreenCodeChanging(value);
                ReportPropertyChanging("ScreenCode");
                _ScreenCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScreenCode");
                OnScreenCodeChanged();
            }
        }
        private global::System.String _ScreenCode;
        partial void OnScreenCodeChanging(global::System.String value);
        partial void OnScreenCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Notes
        {
            get
            {
                return _Notes;
            }
            set
            {
                OnNotesChanging(value);
                ReportPropertyChanging("Notes");
                _Notes = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Notes");
                OnNotesChanged();
            }
        }
        private global::System.String _Notes;
        partial void OnNotesChanging(global::System.String value);
        partial void OnNotesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 GuardianCode
        {
            get
            {
                return _GuardianCode;
            }
            set
            {
                OnGuardianCodeChanging(value);
                ReportPropertyChanging("GuardianCode");
                _GuardianCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("GuardianCode");
                OnGuardianCodeChanged();
            }
        }
        private global::System.Int32 _GuardianCode;
        partial void OnGuardianCodeChanging(global::System.Int32 value);
        partial void OnGuardianCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Personals", Name="Email")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Email : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Email object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Email CreateEmail(global::System.Int32 code)
        {
            Email email = new Email();
            email.Code = code;
            return email;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int32 _Code;
        partial void OnCodeChanging(global::System.Int32 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountCode
        {
            get
            {
                return _AccountCode;
            }
            set
            {
                OnAccountCodeChanging(value);
                ReportPropertyChanging("AccountCode");
                _AccountCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountCode");
                OnAccountCodeChanged();
            }
        }
        private global::System.String _AccountCode;
        partial void OnAccountCodeChanging(global::System.String value);
        partial void OnAccountCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Email1
        {
            get
            {
                return _Email1;
            }
            set
            {
                OnEmail1Changing(value);
                ReportPropertyChanging("Email1");
                _Email1 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Email1");
                OnEmail1Changed();
            }
        }
        private global::System.String _Email1;
        partial void OnEmail1Changing(global::System.String value);
        partial void OnEmail1Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScreenCode
        {
            get
            {
                return _ScreenCode;
            }
            set
            {
                OnScreenCodeChanging(value);
                ReportPropertyChanging("ScreenCode");
                _ScreenCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScreenCode");
                OnScreenCodeChanged();
            }
        }
        private global::System.String _ScreenCode;
        partial void OnScreenCodeChanging(global::System.String value);
        partial void OnScreenCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Personals", Name="Emergency")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Emergency : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Emergency object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Emergency CreateEmergency(global::System.Int32 code)
        {
            Emergency emergency = new Emergency();
            emergency.Code = code;
            return emergency;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int32 _Code;
        partial void OnCodeChanging(global::System.Int32 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountCode
        {
            get
            {
                return _AccountCode;
            }
            set
            {
                OnAccountCodeChanging(value);
                ReportPropertyChanging("AccountCode");
                _AccountCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountCode");
                OnAccountCodeChanged();
            }
        }
        private global::System.String _AccountCode;
        partial void OnAccountCodeChanging(global::System.String value);
        partial void OnAccountCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScreenCode
        {
            get
            {
                return _ScreenCode;
            }
            set
            {
                OnScreenCodeChanging(value);
                ReportPropertyChanging("ScreenCode");
                _ScreenCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScreenCode");
                OnScreenCodeChanged();
            }
        }
        private global::System.String _ScreenCode;
        partial void OnScreenCodeChanging(global::System.String value);
        partial void OnScreenCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String TitleCode
        {
            get
            {
                return _TitleCode;
            }
            set
            {
                OnTitleCodeChanging(value);
                ReportPropertyChanging("TitleCode");
                _TitleCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("TitleCode");
                OnTitleCodeChanged();
            }
        }
        private global::System.String _TitleCode;
        partial void OnTitleCodeChanging(global::System.String value);
        partial void OnTitleCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Personals", Name="EmploymentHistory")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class EmploymentHistory : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new EmploymentHistory object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        /// <param name="employerBusinessNatureCode">Initial value of the EmployerBusinessNatureCode property.</param>
        public static EmploymentHistory CreateEmploymentHistory(global::System.Int32 code, global::System.String employerBusinessNatureCode)
        {
            EmploymentHistory employmentHistory = new EmploymentHistory();
            employmentHistory.Code = code;
            employmentHistory.EmployerBusinessNatureCode = employerBusinessNatureCode;
            return employmentHistory;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int32 _Code;
        partial void OnCodeChanging(global::System.Int32 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountCode
        {
            get
            {
                return _AccountCode;
            }
            set
            {
                OnAccountCodeChanging(value);
                ReportPropertyChanging("AccountCode");
                _AccountCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountCode");
                OnAccountCodeChanged();
            }
        }
        private global::System.String _AccountCode;
        partial void OnAccountCodeChanging(global::System.String value);
        partial void OnAccountCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScreenCode
        {
            get
            {
                return _ScreenCode;
            }
            set
            {
                OnScreenCodeChanging(value);
                ReportPropertyChanging("ScreenCode");
                _ScreenCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScreenCode");
                OnScreenCodeChanged();
            }
        }
        private global::System.String _ScreenCode;
        partial void OnScreenCodeChanging(global::System.String value);
        partial void OnScreenCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String TitleCode
        {
            get
            {
                return _TitleCode;
            }
            set
            {
                OnTitleCodeChanging(value);
                ReportPropertyChanging("TitleCode");
                _TitleCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("TitleCode");
                OnTitleCodeChanged();
            }
        }
        private global::System.String _TitleCode;
        partial void OnTitleCodeChanging(global::System.String value);
        partial void OnTitleCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String JobCategoryCode
        {
            get
            {
                return _JobCategoryCode;
            }
            set
            {
                OnJobCategoryCodeChanging(value);
                ReportPropertyChanging("JobCategoryCode");
                _JobCategoryCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("JobCategoryCode");
                OnJobCategoryCodeChanged();
            }
        }
        private global::System.String _JobCategoryCode;
        partial void OnJobCategoryCodeChanging(global::System.String value);
        partial void OnJobCategoryCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String JobDescCode
        {
            get
            {
                return _JobDescCode;
            }
            set
            {
                OnJobDescCodeChanging(value);
                ReportPropertyChanging("JobDescCode");
                _JobDescCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("JobDescCode");
                OnJobDescCodeChanged();
            }
        }
        private global::System.String _JobDescCode;
        partial void OnJobDescCodeChanging(global::System.String value);
        partial void OnJobDescCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LevelOfXpertiseCode
        {
            get
            {
                return _LevelOfXpertiseCode;
            }
            set
            {
                OnLevelOfXpertiseCodeChanging(value);
                ReportPropertyChanging("LevelOfXpertiseCode");
                _LevelOfXpertiseCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LevelOfXpertiseCode");
                OnLevelOfXpertiseCodeChanged();
            }
        }
        private global::System.String _LevelOfXpertiseCode;
        partial void OnLevelOfXpertiseCodeChanging(global::System.String value);
        partial void OnLevelOfXpertiseCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String WorkPercentageCode
        {
            get
            {
                return _WorkPercentageCode;
            }
            set
            {
                OnWorkPercentageCodeChanging(value);
                ReportPropertyChanging("WorkPercentageCode");
                _WorkPercentageCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("WorkPercentageCode");
                OnWorkPercentageCodeChanged();
            }
        }
        private global::System.String _WorkPercentageCode;
        partial void OnWorkPercentageCodeChanging(global::System.String value);
        partial void OnWorkPercentageCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FromYearCode
        {
            get
            {
                return _FromYearCode;
            }
            set
            {
                OnFromYearCodeChanging(value);
                ReportPropertyChanging("FromYearCode");
                _FromYearCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FromYearCode");
                OnFromYearCodeChanged();
            }
        }
        private global::System.String _FromYearCode;
        partial void OnFromYearCodeChanging(global::System.String value);
        partial void OnFromYearCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ToYearCode
        {
            get
            {
                return _ToYearCode;
            }
            set
            {
                OnToYearCodeChanging(value);
                ReportPropertyChanging("ToYearCode");
                _ToYearCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ToYearCode");
                OnToYearCodeChanged();
            }
        }
        private global::System.String _ToYearCode;
        partial void OnToYearCodeChanging(global::System.String value);
        partial void OnToYearCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FromMonthCode
        {
            get
            {
                return _FromMonthCode;
            }
            set
            {
                OnFromMonthCodeChanging(value);
                ReportPropertyChanging("FromMonthCode");
                _FromMonthCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FromMonthCode");
                OnFromMonthCodeChanged();
            }
        }
        private global::System.String _FromMonthCode;
        partial void OnFromMonthCodeChanging(global::System.String value);
        partial void OnFromMonthCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ToMonthCode
        {
            get
            {
                return _ToMonthCode;
            }
            set
            {
                OnToMonthCodeChanging(value);
                ReportPropertyChanging("ToMonthCode");
                _ToMonthCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ToMonthCode");
                OnToMonthCodeChanged();
            }
        }
        private global::System.String _ToMonthCode;
        partial void OnToMonthCodeChanging(global::System.String value);
        partial void OnToMonthCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FromSAS
        {
            get
            {
                return _FromSAS;
            }
            set
            {
                OnFromSASChanging(value);
                ReportPropertyChanging("FromSAS");
                _FromSAS = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FromSAS");
                OnFromSASChanged();
            }
        }
        private global::System.String _FromSAS;
        partial void OnFromSASChanging(global::System.String value);
        partial void OnFromSASChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FromSASCurrencyCode
        {
            get
            {
                return _FromSASCurrencyCode;
            }
            set
            {
                OnFromSASCurrencyCodeChanging(value);
                ReportPropertyChanging("FromSASCurrencyCode");
                _FromSASCurrencyCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FromSASCurrencyCode");
                OnFromSASCurrencyCodeChanged();
            }
        }
        private global::System.String _FromSASCurrencyCode;
        partial void OnFromSASCurrencyCodeChanging(global::System.String value);
        partial void OnFromSASCurrencyCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> FromSASTotals
        {
            get
            {
                return _FromSASTotals;
            }
            set
            {
                OnFromSASTotalsChanging(value);
                ReportPropertyChanging("FromSASTotals");
                _FromSASTotals = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FromSASTotals");
                OnFromSASTotalsChanged();
            }
        }
        private Nullable<global::System.Decimal> _FromSASTotals;
        partial void OnFromSASTotalsChanging(Nullable<global::System.Decimal> value);
        partial void OnFromSASTotalsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FromEAS
        {
            get
            {
                return _FromEAS;
            }
            set
            {
                OnFromEASChanging(value);
                ReportPropertyChanging("FromEAS");
                _FromEAS = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FromEAS");
                OnFromEASChanged();
            }
        }
        private global::System.String _FromEAS;
        partial void OnFromEASChanging(global::System.String value);
        partial void OnFromEASChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FromEASCurrencyCode
        {
            get
            {
                return _FromEASCurrencyCode;
            }
            set
            {
                OnFromEASCurrencyCodeChanging(value);
                ReportPropertyChanging("FromEASCurrencyCode");
                _FromEASCurrencyCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FromEASCurrencyCode");
                OnFromEASCurrencyCodeChanged();
            }
        }
        private global::System.String _FromEASCurrencyCode;
        partial void OnFromEASCurrencyCodeChanging(global::System.String value);
        partial void OnFromEASCurrencyCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> FromEASTotals
        {
            get
            {
                return _FromEASTotals;
            }
            set
            {
                OnFromEASTotalsChanging(value);
                ReportPropertyChanging("FromEASTotals");
                _FromEASTotals = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FromEASTotals");
                OnFromEASTotalsChanged();
            }
        }
        private Nullable<global::System.Decimal> _FromEASTotals;
        partial void OnFromEASTotalsChanging(Nullable<global::System.Decimal> value);
        partial void OnFromEASTotalsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Supervisor
        {
            get
            {
                return _Supervisor;
            }
            set
            {
                OnSupervisorChanging(value);
                ReportPropertyChanging("Supervisor");
                _Supervisor = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Supervisor");
                OnSupervisorChanged();
            }
        }
        private global::System.String _Supervisor;
        partial void OnSupervisorChanging(global::System.String value);
        partial void OnSupervisorChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SupervisorTitle
        {
            get
            {
                return _SupervisorTitle;
            }
            set
            {
                OnSupervisorTitleChanging(value);
                ReportPropertyChanging("SupervisorTitle");
                _SupervisorTitle = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SupervisorTitle");
                OnSupervisorTitleChanged();
            }
        }
        private global::System.String _SupervisorTitle;
        partial void OnSupervisorTitleChanging(global::System.String value);
        partial void OnSupervisorTitleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Employer
        {
            get
            {
                return _Employer;
            }
            set
            {
                OnEmployerChanging(value);
                ReportPropertyChanging("Employer");
                _Employer = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Employer");
                OnEmployerChanged();
            }
        }
        private global::System.String _Employer;
        partial void OnEmployerChanging(global::System.String value);
        partial void OnEmployerChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String EmployerAddress
        {
            get
            {
                return _EmployerAddress;
            }
            set
            {
                OnEmployerAddressChanging(value);
                ReportPropertyChanging("EmployerAddress");
                _EmployerAddress = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("EmployerAddress");
                OnEmployerAddressChanged();
            }
        }
        private global::System.String _EmployerAddress;
        partial void OnEmployerAddressChanging(global::System.String value);
        partial void OnEmployerAddressChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String EmployerBusinessNatureCode
        {
            get
            {
                return _EmployerBusinessNatureCode;
            }
            set
            {
                OnEmployerBusinessNatureCodeChanging(value);
                ReportPropertyChanging("EmployerBusinessNatureCode");
                _EmployerBusinessNatureCode = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("EmployerBusinessNatureCode");
                OnEmployerBusinessNatureCodeChanged();
            }
        }
        private global::System.String _EmployerBusinessNatureCode;
        partial void OnEmployerBusinessNatureCodeChanging(global::System.String value);
        partial void OnEmployerBusinessNatureCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String EmployerURL
        {
            get
            {
                return _EmployerURL;
            }
            set
            {
                OnEmployerURLChanging(value);
                ReportPropertyChanging("EmployerURL");
                _EmployerURL = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("EmployerURL");
                OnEmployerURLChanged();
            }
        }
        private global::System.String _EmployerURL;
        partial void OnEmployerURLChanging(global::System.String value);
        partial void OnEmployerURLChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DutiesDescription
        {
            get
            {
                return _DutiesDescription;
            }
            set
            {
                OnDutiesDescriptionChanging(value);
                ReportPropertyChanging("DutiesDescription");
                _DutiesDescription = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DutiesDescription");
                OnDutiesDescriptionChanged();
            }
        }
        private global::System.String _DutiesDescription;
        partial void OnDutiesDescriptionChanging(global::System.String value);
        partial void OnDutiesDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String KeyAchievements
        {
            get
            {
                return _KeyAchievements;
            }
            set
            {
                OnKeyAchievementsChanging(value);
                ReportPropertyChanging("KeyAchievements");
                _KeyAchievements = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("KeyAchievements");
                OnKeyAchievementsChanged();
            }
        }
        private global::System.String _KeyAchievements;
        partial void OnKeyAchievementsChanging(global::System.String value);
        partial void OnKeyAchievementsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ContactRefrenceCode
        {
            get
            {
                return _ContactRefrenceCode;
            }
            set
            {
                OnContactRefrenceCodeChanging(value);
                ReportPropertyChanging("ContactRefrenceCode");
                _ContactRefrenceCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ContactRefrenceCode");
                OnContactRefrenceCodeChanged();
            }
        }
        private global::System.String _ContactRefrenceCode;
        partial void OnContactRefrenceCodeChanging(global::System.String value);
        partial void OnContactRefrenceCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> NoOfPeopleSupervised
        {
            get
            {
                return _NoOfPeopleSupervised;
            }
            set
            {
                OnNoOfPeopleSupervisedChanging(value);
                ReportPropertyChanging("NoOfPeopleSupervised");
                _NoOfPeopleSupervised = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("NoOfPeopleSupervised");
                OnNoOfPeopleSupervisedChanged();
            }
        }
        private Nullable<global::System.Int32> _NoOfPeopleSupervised;
        partial void OnNoOfPeopleSupervisedChanging(Nullable<global::System.Int32> value);
        partial void OnNoOfPeopleSupervisedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ReasonForLeaving
        {
            get
            {
                return _ReasonForLeaving;
            }
            set
            {
                OnReasonForLeavingChanging(value);
                ReportPropertyChanging("ReasonForLeaving");
                _ReasonForLeaving = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ReasonForLeaving");
                OnReasonForLeavingChanged();
            }
        }
        private global::System.String _ReasonForLeaving;
        partial void OnReasonForLeavingChanging(global::System.String value);
        partial void OnReasonForLeavingChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Personals", Name="Guarantor")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Guarantor : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Guarantor object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        /// <param name="undertaking">Initial value of the Undertaking property.</param>
        public static Guarantor CreateGuarantor(global::System.Int32 code, global::System.String undertaking)
        {
            Guarantor guarantor = new Guarantor();
            guarantor.Code = code;
            guarantor.Undertaking = undertaking;
            return guarantor;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int32 _Code;
        partial void OnCodeChanging(global::System.Int32 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String TitleCode
        {
            get
            {
                return _TitleCode;
            }
            set
            {
                OnTitleCodeChanging(value);
                ReportPropertyChanging("TitleCode");
                _TitleCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("TitleCode");
                OnTitleCodeChanged();
            }
        }
        private global::System.String _TitleCode;
        partial void OnTitleCodeChanging(global::System.String value);
        partial void OnTitleCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String OccupationCode
        {
            get
            {
                return _OccupationCode;
            }
            set
            {
                OnOccupationCodeChanging(value);
                ReportPropertyChanging("OccupationCode");
                _OccupationCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("OccupationCode");
                OnOccupationCodeChanged();
            }
        }
        private global::System.String _OccupationCode;
        partial void OnOccupationCodeChanging(global::System.String value);
        partial void OnOccupationCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountCode
        {
            get
            {
                return _AccountCode;
            }
            set
            {
                OnAccountCodeChanging(value);
                ReportPropertyChanging("AccountCode");
                _AccountCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountCode");
                OnAccountCodeChanged();
            }
        }
        private global::System.String _AccountCode;
        partial void OnAccountCodeChanging(global::System.String value);
        partial void OnAccountCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScreenCode
        {
            get
            {
                return _ScreenCode;
            }
            set
            {
                OnScreenCodeChanging(value);
                ReportPropertyChanging("ScreenCode");
                _ScreenCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScreenCode");
                OnScreenCodeChanged();
            }
        }
        private global::System.String _ScreenCode;
        partial void OnScreenCodeChanging(global::System.String value);
        partial void OnScreenCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Undertaking
        {
            get
            {
                return _Undertaking;
            }
            set
            {
                OnUndertakingChanging(value);
                ReportPropertyChanging("Undertaking");
                _Undertaking = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Undertaking");
                OnUndertakingChanged();
            }
        }
        private global::System.String _Undertaking;
        partial void OnUndertakingChanging(global::System.String value);
        partial void OnUndertakingChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Notes
        {
            get
            {
                return _Notes;
            }
            set
            {
                OnNotesChanging(value);
                ReportPropertyChanging("Notes");
                _Notes = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Notes");
                OnNotesChanged();
            }
        }
        private global::System.String _Notes;
        partial void OnNotesChanging(global::System.String value);
        partial void OnNotesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Personals", Name="Guardian")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Guardian : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Guardian object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Guardian CreateGuardian(global::System.Int32 code)
        {
            Guardian guardian = new Guardian();
            guardian.Code = code;
            return guardian;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int32 _Code;
        partial void OnCodeChanging(global::System.Int32 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String GuardianCode
        {
            get
            {
                return _GuardianCode;
            }
            set
            {
                OnGuardianCodeChanging(value);
                ReportPropertyChanging("GuardianCode");
                _GuardianCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("GuardianCode");
                OnGuardianCodeChanged();
            }
        }
        private global::System.String _GuardianCode;
        partial void OnGuardianCodeChanging(global::System.String value);
        partial void OnGuardianCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String TitleCode
        {
            get
            {
                return _TitleCode;
            }
            set
            {
                OnTitleCodeChanging(value);
                ReportPropertyChanging("TitleCode");
                _TitleCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("TitleCode");
                OnTitleCodeChanged();
            }
        }
        private global::System.String _TitleCode;
        partial void OnTitleCodeChanging(global::System.String value);
        partial void OnTitleCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String GuardianName
        {
            get
            {
                return _GuardianName;
            }
            set
            {
                OnGuardianNameChanging(value);
                ReportPropertyChanging("GuardianName");
                _GuardianName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("GuardianName");
                OnGuardianNameChanged();
            }
        }
        private global::System.String _GuardianName;
        partial void OnGuardianNameChanging(global::System.String value);
        partial void OnGuardianNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String OccupationCode
        {
            get
            {
                return _OccupationCode;
            }
            set
            {
                OnOccupationCodeChanging(value);
                ReportPropertyChanging("OccupationCode");
                _OccupationCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("OccupationCode");
                OnOccupationCodeChanged();
            }
        }
        private global::System.String _OccupationCode;
        partial void OnOccupationCodeChanging(global::System.String value);
        partial void OnOccupationCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountCode
        {
            get
            {
                return _AccountCode;
            }
            set
            {
                OnAccountCodeChanging(value);
                ReportPropertyChanging("AccountCode");
                _AccountCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountCode");
                OnAccountCodeChanged();
            }
        }
        private global::System.String _AccountCode;
        partial void OnAccountCodeChanging(global::System.String value);
        partial void OnAccountCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScreenCode
        {
            get
            {
                return _ScreenCode;
            }
            set
            {
                OnScreenCodeChanging(value);
                ReportPropertyChanging("ScreenCode");
                _ScreenCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScreenCode");
                OnScreenCodeChanged();
            }
        }
        private global::System.String _ScreenCode;
        partial void OnScreenCodeChanging(global::System.String value);
        partial void OnScreenCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Personals", Name="Hobby")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Hobby : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Hobby object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        /// <param name="accountCode">Initial value of the AccountCode property.</param>
        public static Hobby CreateHobby(global::System.Int32 code, global::System.String accountCode)
        {
            Hobby hobby = new Hobby();
            hobby.Code = code;
            hobby.AccountCode = accountCode;
            return hobby;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int32 _Code;
        partial void OnCodeChanging(global::System.Int32 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String AccountCode
        {
            get
            {
                return _AccountCode;
            }
            set
            {
                OnAccountCodeChanging(value);
                ReportPropertyChanging("AccountCode");
                _AccountCode = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("AccountCode");
                OnAccountCodeChanged();
            }
        }
        private global::System.String _AccountCode;
        partial void OnAccountCodeChanging(global::System.String value);
        partial void OnAccountCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScreenCode
        {
            get
            {
                return _ScreenCode;
            }
            set
            {
                OnScreenCodeChanging(value);
                ReportPropertyChanging("ScreenCode");
                _ScreenCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScreenCode");
                OnScreenCodeChanged();
            }
        }
        private global::System.String _ScreenCode;
        partial void OnScreenCodeChanging(global::System.String value);
        partial void OnScreenCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String HobbyCode
        {
            get
            {
                return _HobbyCode;
            }
            set
            {
                OnHobbyCodeChanging(value);
                ReportPropertyChanging("HobbyCode");
                _HobbyCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("HobbyCode");
                OnHobbyCodeChanged();
            }
        }
        private global::System.String _HobbyCode;
        partial void OnHobbyCodeChanging(global::System.String value);
        partial void OnHobbyCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Personals", Name="JAMB")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class JAMB : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new JAMB object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static JAMB CreateJAMB(global::System.Int32 code)
        {
            JAMB jAMB = new JAMB();
            jAMB.Code = code;
            return jAMB;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int32 _Code;
        partial void OnCodeChanging(global::System.Int32 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String RegNo
        {
            get
            {
                return _RegNo;
            }
            set
            {
                OnRegNoChanging(value);
                ReportPropertyChanging("RegNo");
                _RegNo = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("RegNo");
                OnRegNoChanged();
            }
        }
        private global::System.String _RegNo;
        partial void OnRegNoChanging(global::System.String value);
        partial void OnRegNoChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Score
        {
            get
            {
                return _Score;
            }
            set
            {
                OnScoreChanging(value);
                ReportPropertyChanging("Score");
                _Score = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Score");
                OnScoreChanged();
            }
        }
        private Nullable<global::System.Int32> _Score;
        partial void OnScoreChanging(Nullable<global::System.Int32> value);
        partial void OnScoreChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountCode
        {
            get
            {
                return _AccountCode;
            }
            set
            {
                OnAccountCodeChanging(value);
                ReportPropertyChanging("AccountCode");
                _AccountCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountCode");
                OnAccountCodeChanged();
            }
        }
        private global::System.String _AccountCode;
        partial void OnAccountCodeChanging(global::System.String value);
        partial void OnAccountCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScreenCode
        {
            get
            {
                return _ScreenCode;
            }
            set
            {
                OnScreenCodeChanging(value);
                ReportPropertyChanging("ScreenCode");
                _ScreenCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScreenCode");
                OnScreenCodeChanged();
            }
        }
        private global::System.String _ScreenCode;
        partial void OnScreenCodeChanging(global::System.String value);
        partial void OnScreenCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Year
        {
            get
            {
                return _Year;
            }
            set
            {
                OnYearChanging(value);
                ReportPropertyChanging("Year");
                _Year = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Year");
                OnYearChanged();
            }
        }
        private Nullable<global::System.Int32> _Year;
        partial void OnYearChanging(Nullable<global::System.Int32> value);
        partial void OnYearChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Personals", Name="LanguageSkill")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class LanguageSkill : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new LanguageSkill object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static LanguageSkill CreateLanguageSkill(global::System.Int32 code)
        {
            LanguageSkill languageSkill = new LanguageSkill();
            languageSkill.Code = code;
            return languageSkill;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int32 _Code;
        partial void OnCodeChanging(global::System.Int32 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LanguageCode
        {
            get
            {
                return _LanguageCode;
            }
            set
            {
                OnLanguageCodeChanging(value);
                ReportPropertyChanging("LanguageCode");
                _LanguageCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LanguageCode");
                OnLanguageCodeChanged();
            }
        }
        private global::System.String _LanguageCode;
        partial void OnLanguageCodeChanging(global::System.String value);
        partial void OnLanguageCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountCode
        {
            get
            {
                return _AccountCode;
            }
            set
            {
                OnAccountCodeChanging(value);
                ReportPropertyChanging("AccountCode");
                _AccountCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountCode");
                OnAccountCodeChanged();
            }
        }
        private global::System.String _AccountCode;
        partial void OnAccountCodeChanging(global::System.String value);
        partial void OnAccountCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateX
        {
            get
            {
                return _DateX;
            }
            set
            {
                OnDateXChanging(value);
                ReportPropertyChanging("DateX");
                _DateX = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateX");
                OnDateXChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateX;
        partial void OnDateXChanging(Nullable<global::System.DateTime> value);
        partial void OnDateXChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScreenCode
        {
            get
            {
                return _ScreenCode;
            }
            set
            {
                OnScreenCodeChanging(value);
                ReportPropertyChanging("ScreenCode");
                _ScreenCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScreenCode");
                OnScreenCodeChanged();
            }
        }
        private global::System.String _ScreenCode;
        partial void OnScreenCodeChanging(global::System.String value);
        partial void OnScreenCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ReadingDegree
        {
            get
            {
                return _ReadingDegree;
            }
            set
            {
                OnReadingDegreeChanging(value);
                ReportPropertyChanging("ReadingDegree");
                _ReadingDegree = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ReadingDegree");
                OnReadingDegreeChanged();
            }
        }
        private global::System.String _ReadingDegree;
        partial void OnReadingDegreeChanging(global::System.String value);
        partial void OnReadingDegreeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SpeakingDegree
        {
            get
            {
                return _SpeakingDegree;
            }
            set
            {
                OnSpeakingDegreeChanging(value);
                ReportPropertyChanging("SpeakingDegree");
                _SpeakingDegree = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SpeakingDegree");
                OnSpeakingDegreeChanged();
            }
        }
        private global::System.String _SpeakingDegree;
        partial void OnSpeakingDegreeChanging(global::System.String value);
        partial void OnSpeakingDegreeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String WritingDegree
        {
            get
            {
                return _WritingDegree;
            }
            set
            {
                OnWritingDegreeChanging(value);
                ReportPropertyChanging("WritingDegree");
                _WritingDegree = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("WritingDegree");
                OnWritingDegreeChanged();
            }
        }
        private global::System.String _WritingDegree;
        partial void OnWritingDegreeChanging(global::System.String value);
        partial void OnWritingDegreeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Personals", Name="MedicalCondition")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class MedicalCondition : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new MedicalCondition object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static MedicalCondition CreateMedicalCondition(global::System.Int32 code)
        {
            MedicalCondition medicalCondition = new MedicalCondition();
            medicalCondition.Code = code;
            return medicalCondition;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int32 _Code;
        partial void OnCodeChanging(global::System.Int32 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DiseaseCode
        {
            get
            {
                return _DiseaseCode;
            }
            set
            {
                OnDiseaseCodeChanging(value);
                ReportPropertyChanging("DiseaseCode");
                _DiseaseCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DiseaseCode");
                OnDiseaseCodeChanged();
            }
        }
        private global::System.String _DiseaseCode;
        partial void OnDiseaseCodeChanging(global::System.String value);
        partial void OnDiseaseCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Conditions
        {
            get
            {
                return _Conditions;
            }
            set
            {
                OnConditionsChanging(value);
                ReportPropertyChanging("Conditions");
                _Conditions = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Conditions");
                OnConditionsChanged();
            }
        }
        private global::System.String _Conditions;
        partial void OnConditionsChanging(global::System.String value);
        partial void OnConditionsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountCode
        {
            get
            {
                return _AccountCode;
            }
            set
            {
                OnAccountCodeChanging(value);
                ReportPropertyChanging("AccountCode");
                _AccountCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountCode");
                OnAccountCodeChanged();
            }
        }
        private global::System.String _AccountCode;
        partial void OnAccountCodeChanging(global::System.String value);
        partial void OnAccountCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScreenCode
        {
            get
            {
                return _ScreenCode;
            }
            set
            {
                OnScreenCodeChanging(value);
                ReportPropertyChanging("ScreenCode");
                _ScreenCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScreenCode");
                OnScreenCodeChanged();
            }
        }
        private global::System.String _ScreenCode;
        partial void OnScreenCodeChanging(global::System.String value);
        partial void OnScreenCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Personals", Name="NextOfKin")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class NextOfKin : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new NextOfKin object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static NextOfKin CreateNextOfKin(global::System.Int32 code)
        {
            NextOfKin nextOfKin = new NextOfKin();
            nextOfKin.Code = code;
            return nextOfKin;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int32 _Code;
        partial void OnCodeChanging(global::System.Int32 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String RelTypeCode
        {
            get
            {
                return _RelTypeCode;
            }
            set
            {
                OnRelTypeCodeChanging(value);
                ReportPropertyChanging("RelTypeCode");
                _RelTypeCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("RelTypeCode");
                OnRelTypeCodeChanged();
            }
        }
        private global::System.String _RelTypeCode;
        partial void OnRelTypeCodeChanging(global::System.String value);
        partial void OnRelTypeCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String TitleCode
        {
            get
            {
                return _TitleCode;
            }
            set
            {
                OnTitleCodeChanging(value);
                ReportPropertyChanging("TitleCode");
                _TitleCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("TitleCode");
                OnTitleCodeChanged();
            }
        }
        private global::System.String _TitleCode;
        partial void OnTitleCodeChanging(global::System.String value);
        partial void OnTitleCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String OccupationCode
        {
            get
            {
                return _OccupationCode;
            }
            set
            {
                OnOccupationCodeChanging(value);
                ReportPropertyChanging("OccupationCode");
                _OccupationCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("OccupationCode");
                OnOccupationCodeChanged();
            }
        }
        private global::System.String _OccupationCode;
        partial void OnOccupationCodeChanging(global::System.String value);
        partial void OnOccupationCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountCode
        {
            get
            {
                return _AccountCode;
            }
            set
            {
                OnAccountCodeChanging(value);
                ReportPropertyChanging("AccountCode");
                _AccountCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountCode");
                OnAccountCodeChanged();
            }
        }
        private global::System.String _AccountCode;
        partial void OnAccountCodeChanging(global::System.String value);
        partial void OnAccountCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScreenCode
        {
            get
            {
                return _ScreenCode;
            }
            set
            {
                OnScreenCodeChanging(value);
                ReportPropertyChanging("ScreenCode");
                _ScreenCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScreenCode");
                OnScreenCodeChanged();
            }
        }
        private global::System.String _ScreenCode;
        partial void OnScreenCodeChanging(global::System.String value);
        partial void OnScreenCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Personals", Name="OLevel")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class OLevel : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new OLevel object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        /// <param name="gradeDescCode">Initial value of the GradeDescCode property.</param>
        public static OLevel CreateOLevel(global::System.Int32 code, global::System.String gradeDescCode)
        {
            OLevel oLevel = new OLevel();
            oLevel.Code = code;
            oLevel.GradeDescCode = gradeDescCode;
            return oLevel;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int32 _Code;
        partial void OnCodeChanging(global::System.Int32 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SubjectCode
        {
            get
            {
                return _SubjectCode;
            }
            set
            {
                OnSubjectCodeChanging(value);
                ReportPropertyChanging("SubjectCode");
                _SubjectCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SubjectCode");
                OnSubjectCodeChanged();
            }
        }
        private global::System.String _SubjectCode;
        partial void OnSubjectCodeChanging(global::System.String value);
        partial void OnSubjectCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountCode
        {
            get
            {
                return _AccountCode;
            }
            set
            {
                OnAccountCodeChanging(value);
                ReportPropertyChanging("AccountCode");
                _AccountCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountCode");
                OnAccountCodeChanged();
            }
        }
        private global::System.String _AccountCode;
        partial void OnAccountCodeChanging(global::System.String value);
        partial void OnAccountCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScreenCode
        {
            get
            {
                return _ScreenCode;
            }
            set
            {
                OnScreenCodeChanging(value);
                ReportPropertyChanging("ScreenCode");
                _ScreenCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScreenCode");
                OnScreenCodeChanged();
            }
        }
        private global::System.String _ScreenCode;
        partial void OnScreenCodeChanging(global::System.String value);
        partial void OnScreenCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> GradeCode
        {
            get
            {
                return _GradeCode;
            }
            set
            {
                OnGradeCodeChanging(value);
                ReportPropertyChanging("GradeCode");
                _GradeCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("GradeCode");
                OnGradeCodeChanged();
            }
        }
        private Nullable<global::System.Int32> _GradeCode;
        partial void OnGradeCodeChanging(Nullable<global::System.Int32> value);
        partial void OnGradeCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String GradeDescCode
        {
            get
            {
                return _GradeDescCode;
            }
            set
            {
                OnGradeDescCodeChanging(value);
                ReportPropertyChanging("GradeDescCode");
                _GradeDescCode = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("GradeDescCode");
                OnGradeDescCodeChanged();
            }
        }
        private global::System.String _GradeDescCode;
        partial void OnGradeDescCodeChanging(global::System.String value);
        partial void OnGradeDescCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ExamTypeCode
        {
            get
            {
                return _ExamTypeCode;
            }
            set
            {
                OnExamTypeCodeChanging(value);
                ReportPropertyChanging("ExamTypeCode");
                _ExamTypeCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ExamTypeCode");
                OnExamTypeCodeChanged();
            }
        }
        private global::System.String _ExamTypeCode;
        partial void OnExamTypeCodeChanging(global::System.String value);
        partial void OnExamTypeCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Personals", Name="Others")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Others : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Others object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Others CreateOthers(global::System.Int32 code)
        {
            Others others = new Others();
            others.Code = code;
            return others;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int32 _Code;
        partial void OnCodeChanging(global::System.Int32 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountCode
        {
            get
            {
                return _AccountCode;
            }
            set
            {
                OnAccountCodeChanging(value);
                ReportPropertyChanging("AccountCode");
                _AccountCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountCode");
                OnAccountCodeChanged();
            }
        }
        private global::System.String _AccountCode;
        partial void OnAccountCodeChanging(global::System.String value);
        partial void OnAccountCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Notes
        {
            get
            {
                return _Notes;
            }
            set
            {
                OnNotesChanging(value);
                ReportPropertyChanging("Notes");
                _Notes = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Notes");
                OnNotesChanged();
            }
        }
        private global::System.String _Notes;
        partial void OnNotesChanging(global::System.String value);
        partial void OnNotesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScreenCode
        {
            get
            {
                return _ScreenCode;
            }
            set
            {
                OnScreenCodeChanging(value);
                ReportPropertyChanging("ScreenCode");
                _ScreenCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScreenCode");
                OnScreenCodeChanged();
            }
        }
        private global::System.String _ScreenCode;
        partial void OnScreenCodeChanging(global::System.String value);
        partial void OnScreenCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String OthersCode
        {
            get
            {
                return _OthersCode;
            }
            set
            {
                OnOthersCodeChanging(value);
                ReportPropertyChanging("OthersCode");
                _OthersCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("OthersCode");
                OnOthersCodeChanged();
            }
        }
        private global::System.String _OthersCode;
        partial void OnOthersCodeChanging(global::System.String value);
        partial void OnOthersCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Personals", Name="Phone")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Phone : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Phone object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Phone CreatePhone(global::System.Int32 code)
        {
            Phone phone = new Phone();
            phone.Code = code;
            return phone;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int32 _Code;
        partial void OnCodeChanging(global::System.Int32 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountCode
        {
            get
            {
                return _AccountCode;
            }
            set
            {
                OnAccountCodeChanging(value);
                ReportPropertyChanging("AccountCode");
                _AccountCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountCode");
                OnAccountCodeChanged();
            }
        }
        private global::System.String _AccountCode;
        partial void OnAccountCodeChanging(global::System.String value);
        partial void OnAccountCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PhoneTypeCode
        {
            get
            {
                return _PhoneTypeCode;
            }
            set
            {
                OnPhoneTypeCodeChanging(value);
                ReportPropertyChanging("PhoneTypeCode");
                _PhoneTypeCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PhoneTypeCode");
                OnPhoneTypeCodeChanged();
            }
        }
        private global::System.String _PhoneTypeCode;
        partial void OnPhoneTypeCodeChanging(global::System.String value);
        partial void OnPhoneTypeCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScreenCode
        {
            get
            {
                return _ScreenCode;
            }
            set
            {
                OnScreenCodeChanging(value);
                ReportPropertyChanging("ScreenCode");
                _ScreenCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScreenCode");
                OnScreenCodeChanged();
            }
        }
        private global::System.String _ScreenCode;
        partial void OnScreenCodeChanging(global::System.String value);
        partial void OnScreenCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PostalCode
        {
            get
            {
                return _PostalCode;
            }
            set
            {
                OnPostalCodeChanging(value);
                ReportPropertyChanging("PostalCode");
                _PostalCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PostalCode");
                OnPostalCodeChanged();
            }
        }
        private global::System.String _PostalCode;
        partial void OnPostalCodeChanging(global::System.String value);
        partial void OnPostalCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PhoneNumber
        {
            get
            {
                return _PhoneNumber;
            }
            set
            {
                OnPhoneNumberChanging(value);
                ReportPropertyChanging("PhoneNumber");
                _PhoneNumber = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PhoneNumber");
                OnPhoneNumberChanged();
            }
        }
        private global::System.String _PhoneNumber;
        partial void OnPhoneNumberChanging(global::System.String value);
        partial void OnPhoneNumberChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Personals", Name="Photo")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Photo : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Photo object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Photo CreatePhoto(global::System.Int32 code)
        {
            Photo photo = new Photo();
            photo.Code = code;
            return photo;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int32 _Code;
        partial void OnCodeChanging(global::System.Int32 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModuleCode
        {
            get
            {
                return _ModuleCode;
            }
            set
            {
                OnModuleCodeChanging(value);
                ReportPropertyChanging("ModuleCode");
                _ModuleCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModuleCode");
                OnModuleCodeChanged();
            }
        }
        private global::System.String _ModuleCode;
        partial void OnModuleCodeChanging(global::System.String value);
        partial void OnModuleCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScreenCode
        {
            get
            {
                return _ScreenCode;
            }
            set
            {
                OnScreenCodeChanging(value);
                ReportPropertyChanging("ScreenCode");
                _ScreenCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScreenCode");
                OnScreenCodeChanged();
            }
        }
        private global::System.String _ScreenCode;
        partial void OnScreenCodeChanging(global::System.String value);
        partial void OnScreenCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ImageTypeCode
        {
            get
            {
                return _ImageTypeCode;
            }
            set
            {
                OnImageTypeCodeChanging(value);
                ReportPropertyChanging("ImageTypeCode");
                _ImageTypeCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ImageTypeCode");
                OnImageTypeCodeChanged();
            }
        }
        private global::System.String _ImageTypeCode;
        partial void OnImageTypeCodeChanging(global::System.String value);
        partial void OnImageTypeCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountCode
        {
            get
            {
                return _AccountCode;
            }
            set
            {
                OnAccountCodeChanging(value);
                ReportPropertyChanging("AccountCode");
                _AccountCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountCode");
                OnAccountCodeChanged();
            }
        }
        private global::System.String _AccountCode;
        partial void OnAccountCodeChanging(global::System.String value);
        partial void OnAccountCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] ByteThumb
        {
            get
            {
                return StructuralObject.GetValidValue(_ByteThumb);
            }
            set
            {
                OnByteThumbChanging(value);
                ReportPropertyChanging("ByteThumb");
                _ByteThumb = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ByteThumb");
                OnByteThumbChanged();
            }
        }
        private global::System.Byte[] _ByteThumb;
        partial void OnByteThumbChanging(global::System.Byte[] value);
        partial void OnByteThumbChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] BytePoster
        {
            get
            {
                return StructuralObject.GetValidValue(_BytePoster);
            }
            set
            {
                OnBytePosterChanging(value);
                ReportPropertyChanging("BytePoster");
                _BytePoster = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("BytePoster");
                OnBytePosterChanged();
            }
        }
        private global::System.Byte[] _BytePoster;
        partial void OnBytePosterChanging(global::System.Byte[] value);
        partial void OnBytePosterChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] ByteFull
        {
            get
            {
                return StructuralObject.GetValidValue(_ByteFull);
            }
            set
            {
                OnByteFullChanging(value);
                ReportPropertyChanging("ByteFull");
                _ByteFull = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ByteFull");
                OnByteFullChanged();
            }
        }
        private global::System.Byte[] _ByteFull;
        partial void OnByteFullChanging(global::System.Byte[] value);
        partial void OnByteFullChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] ByteOriginal
        {
            get
            {
                return StructuralObject.GetValidValue(_ByteOriginal);
            }
            set
            {
                OnByteOriginalChanging(value);
                ReportPropertyChanging("ByteOriginal");
                _ByteOriginal = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ByteOriginal");
                OnByteOriginalChanged();
            }
        }
        private global::System.Byte[] _ByteOriginal;
        partial void OnByteOriginalChanging(global::System.Byte[] value);
        partial void OnByteOriginalChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Notes
        {
            get
            {
                return _Notes;
            }
            set
            {
                OnNotesChanging(value);
                ReportPropertyChanging("Notes");
                _Notes = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Notes");
                OnNotesChanged();
            }
        }
        private global::System.String _Notes;
        partial void OnNotesChanging(global::System.String value);
        partial void OnNotesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Personals", Name="Qualification")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Qualification : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Qualification object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Qualification CreateQualification(global::System.Int32 code)
        {
            Qualification qualification = new Qualification();
            qualification.Code = code;
            return qualification;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int32 _Code;
        partial void OnCodeChanging(global::System.Int32 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountCode
        {
            get
            {
                return _AccountCode;
            }
            set
            {
                OnAccountCodeChanging(value);
                ReportPropertyChanging("AccountCode");
                _AccountCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountCode");
                OnAccountCodeChanged();
            }
        }
        private global::System.String _AccountCode;
        partial void OnAccountCodeChanging(global::System.String value);
        partial void OnAccountCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScreenCode
        {
            get
            {
                return _ScreenCode;
            }
            set
            {
                OnScreenCodeChanging(value);
                ReportPropertyChanging("ScreenCode");
                _ScreenCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScreenCode");
                OnScreenCodeChanged();
            }
        }
        private global::System.String _ScreenCode;
        partial void OnScreenCodeChanging(global::System.String value);
        partial void OnScreenCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String EducationTypeCode
        {
            get
            {
                return _EducationTypeCode;
            }
            set
            {
                OnEducationTypeCodeChanging(value);
                ReportPropertyChanging("EducationTypeCode");
                _EducationTypeCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("EducationTypeCode");
                OnEducationTypeCodeChanged();
            }
        }
        private global::System.String _EducationTypeCode;
        partial void OnEducationTypeCodeChanging(global::System.String value);
        partial void OnEducationTypeCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String QualificationTypeCode
        {
            get
            {
                return _QualificationTypeCode;
            }
            set
            {
                OnQualificationTypeCodeChanging(value);
                ReportPropertyChanging("QualificationTypeCode");
                _QualificationTypeCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("QualificationTypeCode");
                OnQualificationTypeCodeChanged();
            }
        }
        private global::System.String _QualificationTypeCode;
        partial void OnQualificationTypeCodeChanging(global::System.String value);
        partial void OnQualificationTypeCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FromYear
        {
            get
            {
                return _FromYear;
            }
            set
            {
                OnFromYearChanging(value);
                ReportPropertyChanging("FromYear");
                _FromYear = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FromYear");
                OnFromYearChanged();
            }
        }
        private global::System.String _FromYear;
        partial void OnFromYearChanging(global::System.String value);
        partial void OnFromYearChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ToYear
        {
            get
            {
                return _ToYear;
            }
            set
            {
                OnToYearChanging(value);
                ReportPropertyChanging("ToYear");
                _ToYear = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ToYear");
                OnToYearChanged();
            }
        }
        private global::System.String _ToYear;
        partial void OnToYearChanging(global::System.String value);
        partial void OnToYearChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FromMonth
        {
            get
            {
                return _FromMonth;
            }
            set
            {
                OnFromMonthChanging(value);
                ReportPropertyChanging("FromMonth");
                _FromMonth = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FromMonth");
                OnFromMonthChanged();
            }
        }
        private global::System.String _FromMonth;
        partial void OnFromMonthChanging(global::System.String value);
        partial void OnFromMonthChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ToMonth
        {
            get
            {
                return _ToMonth;
            }
            set
            {
                OnToMonthChanging(value);
                ReportPropertyChanging("ToMonth");
                _ToMonth = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ToMonth");
                OnToMonthChanged();
            }
        }
        private global::System.String _ToMonth;
        partial void OnToMonthChanging(global::System.String value);
        partial void OnToMonthChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AwardingBody
        {
            get
            {
                return _AwardingBody;
            }
            set
            {
                OnAwardingBodyChanging(value);
                ReportPropertyChanging("AwardingBody");
                _AwardingBody = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AwardingBody");
                OnAwardingBodyChanged();
            }
        }
        private global::System.String _AwardingBody;
        partial void OnAwardingBodyChanging(global::System.String value);
        partial void OnAwardingBodyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Certificate
        {
            get
            {
                return _Certificate;
            }
            set
            {
                OnCertificateChanging(value);
                ReportPropertyChanging("Certificate");
                _Certificate = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Certificate");
                OnCertificateChanged();
            }
        }
        private global::System.String _Certificate;
        partial void OnCertificateChanging(global::System.String value);
        partial void OnCertificateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Personals", Name="Referee")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Referee : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Referee object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Referee CreateReferee(global::System.Int32 code)
        {
            Referee referee = new Referee();
            referee.Code = code;
            return referee;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int32 _Code;
        partial void OnCodeChanging(global::System.Int32 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String TitleCode
        {
            get
            {
                return _TitleCode;
            }
            set
            {
                OnTitleCodeChanging(value);
                ReportPropertyChanging("TitleCode");
                _TitleCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("TitleCode");
                OnTitleCodeChanged();
            }
        }
        private global::System.String _TitleCode;
        partial void OnTitleCodeChanging(global::System.String value);
        partial void OnTitleCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String OccupationCode
        {
            get
            {
                return _OccupationCode;
            }
            set
            {
                OnOccupationCodeChanging(value);
                ReportPropertyChanging("OccupationCode");
                _OccupationCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("OccupationCode");
                OnOccupationCodeChanged();
            }
        }
        private global::System.String _OccupationCode;
        partial void OnOccupationCodeChanging(global::System.String value);
        partial void OnOccupationCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountCode
        {
            get
            {
                return _AccountCode;
            }
            set
            {
                OnAccountCodeChanging(value);
                ReportPropertyChanging("AccountCode");
                _AccountCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountCode");
                OnAccountCodeChanged();
            }
        }
        private global::System.String _AccountCode;
        partial void OnAccountCodeChanging(global::System.String value);
        partial void OnAccountCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScreenCode
        {
            get
            {
                return _ScreenCode;
            }
            set
            {
                OnScreenCodeChanging(value);
                ReportPropertyChanging("ScreenCode");
                _ScreenCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScreenCode");
                OnScreenCodeChanged();
            }
        }
        private global::System.String _ScreenCode;
        partial void OnScreenCodeChanging(global::System.String value);
        partial void OnScreenCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String KnowingMode
        {
            get
            {
                return _KnowingMode;
            }
            set
            {
                OnKnowingModeChanging(value);
                ReportPropertyChanging("KnowingMode");
                _KnowingMode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("KnowingMode");
                OnKnowingModeChanged();
            }
        }
        private global::System.String _KnowingMode;
        partial void OnKnowingModeChanging(global::System.String value);
        partial void OnKnowingModeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ContactReferenceCode
        {
            get
            {
                return _ContactReferenceCode;
            }
            set
            {
                OnContactReferenceCodeChanging(value);
                ReportPropertyChanging("ContactReferenceCode");
                _ContactReferenceCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ContactReferenceCode");
                OnContactReferenceCodeChanged();
            }
        }
        private global::System.String _ContactReferenceCode;
        partial void OnContactReferenceCodeChanging(global::System.String value);
        partial void OnContactReferenceCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Personals", Name="Religion")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Religion : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Religion object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        /// <param name="bioDataCode">Initial value of the BioDataCode property.</param>
        /// <param name="clergyPhoneNumber">Initial value of the ClergyPhoneNumber property.</param>
        public static Religion CreateReligion(global::System.Int32 code, global::System.String bioDataCode, global::System.String clergyPhoneNumber)
        {
            Religion religion = new Religion();
            religion.Code = code;
            religion.BioDataCode = bioDataCode;
            religion.ClergyPhoneNumber = clergyPhoneNumber;
            return religion;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int32 _Code;
        partial void OnCodeChanging(global::System.Int32 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountCode
        {
            get
            {
                return _AccountCode;
            }
            set
            {
                OnAccountCodeChanging(value);
                ReportPropertyChanging("AccountCode");
                _AccountCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountCode");
                OnAccountCodeChanged();
            }
        }
        private global::System.String _AccountCode;
        partial void OnAccountCodeChanging(global::System.String value);
        partial void OnAccountCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String BioDataCode
        {
            get
            {
                return _BioDataCode;
            }
            set
            {
                OnBioDataCodeChanging(value);
                ReportPropertyChanging("BioDataCode");
                _BioDataCode = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("BioDataCode");
                OnBioDataCodeChanged();
            }
        }
        private global::System.String _BioDataCode;
        partial void OnBioDataCodeChanging(global::System.String value);
        partial void OnBioDataCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ReligionCode
        {
            get
            {
                return _ReligionCode;
            }
            set
            {
                OnReligionCodeChanging(value);
                ReportPropertyChanging("ReligionCode");
                _ReligionCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ReligionCode");
                OnReligionCodeChanged();
            }
        }
        private global::System.String _ReligionCode;
        partial void OnReligionCodeChanging(global::System.String value);
        partial void OnReligionCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Clergy
        {
            get
            {
                return _Clergy;
            }
            set
            {
                OnClergyChanging(value);
                ReportPropertyChanging("Clergy");
                _Clergy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Clergy");
                OnClergyChanged();
            }
        }
        private global::System.String _Clergy;
        partial void OnClergyChanging(global::System.String value);
        partial void OnClergyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PlaceOfWorship
        {
            get
            {
                return _PlaceOfWorship;
            }
            set
            {
                OnPlaceOfWorshipChanging(value);
                ReportPropertyChanging("PlaceOfWorship");
                _PlaceOfWorship = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PlaceOfWorship");
                OnPlaceOfWorshipChanged();
            }
        }
        private global::System.String _PlaceOfWorship;
        partial void OnPlaceOfWorshipChanging(global::System.String value);
        partial void OnPlaceOfWorshipChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PlaceOfWorshipAddress
        {
            get
            {
                return _PlaceOfWorshipAddress;
            }
            set
            {
                OnPlaceOfWorshipAddressChanging(value);
                ReportPropertyChanging("PlaceOfWorshipAddress");
                _PlaceOfWorshipAddress = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PlaceOfWorshipAddress");
                OnPlaceOfWorshipAddressChanged();
            }
        }
        private global::System.String _PlaceOfWorshipAddress;
        partial void OnPlaceOfWorshipAddressChanging(global::System.String value);
        partial void OnPlaceOfWorshipAddressChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ClergyPhoneNumber
        {
            get
            {
                return _ClergyPhoneNumber;
            }
            set
            {
                OnClergyPhoneNumberChanging(value);
                ReportPropertyChanging("ClergyPhoneNumber");
                _ClergyPhoneNumber = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ClergyPhoneNumber");
                OnClergyPhoneNumberChanged();
            }
        }
        private global::System.String _ClergyPhoneNumber;
        partial void OnClergyPhoneNumberChanging(global::System.String value);
        partial void OnClergyPhoneNumberChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ClergyEmail
        {
            get
            {
                return _ClergyEmail;
            }
            set
            {
                OnClergyEmailChanging(value);
                ReportPropertyChanging("ClergyEmail");
                _ClergyEmail = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ClergyEmail");
                OnClergyEmailChanged();
            }
        }
        private global::System.String _ClergyEmail;
        partial void OnClergyEmailChanging(global::System.String value);
        partial void OnClergyEmailChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PlaceOfWorshipPhoneNumber
        {
            get
            {
                return _PlaceOfWorshipPhoneNumber;
            }
            set
            {
                OnPlaceOfWorshipPhoneNumberChanging(value);
                ReportPropertyChanging("PlaceOfWorshipPhoneNumber");
                _PlaceOfWorshipPhoneNumber = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PlaceOfWorshipPhoneNumber");
                OnPlaceOfWorshipPhoneNumberChanged();
            }
        }
        private global::System.String _PlaceOfWorshipPhoneNumber;
        partial void OnPlaceOfWorshipPhoneNumberChanging(global::System.String value);
        partial void OnPlaceOfWorshipPhoneNumberChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PlaceOfWorshipEmail
        {
            get
            {
                return _PlaceOfWorshipEmail;
            }
            set
            {
                OnPlaceOfWorshipEmailChanging(value);
                ReportPropertyChanging("PlaceOfWorshipEmail");
                _PlaceOfWorshipEmail = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PlaceOfWorshipEmail");
                OnPlaceOfWorshipEmailChanged();
            }
        }
        private global::System.String _PlaceOfWorshipEmail;
        partial void OnPlaceOfWorshipEmailChanging(global::System.String value);
        partial void OnPlaceOfWorshipEmailChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScreenCode
        {
            get
            {
                return _ScreenCode;
            }
            set
            {
                OnScreenCodeChanging(value);
                ReportPropertyChanging("ScreenCode");
                _ScreenCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScreenCode");
                OnScreenCodeChanged();
            }
        }
        private global::System.String _ScreenCode;
        partial void OnScreenCodeChanging(global::System.String value);
        partial void OnScreenCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Personals", "FK_BioDataReligion", "BioDatas")]
        public BioData BioData
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<BioData>("Personals.FK_BioDataReligion", "BioDatas").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<BioData>("Personals.FK_BioDataReligion", "BioDatas").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<BioData> BioDataReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<BioData>("Personals.FK_BioDataReligion", "BioDatas");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<BioData>("Personals.FK_BioDataReligion", "BioDatas", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Personals", Name="Sponsor")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Sponsor : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Sponsor object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Sponsor CreateSponsor(global::System.Int32 code)
        {
            Sponsor sponsor = new Sponsor();
            sponsor.Code = code;
            return sponsor;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int32 _Code;
        partial void OnCodeChanging(global::System.Int32 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SponsorCode
        {
            get
            {
                return _SponsorCode;
            }
            set
            {
                OnSponsorCodeChanging(value);
                ReportPropertyChanging("SponsorCode");
                _SponsorCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SponsorCode");
                OnSponsorCodeChanged();
            }
        }
        private global::System.String _SponsorCode;
        partial void OnSponsorCodeChanging(global::System.String value);
        partial void OnSponsorCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountCode
        {
            get
            {
                return _AccountCode;
            }
            set
            {
                OnAccountCodeChanging(value);
                ReportPropertyChanging("AccountCode");
                _AccountCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountCode");
                OnAccountCodeChanged();
            }
        }
        private global::System.String _AccountCode;
        partial void OnAccountCodeChanging(global::System.String value);
        partial void OnAccountCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScreenCode
        {
            get
            {
                return _ScreenCode;
            }
            set
            {
                OnScreenCodeChanging(value);
                ReportPropertyChanging("ScreenCode");
                _ScreenCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScreenCode");
                OnScreenCodeChanged();
            }
        }
        private global::System.String _ScreenCode;
        partial void OnScreenCodeChanging(global::System.String value);
        partial void OnScreenCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Personals", Name="Sport")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Sport : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Sport object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Sport CreateSport(global::System.Int32 code)
        {
            Sport sport = new Sport();
            sport.Code = code;
            return sport;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int32 _Code;
        partial void OnCodeChanging(global::System.Int32 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SportCode
        {
            get
            {
                return _SportCode;
            }
            set
            {
                OnSportCodeChanging(value);
                ReportPropertyChanging("SportCode");
                _SportCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SportCode");
                OnSportCodeChanged();
            }
        }
        private global::System.String _SportCode;
        partial void OnSportCodeChanging(global::System.String value);
        partial void OnSportCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountCode
        {
            get
            {
                return _AccountCode;
            }
            set
            {
                OnAccountCodeChanging(value);
                ReportPropertyChanging("AccountCode");
                _AccountCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountCode");
                OnAccountCodeChanged();
            }
        }
        private global::System.String _AccountCode;
        partial void OnAccountCodeChanging(global::System.String value);
        partial void OnAccountCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScreenCode
        {
            get
            {
                return _ScreenCode;
            }
            set
            {
                OnScreenCodeChanging(value);
                ReportPropertyChanging("ScreenCode");
                _ScreenCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScreenCode");
                OnScreenCodeChanged();
            }
        }
        private global::System.String _ScreenCode;
        partial void OnScreenCodeChanging(global::System.String value);
        partial void OnScreenCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }

    #endregion
    
}
