//-----I'm -----------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------0
using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembl2y: EdmRelationshipAttribute("Finance", "FK_FeesDetail_Fees", "Fees", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Finance.Fee), "FeesDetail", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Finance.FeesDetail), true)]
[assembly: EdmRelationshipAttribute("Finance", "FK_PaymentPlanDetails_PaymentPlans", "PaymentPlans", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Finance.PaymentPlan), "PaymentPlanDetails", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Finance.PaymentPlanDetail), true)]

#endregion


namespace Finance
{
    #region Contexts
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class FinanceEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new FinanceEntities object using the connection string found in the 'FinanceEntities' section of the application configuration file.
        /// </summary>
        public FinanceEntities() : base("name=FinanceEntities", "FinanceEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new FinanceEntities object.
        /// </summary>
        public FinanceEntities(string connectionString) : base(connectionString, "FinanceEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        
        /// <summary>
        /// Initialize a new FinanceEntities object.
        /// </summary>
        public FinanceEntities(EntityConnection connection) : base(connection, "FinanceEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
            
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Account> Accounts
        {
            get
            {
                if ((_Accounts == null))
                {
                    _Accounts = base.CreateObjectSet<Account>("Accounts");
                }
                return _Accounts;
            }
        }
        private ObjectSet<Account> _Accounts;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<AccountSub> AccountSubs
        {
            get
            {
                if ((_AccountSubs == null))
                {
                    _AccountSubs = base.CreateObjectSet<AccountSub>("AccountSubs");
                }
                return _AccountSubs;
            }
        }
        private ObjectSet<AccountSub> _AccountSubs;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<AccountType> AccountTypes
        {
            get
            {
                if ((_AccountTypes == null))
                {
                    _AccountTypes = base.CreateObjectSet<AccountType>("AccountTypes");
                }
                return _AccountTypes;
            }
        }
        private ObjectSet<AccountType> _AccountTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<FeeAllotment> FeeAllotments
        {
            get
            {
                if ((_FeeAllotments == null))
                {
                    _FeeAllotments = base.CreateObjectSet<FeeAllotment>("FeeAllotments");
                }
                return _FeeAllotments;
            }
        }
        private ObjectSet<FeeAllotment> _FeeAllotments;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<FeeDefinition> FeeDefinitions
        {
            get
            {
                if ((_FeeDefinitions == null))
                {
                    _FeeDefinitions = base.CreateObjectSet<FeeDefinition>("FeeDefinitions");
                }
                return _FeeDefinitions;
            }
        }
        private ObjectSet<FeeDefinition> _FeeDefinitions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Fee> Fees
        {
            get
            {
                if ((_Fees == null))
                {
                    _Fees = base.CreateObjectSet<Fee>("Fees");
                }
                return _Fees;
            }
        }
        private ObjectSet<Fee> _Fees;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<FeesDetail> FeesDetails
        {
            get
            {
                if ((_FeesDetails == null))
                {
                    _FeesDetails = base.CreateObjectSet<FeesDetail>("FeesDetails");
                }
                return _FeesDetails;
            }
        }
        private ObjectSet<FeesDetail> _FeesDetails;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PaymentPlanDetail> PaymentPlanDetails
        {
            get
            {
                if ((_PaymentPlanDetails == null))
                {
                    _PaymentPlanDetails = base.CreateObjectSet<PaymentPlanDetail>("PaymentPlanDetails");
                }
                return _PaymentPlanDetails;
            }
        }
        private ObjectSet<PaymentPlanDetail> _PaymentPlanDetails;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PaymentPlan> PaymentPlans
        {
            get
            {
                if ((_PaymentPlans == null))
                {
                    _PaymentPlans = base.CreateObjectSet<PaymentPlan>("PaymentPlans");
                }
                return _PaymentPlans;
            }
        }
        private ObjectSet<PaymentPlan> _PaymentPlans;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Refund> Refunds
        {
            get
            {
                if ((_Refunds == null))
                {
                    _Refunds = base.CreateObjectSet<Refund>("Refunds");
                }
                return _Refunds;
            }
        }
        private ObjectSet<Refund> _Refunds;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Transaction> Transactions
        {
            get
            {
                if ((_Transactions == null))
                {
                    _Transactions = base.CreateObjectSet<Transaction>("Transactions");
                }
                return _Transactions;
            }
        }
        private ObjectSet<Transaction> _Transactions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TransactionsDetail> TransactionsDetails
        {
            get
            {
                if ((_TransactionsDetails == null))
                {
                    _TransactionsDetails = base.CreateObjectSet<TransactionsDetail>("TransactionsDetails");
                }
                return _TransactionsDetails;
            }
        }
        private ObjectSet<TransactionsDetail> _TransactionsDetails;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Voucher> Vouchers
        {
            get
            {
                if ((_Vouchers == null))
                {
                    _Vouchers = base.CreateObjectSet<Voucher>("Vouchers");
                }
                return _Vouchers;
            }
        }
        private ObjectSet<Voucher> _Vouchers;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Accounts EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAccounts(Account account)
        {
            base.AddObject("Accounts", account);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the AccountSubs EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAccountSubs(AccountSub accountSub)
        {
            base.AddObject("AccountSubs", accountSub);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the AccountTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAccountTypes(AccountType accountType)
        {
            base.AddObject("AccountTypes", accountType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the FeeAllotments EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFeeAllotments(FeeAllotment feeAllotment)
        {
            base.AddObject("FeeAllotments", feeAllotment);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the FeeDefinitions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFeeDefinitions(FeeDefinition feeDefinition)
        {
            base.AddObject("FeeDefinitions", feeDefinition);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Fees EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFees(Fee fee)
        {
            base.AddObject("Fees", fee);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the FeesDetails EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFeesDetails(FeesDetail feesDetail)
        {
            base.AddObject("FeesDetails", feesDetail);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PaymentPlanDetails EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPaymentPlanDetails(PaymentPlanDetail paymentPlanDetail)
        {
            base.AddObject("PaymentPlanDetails", paymentPlanDetail);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PaymentPlans EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPaymentPlans(PaymentPlan paymentPlan)
        {
            base.AddObject("PaymentPlans", paymentPlan);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Refunds EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRefunds(Refund refund)
        {
            base.AddObject("Refunds", refund);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Transactions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTransactions(Transaction transaction)
        {
            base.AddObject("Transactions", transaction);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the TransactionsDetails EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTransactionsDetails(TransactionsDetail transactionsDetail)
        {
            base.AddObject("TransactionsDetails", transactionsDetail);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Vouchers EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToVouchers(Voucher voucher)
        {
            base.AddObject("Vouchers", voucher);
        }

        #endregion
        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Account> SPAccountsDeletePermanently(Nullable<global::System.Decimal> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Decimal));
            }
    
            return base.ExecuteFunction<Account>("SPAccountsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Account> SPAccountsDeletePermanently(Nullable<global::System.Decimal> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Decimal));
            }
    
            return base.ExecuteFunction<Account>("SPAccountsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="accountTypeCode">No Metadata Documentation available.</param>
        /// <param name="accountSubCode">No Metadata Documentation available.</param>
        public ObjectResult<Account> SPAccountsInsertUpdate(Nullable<global::System.Decimal> code, global::System.String universityCode, global::System.String description, Nullable<global::System.Decimal> accountTypeCode, Nullable<global::System.Int32> accountSubCode)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Decimal));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter accountTypeCodeParameter;
            if (accountTypeCode.HasValue)
            {
                accountTypeCodeParameter = new ObjectParameter("AccountTypeCode", accountTypeCode);
            }
            else
            {
                accountTypeCodeParameter = new ObjectParameter("AccountTypeCode", typeof(global::System.Decimal));
            }
    
            ObjectParameter accountSubCodeParameter;
            if (accountSubCode.HasValue)
            {
                accountSubCodeParameter = new ObjectParameter("AccountSubCode", accountSubCode);
            }
            else
            {
                accountSubCodeParameter = new ObjectParameter("AccountSubCode", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Account>("SPAccountsInsertUpdate", codeParameter, universityCodeParameter, descriptionParameter, accountTypeCodeParameter, accountSubCodeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="accountTypeCode">No Metadata Documentation available.</param>
        /// <param name="accountSubCode">No Metadata Documentation available.</param>
        public ObjectResult<Account> SPAccountsInsertUpdate(Nullable<global::System.Decimal> code, global::System.String universityCode, global::System.String description, Nullable<global::System.Decimal> accountTypeCode, Nullable<global::System.Int32> accountSubCode, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Decimal));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter accountTypeCodeParameter;
            if (accountTypeCode.HasValue)
            {
                accountTypeCodeParameter = new ObjectParameter("AccountTypeCode", accountTypeCode);
            }
            else
            {
                accountTypeCodeParameter = new ObjectParameter("AccountTypeCode", typeof(global::System.Decimal));
            }
    
            ObjectParameter accountSubCodeParameter;
            if (accountSubCode.HasValue)
            {
                accountSubCodeParameter = new ObjectParameter("AccountSubCode", accountSubCode);
            }
            else
            {
                accountSubCodeParameter = new ObjectParameter("AccountSubCode", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<Account>("SPAccountsInsertUpdate", mergeOption, codeParameter, universityCodeParameter, descriptionParameter, accountTypeCodeParameter, accountSubCodeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        public ObjectResult<Account> SPAccountsSelect(Nullable<global::System.Decimal> code, global::System.String universityCode)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Decimal));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Account>("SPAccountsSelect", codeParameter, universityCodeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        public ObjectResult<Account> SPAccountsSelect(Nullable<global::System.Decimal> code, global::System.String universityCode, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Decimal));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Account>("SPAccountsSelect", mergeOption, codeParameter, universityCodeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<AccountSub> SPAccountSubDeletePermanently(Nullable<global::System.Int32> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<AccountSub>("SPAccountSubDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<AccountSub> SPAccountSubDeletePermanently(Nullable<global::System.Int32> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<AccountSub>("SPAccountSubDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="descriptionCode">No Metadata Documentation available.</param>
        /// <param name="parameterCode">No Metadata Documentation available.</param>
        public ObjectResult<AccountSub> SPAccountSubInsertUpdate(Nullable<global::System.Int32> code, global::System.String universityCode, global::System.String description, global::System.String descriptionCode, global::System.String parameterCode)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter descriptionCodeParameter;
            if (descriptionCode != null)
            {
                descriptionCodeParameter = new ObjectParameter("DescriptionCode", descriptionCode);
            }
            else
            {
                descriptionCodeParameter = new ObjectParameter("DescriptionCode", typeof(global::System.String));
            }
    
            ObjectParameter parameterCodeParameter;
            if (parameterCode != null)
            {
                parameterCodeParameter = new ObjectParameter("ParameterCode", parameterCode);
            }
            else
            {
                parameterCodeParameter = new ObjectParameter("ParameterCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<AccountSub>("SPAccountSubInsertUpdate", codeParameter, universityCodeParameter, descriptionParameter, descriptionCodeParameter, parameterCodeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="descriptionCode">No Metadata Documentation available.</param>
        /// <param name="parameterCode">No Metadata Documentation available.</param>
        public ObjectResult<AccountSub> SPAccountSubInsertUpdate(Nullable<global::System.Int32> code, global::System.String universityCode, global::System.String description, global::System.String descriptionCode, global::System.String parameterCode, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter descriptionCodeParameter;
            if (descriptionCode != null)
            {
                descriptionCodeParameter = new ObjectParameter("DescriptionCode", descriptionCode);
            }
            else
            {
                descriptionCodeParameter = new ObjectParameter("DescriptionCode", typeof(global::System.String));
            }
    
            ObjectParameter parameterCodeParameter;
            if (parameterCode != null)
            {
                parameterCodeParameter = new ObjectParameter("ParameterCode", parameterCode);
            }
            else
            {
                parameterCodeParameter = new ObjectParameter("ParameterCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<AccountSub>("SPAccountSubInsertUpdate", mergeOption, codeParameter, universityCodeParameter, descriptionParameter, descriptionCodeParameter, parameterCodeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        public ObjectResult<AccountSub> SPAccountSubSelect(Nullable<global::System.Int32> code, global::System.String universityCode)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<AccountSub>("SPAccountSubSelect", codeParameter, universityCodeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        public ObjectResult<AccountSub> SPAccountSubSelect(Nullable<global::System.Int32> code, global::System.String universityCode, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int32));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<AccountSub>("SPAccountSubSelect", mergeOption, codeParameter, universityCodeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<AccountType> SPAccountTypesDeletePermanently(Nullable<global::System.Decimal> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Decimal));
            }
    
            return base.ExecuteFunction<AccountType>("SPAccountTypesDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<AccountType> SPAccountTypesDeletePermanently(Nullable<global::System.Decimal> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Decimal));
            }
    
            return base.ExecuteFunction<AccountType>("SPAccountTypesDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="descriptionCode">No Metadata Documentation available.</param>
        /// <param name="accountSubCode">No Metadata Documentation available.</param>
        public ObjectResult<AccountType> SPAccountTypesInsertUpdate(Nullable<global::System.Decimal> code, global::System.String universityCode, global::System.String description, global::System.String descriptionCode, global::System.String accountSubCode)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Decimal));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter descriptionCodeParameter;
            if (descriptionCode != null)
            {
                descriptionCodeParameter = new ObjectParameter("DescriptionCode", descriptionCode);
            }
            else
            {
                descriptionCodeParameter = new ObjectParameter("DescriptionCode", typeof(global::System.String));
            }
    
            ObjectParameter accountSubCodeParameter;
            if (accountSubCode != null)
            {
                accountSubCodeParameter = new ObjectParameter("AccountSubCode", accountSubCode);
            }
            else
            {
                accountSubCodeParameter = new ObjectParameter("AccountSubCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<AccountType>("SPAccountTypesInsertUpdate", codeParameter, universityCodeParameter, descriptionParameter, descriptionCodeParameter, accountSubCodeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="descriptionCode">No Metadata Documentation available.</param>
        /// <param name="accountSubCode">No Metadata Documentation available.</param>
        public ObjectResult<AccountType> SPAccountTypesInsertUpdate(Nullable<global::System.Decimal> code, global::System.String universityCode, global::System.String description, global::System.String descriptionCode, global::System.String accountSubCode, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Decimal));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter descriptionCodeParameter;
            if (descriptionCode != null)
            {
                descriptionCodeParameter = new ObjectParameter("DescriptionCode", descriptionCode);
            }
            else
            {
                descriptionCodeParameter = new ObjectParameter("DescriptionCode", typeof(global::System.String));
            }
    
            ObjectParameter accountSubCodeParameter;
            if (accountSubCode != null)
            {
                accountSubCodeParameter = new ObjectParameter("AccountSubCode", accountSubCode);
            }
            else
            {
                accountSubCodeParameter = new ObjectParameter("AccountSubCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<AccountType>("SPAccountTypesInsertUpdate", mergeOption, codeParameter, universityCodeParameter, descriptionParameter, descriptionCodeParameter, accountSubCodeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        public ObjectResult<AccountType> SPAccountTypesSelect(Nullable<global::System.Decimal> code, global::System.String universityCode)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Decimal));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<AccountType>("SPAccountTypesSelect", codeParameter, universityCodeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        public ObjectResult<AccountType> SPAccountTypesSelect(Nullable<global::System.Decimal> code, global::System.String universityCode, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Decimal));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<AccountType>("SPAccountTypesSelect", mergeOption, codeParameter, universityCodeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<FeeAllotment> SPFeeAllotmentDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<FeeAllotment>("SPFeeAllotmentDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<FeeAllotment> SPFeeAllotmentDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<FeeAllotment>("SPFeeAllotmentDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<FeeAllotment> SPFeeAllotmentDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<FeeAllotment>("SPFeeAllotmentDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<FeeAllotment> SPFeeAllotmentDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<FeeAllotment>("SPFeeAllotmentDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="levelCode">No Metadata Documentation available.</param>
        /// <param name="entryMode">No Metadata Documentation available.</param>
        /// <param name="studyMode">No Metadata Documentation available.</param>
        /// <param name="sessionCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="feeDefinitionCode">No Metadata Documentation available.</param>
        /// <param name="amount">No Metadata Documentation available.</param>
        /// <param name="discountPercentage">No Metadata Documentation available.</param>
        /// <param name="approved">No Metadata Documentation available.</param>
        /// <param name="approveBy">No Metadata Documentation available.</param>
        /// <param name="approveOn">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<FeeAllotment> SPFeeAllotmentInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, Nullable<global::System.Int32> levelCode, global::System.String entryMode, global::System.String studyMode, Nullable<global::System.Int64> sessionCode, global::System.String semesterCode, global::System.String feeDefinitionCode, Nullable<global::System.Decimal> amount, Nullable<global::System.Int32> discountPercentage, Nullable<global::System.Boolean> approved, global::System.String approveBy, Nullable<global::System.DateTime> approveOn, global::System.String notes, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter levelCodeParameter;
            if (levelCode.HasValue)
            {
                levelCodeParameter = new ObjectParameter("LevelCode", levelCode);
            }
            else
            {
                levelCodeParameter = new ObjectParameter("LevelCode", typeof(global::System.Int32));
            }
    
            ObjectParameter entryModeParameter;
            if (entryMode != null)
            {
                entryModeParameter = new ObjectParameter("EntryMode", entryMode);
            }
            else
            {
                entryModeParameter = new ObjectParameter("EntryMode", typeof(global::System.String));
            }
    
            ObjectParameter studyModeParameter;
            if (studyMode != null)
            {
                studyModeParameter = new ObjectParameter("StudyMode", studyMode);
            }
            else
            {
                studyModeParameter = new ObjectParameter("StudyMode", typeof(global::System.String));
            }
    
            ObjectParameter sessionCodeParameter;
            if (sessionCode.HasValue)
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", sessionCode);
            }
            else
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", typeof(global::System.Int64));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode != null)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.String));
            }
    
            ObjectParameter feeDefinitionCodeParameter;
            if (feeDefinitionCode != null)
            {
                feeDefinitionCodeParameter = new ObjectParameter("FeeDefinitionCode", feeDefinitionCode);
            }
            else
            {
                feeDefinitionCodeParameter = new ObjectParameter("FeeDefinitionCode", typeof(global::System.String));
            }
    
            ObjectParameter amountParameter;
            if (amount.HasValue)
            {
                amountParameter = new ObjectParameter("Amount", amount);
            }
            else
            {
                amountParameter = new ObjectParameter("Amount", typeof(global::System.Decimal));
            }
    
            ObjectParameter discountPercentageParameter;
            if (discountPercentage.HasValue)
            {
                discountPercentageParameter = new ObjectParameter("DiscountPercentage", discountPercentage);
            }
            else
            {
                discountPercentageParameter = new ObjectParameter("DiscountPercentage", typeof(global::System.Int32));
            }
    
            ObjectParameter approvedParameter;
            if (approved.HasValue)
            {
                approvedParameter = new ObjectParameter("Approved", approved);
            }
            else
            {
                approvedParameter = new ObjectParameter("Approved", typeof(global::System.Boolean));
            }
    
            ObjectParameter approveByParameter;
            if (approveBy != null)
            {
                approveByParameter = new ObjectParameter("ApproveBy", approveBy);
            }
            else
            {
                approveByParameter = new ObjectParameter("ApproveBy", typeof(global::System.String));
            }
    
            ObjectParameter approveOnParameter;
            if (approveOn.HasValue)
            {
                approveOnParameter = new ObjectParameter("ApproveOn", approveOn);
            }
            else
            {
                approveOnParameter = new ObjectParameter("ApproveOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<FeeAllotment>("SPFeeAllotmentInsertUpdate", codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, levelCodeParameter, entryModeParameter, studyModeParameter, sessionCodeParameter, semesterCodeParameter, feeDefinitionCodeParameter, amountParameter, discountPercentageParameter, approvedParameter, approveByParameter, approveOnParameter, notesParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="levelCode">No Metadata Documentation available.</param>
        /// <param name="entryMode">No Metadata Documentation available.</param>
        /// <param name="studyMode">No Metadata Documentation available.</param>
        /// <param name="sessionCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="feeDefinitionCode">No Metadata Documentation available.</param>
        /// <param name="amount">No Metadata Documentation available.</param>
        /// <param name="discountPercentage">No Metadata Documentation available.</param>
        /// <param name="approved">No Metadata Documentation available.</param>
        /// <param name="approveBy">No Metadata Documentation available.</param>
        /// <param name="approveOn">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<FeeAllotment> SPFeeAllotmentInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, Nullable<global::System.Int32> levelCode, global::System.String entryMode, global::System.String studyMode, Nullable<global::System.Int64> sessionCode, global::System.String semesterCode, global::System.String feeDefinitionCode, Nullable<global::System.Decimal> amount, Nullable<global::System.Int32> discountPercentage, Nullable<global::System.Boolean> approved, global::System.String approveBy, Nullable<global::System.DateTime> approveOn, global::System.String notes, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter levelCodeParameter;
            if (levelCode.HasValue)
            {
                levelCodeParameter = new ObjectParameter("LevelCode", levelCode);
            }
            else
            {
                levelCodeParameter = new ObjectParameter("LevelCode", typeof(global::System.Int32));
            }
    
            ObjectParameter entryModeParameter;
            if (entryMode != null)
            {
                entryModeParameter = new ObjectParameter("EntryMode", entryMode);
            }
            else
            {
                entryModeParameter = new ObjectParameter("EntryMode", typeof(global::System.String));
            }
    
            ObjectParameter studyModeParameter;
            if (studyMode != null)
            {
                studyModeParameter = new ObjectParameter("StudyMode", studyMode);
            }
            else
            {
                studyModeParameter = new ObjectParameter("StudyMode", typeof(global::System.String));
            }
    
            ObjectParameter sessionCodeParameter;
            if (sessionCode.HasValue)
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", sessionCode);
            }
            else
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", typeof(global::System.Int64));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode != null)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.String));
            }
    
            ObjectParameter feeDefinitionCodeParameter;
            if (feeDefinitionCode != null)
            {
                feeDefinitionCodeParameter = new ObjectParameter("FeeDefinitionCode", feeDefinitionCode);
            }
            else
            {
                feeDefinitionCodeParameter = new ObjectParameter("FeeDefinitionCode", typeof(global::System.String));
            }
    
            ObjectParameter amountParameter;
            if (amount.HasValue)
            {
                amountParameter = new ObjectParameter("Amount", amount);
            }
            else
            {
                amountParameter = new ObjectParameter("Amount", typeof(global::System.Decimal));
            }
    
            ObjectParameter discountPercentageParameter;
            if (discountPercentage.HasValue)
            {
                discountPercentageParameter = new ObjectParameter("DiscountPercentage", discountPercentage);
            }
            else
            {
                discountPercentageParameter = new ObjectParameter("DiscountPercentage", typeof(global::System.Int32));
            }
    
            ObjectParameter approvedParameter;
            if (approved.HasValue)
            {
                approvedParameter = new ObjectParameter("Approved", approved);
            }
            else
            {
                approvedParameter = new ObjectParameter("Approved", typeof(global::System.Boolean));
            }
    
            ObjectParameter approveByParameter;
            if (approveBy != null)
            {
                approveByParameter = new ObjectParameter("ApproveBy", approveBy);
            }
            else
            {
                approveByParameter = new ObjectParameter("ApproveBy", typeof(global::System.String));
            }
    
            ObjectParameter approveOnParameter;
            if (approveOn.HasValue)
            {
                approveOnParameter = new ObjectParameter("ApproveOn", approveOn);
            }
            else
            {
                approveOnParameter = new ObjectParameter("ApproveOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<FeeAllotment>("SPFeeAllotmentInsertUpdate", mergeOption, codeParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, levelCodeParameter, entryModeParameter, studyModeParameter, sessionCodeParameter, semesterCodeParameter, feeDefinitionCodeParameter, amountParameter, discountPercentageParameter, approvedParameter, approveByParameter, approveOnParameter, notesParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<FeeAllotment> SPFeeAllotmentSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<FeeAllotment>("SPFeeAllotmentSelect", codeParameter, universityCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<FeeAllotment> SPFeeAllotmentSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<FeeAllotment>("SPFeeAllotmentSelect", mergeOption, codeParameter, universityCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<FeeDefinition> SPFeeDefinitionDeletePermanently(global::System.String code)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<FeeDefinition>("SPFeeDefinitionDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<FeeDefinition> SPFeeDefinitionDeletePermanently(global::System.String code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<FeeDefinition>("SPFeeDefinitionDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="feeStatusCode">No Metadata Documentation available.</param>
        public ObjectResult<FeeDefinition> SPFeeDefinitionInsertUpdate(global::System.String code, global::System.String universityCode, global::System.String description, global::System.String feeStatusCode)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter feeStatusCodeParameter;
            if (feeStatusCode != null)
            {
                feeStatusCodeParameter = new ObjectParameter("FeeStatusCode", feeStatusCode);
            }
            else
            {
                feeStatusCodeParameter = new ObjectParameter("FeeStatusCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<FeeDefinition>("SPFeeDefinitionInsertUpdate", codeParameter, universityCodeParameter, descriptionParameter, feeStatusCodeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="feeStatusCode">No Metadata Documentation available.</param>
        public ObjectResult<FeeDefinition> SPFeeDefinitionInsertUpdate(global::System.String code, global::System.String universityCode, global::System.String description, global::System.String feeStatusCode, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter feeStatusCodeParameter;
            if (feeStatusCode != null)
            {
                feeStatusCodeParameter = new ObjectParameter("FeeStatusCode", feeStatusCode);
            }
            else
            {
                feeStatusCodeParameter = new ObjectParameter("FeeStatusCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<FeeDefinition>("SPFeeDefinitionInsertUpdate", mergeOption, codeParameter, universityCodeParameter, descriptionParameter, feeStatusCodeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        public ObjectResult<FeeDefinition> SPFeeDefinitionSelect(global::System.String code, global::System.String universityCode)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<FeeDefinition>("SPFeeDefinitionSelect", codeParameter, universityCodeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        public ObjectResult<FeeDefinition> SPFeeDefinitionSelect(global::System.String code, global::System.String universityCode, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code != null)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.String));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<FeeDefinition>("SPFeeDefinitionSelect", mergeOption, codeParameter, universityCodeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Fee> SPFeesDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Fee>("SPFeesDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Fee> SPFeesDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Fee>("SPFeesDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Fee> SPFeesDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Fee>("SPFeesDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Fee> SPFeesDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Fee>("SPFeesDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<FeesDetail> SPFeesDetailDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<FeesDetail>("SPFeesDetailDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<FeesDetail> SPFeesDetailDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<FeesDetail>("SPFeesDetailDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="matricNo">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="levelCode">No Metadata Documentation available.</param>
        /// <param name="feesCode">No Metadata Documentation available.</param>
        /// <param name="feeDefinitionCode">No Metadata Documentation available.</param>
        /// <param name="feeAllotmentCode">No Metadata Documentation available.</param>
        /// <param name="amount">No Metadata Documentation available.</param>
        /// <param name="extraDiscount">No Metadata Documentation available.</param>
        /// <param name="finalAmount">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<FeesDetail> SPFeesDetailInsertUpdate(Nullable<global::System.Int64> code, global::System.String matricNo, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, Nullable<global::System.Int32> levelCode, Nullable<global::System.Int64> feesCode, global::System.String feeDefinitionCode, Nullable<global::System.Int64> feeAllotmentCode, Nullable<global::System.Decimal> amount, Nullable<global::System.Int32> extraDiscount, Nullable<global::System.Decimal> finalAmount, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter matricNoParameter;
            if (matricNo != null)
            {
                matricNoParameter = new ObjectParameter("MatricNo", matricNo);
            }
            else
            {
                matricNoParameter = new ObjectParameter("MatricNo", typeof(global::System.String));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter levelCodeParameter;
            if (levelCode.HasValue)
            {
                levelCodeParameter = new ObjectParameter("LevelCode", levelCode);
            }
            else
            {
                levelCodeParameter = new ObjectParameter("LevelCode", typeof(global::System.Int32));
            }
    
            ObjectParameter feesCodeParameter;
            if (feesCode.HasValue)
            {
                feesCodeParameter = new ObjectParameter("FeesCode", feesCode);
            }
            else
            {
                feesCodeParameter = new ObjectParameter("FeesCode", typeof(global::System.Int64));
            }
    
            ObjectParameter feeDefinitionCodeParameter;
            if (feeDefinitionCode != null)
            {
                feeDefinitionCodeParameter = new ObjectParameter("FeeDefinitionCode", feeDefinitionCode);
            }
            else
            {
                feeDefinitionCodeParameter = new ObjectParameter("FeeDefinitionCode", typeof(global::System.String));
            }
    
            ObjectParameter feeAllotmentCodeParameter;
            if (feeAllotmentCode.HasValue)
            {
                feeAllotmentCodeParameter = new ObjectParameter("FeeAllotmentCode", feeAllotmentCode);
            }
            else
            {
                feeAllotmentCodeParameter = new ObjectParameter("FeeAllotmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter amountParameter;
            if (amount.HasValue)
            {
                amountParameter = new ObjectParameter("Amount", amount);
            }
            else
            {
                amountParameter = new ObjectParameter("Amount", typeof(global::System.Decimal));
            }
    
            ObjectParameter extraDiscountParameter;
            if (extraDiscount.HasValue)
            {
                extraDiscountParameter = new ObjectParameter("ExtraDiscount", extraDiscount);
            }
            else
            {
                extraDiscountParameter = new ObjectParameter("ExtraDiscount", typeof(global::System.Int32));
            }
    
            ObjectParameter finalAmountParameter;
            if (finalAmount.HasValue)
            {
                finalAmountParameter = new ObjectParameter("FinalAmount", finalAmount);
            }
            else
            {
                finalAmountParameter = new ObjectParameter("FinalAmount", typeof(global::System.Decimal));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<FeesDetail>("SPFeesDetailInsertUpdate", codeParameter, matricNoParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, levelCodeParameter, feesCodeParameter, feeDefinitionCodeParameter, feeAllotmentCodeParameter, amountParameter, extraDiscountParameter, finalAmountParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="matricNo">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="levelCode">No Metadata Documentation available.</param>
        /// <param name="feesCode">No Metadata Documentation available.</param>
        /// <param name="feeDefinitionCode">No Metadata Documentation available.</param>
        /// <param name="feeAllotmentCode">No Metadata Documentation available.</param>
        /// <param name="amount">No Metadata Documentation available.</param>
        /// <param name="extraDiscount">No Metadata Documentation available.</param>
        /// <param name="finalAmount">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<FeesDetail> SPFeesDetailInsertUpdate(Nullable<global::System.Int64> code, global::System.String matricNo, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, Nullable<global::System.Int32> levelCode, Nullable<global::System.Int64> feesCode, global::System.String feeDefinitionCode, Nullable<global::System.Int64> feeAllotmentCode, Nullable<global::System.Decimal> amount, Nullable<global::System.Int32> extraDiscount, Nullable<global::System.Decimal> finalAmount, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter matricNoParameter;
            if (matricNo != null)
            {
                matricNoParameter = new ObjectParameter("MatricNo", matricNo);
            }
            else
            {
                matricNoParameter = new ObjectParameter("MatricNo", typeof(global::System.String));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter levelCodeParameter;
            if (levelCode.HasValue)
            {
                levelCodeParameter = new ObjectParameter("LevelCode", levelCode);
            }
            else
            {
                levelCodeParameter = new ObjectParameter("LevelCode", typeof(global::System.Int32));
            }
    
            ObjectParameter feesCodeParameter;
            if (feesCode.HasValue)
            {
                feesCodeParameter = new ObjectParameter("FeesCode", feesCode);
            }
            else
            {
                feesCodeParameter = new ObjectParameter("FeesCode", typeof(global::System.Int64));
            }
    
            ObjectParameter feeDefinitionCodeParameter;
            if (feeDefinitionCode != null)
            {
                feeDefinitionCodeParameter = new ObjectParameter("FeeDefinitionCode", feeDefinitionCode);
            }
            else
            {
                feeDefinitionCodeParameter = new ObjectParameter("FeeDefinitionCode", typeof(global::System.String));
            }
    
            ObjectParameter feeAllotmentCodeParameter;
            if (feeAllotmentCode.HasValue)
            {
                feeAllotmentCodeParameter = new ObjectParameter("FeeAllotmentCode", feeAllotmentCode);
            }
            else
            {
                feeAllotmentCodeParameter = new ObjectParameter("FeeAllotmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter amountParameter;
            if (amount.HasValue)
            {
                amountParameter = new ObjectParameter("Amount", amount);
            }
            else
            {
                amountParameter = new ObjectParameter("Amount", typeof(global::System.Decimal));
            }
    
            ObjectParameter extraDiscountParameter;
            if (extraDiscount.HasValue)
            {
                extraDiscountParameter = new ObjectParameter("ExtraDiscount", extraDiscount);
            }
            else
            {
                extraDiscountParameter = new ObjectParameter("ExtraDiscount", typeof(global::System.Int32));
            }
    
            ObjectParameter finalAmountParameter;
            if (finalAmount.HasValue)
            {
                finalAmountParameter = new ObjectParameter("FinalAmount", finalAmount);
            }
            else
            {
                finalAmountParameter = new ObjectParameter("FinalAmount", typeof(global::System.Decimal));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<FeesDetail>("SPFeesDetailInsertUpdate", mergeOption, codeParameter, matricNoParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, levelCodeParameter, feesCodeParameter, feeDefinitionCodeParameter, feeAllotmentCodeParameter, amountParameter, extraDiscountParameter, finalAmountParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<FeesDetail> SPFeesDetailSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<FeesDetail>("SPFeesDetailSelect", codeParameter, universityCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<FeesDetail> SPFeesDetailSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<FeesDetail>("SPFeesDetailSelect", mergeOption, codeParameter, universityCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="matricNo">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="levelCode">No Metadata Documentation available.</param>
        /// <param name="sessionCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="accountTitle">No Metadata Documentation available.</param>
        /// <param name="accountNo">No Metadata Documentation available.</param>
        /// <param name="bankCode">No Metadata Documentation available.</param>
        /// <param name="bankBranch">No Metadata Documentation available.</param>
        /// <param name="paymentMode">No Metadata Documentation available.</param>
        /// <param name="dateX">No Metadata Documentation available.</param>
        /// <param name="amount">No Metadata Documentation available.</param>
        /// <param name="balance">No Metadata Documentation available.</param>
        /// <param name="paymentStatus">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Fee> SPFeesInsertUpdate(Nullable<global::System.Int64> code, global::System.String matricNo, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, Nullable<global::System.Int32> levelCode, Nullable<global::System.Int64> sessionCode, global::System.String semesterCode, global::System.String accountTitle, global::System.String accountNo, global::System.String bankCode, global::System.String bankBranch, global::System.String paymentMode, Nullable<global::System.DateTime> dateX, Nullable<global::System.Decimal> amount, Nullable<global::System.Decimal> balance, global::System.String paymentStatus, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter matricNoParameter;
            if (matricNo != null)
            {
                matricNoParameter = new ObjectParameter("MatricNo", matricNo);
            }
            else
            {
                matricNoParameter = new ObjectParameter("MatricNo", typeof(global::System.String));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter levelCodeParameter;
            if (levelCode.HasValue)
            {
                levelCodeParameter = new ObjectParameter("LevelCode", levelCode);
            }
            else
            {
                levelCodeParameter = new ObjectParameter("LevelCode", typeof(global::System.Int32));
            }
    
            ObjectParameter sessionCodeParameter;
            if (sessionCode.HasValue)
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", sessionCode);
            }
            else
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", typeof(global::System.Int64));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode != null)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.String));
            }
    
            ObjectParameter accountTitleParameter;
            if (accountTitle != null)
            {
                accountTitleParameter = new ObjectParameter("AccountTitle", accountTitle);
            }
            else
            {
                accountTitleParameter = new ObjectParameter("AccountTitle", typeof(global::System.String));
            }
    
            ObjectParameter accountNoParameter;
            if (accountNo != null)
            {
                accountNoParameter = new ObjectParameter("AccountNo", accountNo);
            }
            else
            {
                accountNoParameter = new ObjectParameter("AccountNo", typeof(global::System.String));
            }
    
            ObjectParameter bankCodeParameter;
            if (bankCode != null)
            {
                bankCodeParameter = new ObjectParameter("BankCode", bankCode);
            }
            else
            {
                bankCodeParameter = new ObjectParameter("BankCode", typeof(global::System.String));
            }
    
            ObjectParameter bankBranchParameter;
            if (bankBranch != null)
            {
                bankBranchParameter = new ObjectParameter("BankBranch", bankBranch);
            }
            else
            {
                bankBranchParameter = new ObjectParameter("BankBranch", typeof(global::System.String));
            }
    
            ObjectParameter paymentModeParameter;
            if (paymentMode != null)
            {
                paymentModeParameter = new ObjectParameter("PaymentMode", paymentMode);
            }
            else
            {
                paymentModeParameter = new ObjectParameter("PaymentMode", typeof(global::System.String));
            }
    
            ObjectParameter dateXParameter;
            if (dateX.HasValue)
            {
                dateXParameter = new ObjectParameter("DateX", dateX);
            }
            else
            {
                dateXParameter = new ObjectParameter("DateX", typeof(global::System.DateTime));
            }
    
            ObjectParameter amountParameter;
            if (amount.HasValue)
            {
                amountParameter = new ObjectParameter("Amount", amount);
            }
            else
            {
                amountParameter = new ObjectParameter("Amount", typeof(global::System.Decimal));
            }
    
            ObjectParameter balanceParameter;
            if (balance.HasValue)
            {
                balanceParameter = new ObjectParameter("Balance", balance);
            }
            else
            {
                balanceParameter = new ObjectParameter("Balance", typeof(global::System.Decimal));
            }
    
            ObjectParameter paymentStatusParameter;
            if (paymentStatus != null)
            {
                paymentStatusParameter = new ObjectParameter("PaymentStatus", paymentStatus);
            }
            else
            {
                paymentStatusParameter = new ObjectParameter("PaymentStatus", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Fee>("SPFeesInsertUpdate", codeParameter, matricNoParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, levelCodeParameter, sessionCodeParameter, semesterCodeParameter, accountTitleParameter, accountNoParameter, bankCodeParameter, bankBranchParameter, paymentModeParameter, dateXParameter, amountParameter, balanceParameter, paymentStatusParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="matricNo">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="levelCode">No Metadata Documentation available.</param>
        /// <param name="sessionCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="accountTitle">No Metadata Documentation available.</param>
        /// <param name="accountNo">No Metadata Documentation available.</param>
        /// <param name="bankCode">No Metadata Documentation available.</param>
        /// <param name="bankBranch">No Metadata Documentation available.</param>
        /// <param name="paymentMode">No Metadata Documentation available.</param>
        /// <param name="dateX">No Metadata Documentation available.</param>
        /// <param name="amount">No Metadata Documentation available.</param>
        /// <param name="balance">No Metadata Documentation available.</param>
        /// <param name="paymentStatus">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Fee> SPFeesInsertUpdate(Nullable<global::System.Int64> code, global::System.String matricNo, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, Nullable<global::System.Int32> levelCode, Nullable<global::System.Int64> sessionCode, global::System.String semesterCode, global::System.String accountTitle, global::System.String accountNo, global::System.String bankCode, global::System.String bankBranch, global::System.String paymentMode, Nullable<global::System.DateTime> dateX, Nullable<global::System.Decimal> amount, Nullable<global::System.Decimal> balance, global::System.String paymentStatus, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter matricNoParameter;
            if (matricNo != null)
            {
                matricNoParameter = new ObjectParameter("MatricNo", matricNo);
            }
            else
            {
                matricNoParameter = new ObjectParameter("MatricNo", typeof(global::System.String));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter levelCodeParameter;
            if (levelCode.HasValue)
            {
                levelCodeParameter = new ObjectParameter("LevelCode", levelCode);
            }
            else
            {
                levelCodeParameter = new ObjectParameter("LevelCode", typeof(global::System.Int32));
            }
    
            ObjectParameter sessionCodeParameter;
            if (sessionCode.HasValue)
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", sessionCode);
            }
            else
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", typeof(global::System.Int64));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode != null)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.String));
            }
    
            ObjectParameter accountTitleParameter;
            if (accountTitle != null)
            {
                accountTitleParameter = new ObjectParameter("AccountTitle", accountTitle);
            }
            else
            {
                accountTitleParameter = new ObjectParameter("AccountTitle", typeof(global::System.String));
            }
    
            ObjectParameter accountNoParameter;
            if (accountNo != null)
            {
                accountNoParameter = new ObjectParameter("AccountNo", accountNo);
            }
            else
            {
                accountNoParameter = new ObjectParameter("AccountNo", typeof(global::System.String));
            }
    
            ObjectParameter bankCodeParameter;
            if (bankCode != null)
            {
                bankCodeParameter = new ObjectParameter("BankCode", bankCode);
            }
            else
            {
                bankCodeParameter = new ObjectParameter("BankCode", typeof(global::System.String));
            }
    
            ObjectParameter bankBranchParameter;
            if (bankBranch != null)
            {
                bankBranchParameter = new ObjectParameter("BankBranch", bankBranch);
            }
            else
            {
                bankBranchParameter = new ObjectParameter("BankBranch", typeof(global::System.String));
            }
    
            ObjectParameter paymentModeParameter;
            if (paymentMode != null)
            {
                paymentModeParameter = new ObjectParameter("PaymentMode", paymentMode);
            }
            else
            {
                paymentModeParameter = new ObjectParameter("PaymentMode", typeof(global::System.String));
            }
    
            ObjectParameter dateXParameter;
            if (dateX.HasValue)
            {
                dateXParameter = new ObjectParameter("DateX", dateX);
            }
            else
            {
                dateXParameter = new ObjectParameter("DateX", typeof(global::System.DateTime));
            }
    
            ObjectParameter amountParameter;
            if (amount.HasValue)
            {
                amountParameter = new ObjectParameter("Amount", amount);
            }
            else
            {
                amountParameter = new ObjectParameter("Amount", typeof(global::System.Decimal));
            }
    
            ObjectParameter balanceParameter;
            if (balance.HasValue)
            {
                balanceParameter = new ObjectParameter("Balance", balance);
            }
            else
            {
                balanceParameter = new ObjectParameter("Balance", typeof(global::System.Decimal));
            }
    
            ObjectParameter paymentStatusParameter;
            if (paymentStatus != null)
            {
                paymentStatusParameter = new ObjectParameter("PaymentStatus", paymentStatus);
            }
            else
            {
                paymentStatusParameter = new ObjectParameter("PaymentStatus", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Fee>("SPFeesInsertUpdate", mergeOption, codeParameter, matricNoParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, levelCodeParameter, sessionCodeParameter, semesterCodeParameter, accountTitleParameter, accountNoParameter, bankCodeParameter, bankBranchParameter, paymentModeParameter, dateXParameter, amountParameter, balanceParameter, paymentStatusParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Fee> SPFeesSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Fee>("SPFeesSelect", codeParameter, universityCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Fee> SPFeesSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Fee>("SPFeesSelect", mergeOption, codeParameter, universityCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<PaymentPlanDetail> SPPaymentPlanDetailsDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<PaymentPlanDetail>("SPPaymentPlanDetailsDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<PaymentPlanDetail> SPPaymentPlanDetailsDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<PaymentPlanDetail>("SPPaymentPlanDetailsDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<PaymentPlanDetail> SPPaymentPlanDetailsDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<PaymentPlanDetail>("SPPaymentPlanDetailsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<PaymentPlanDetail> SPPaymentPlanDetailsDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<PaymentPlanDetail>("SPPaymentPlanDetailsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="paymentPlanCode">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="amount">No Metadata Documentation available.</param>
        /// <param name="discountedAmount">No Metadata Documentation available.</param>
        /// <param name="discountedPercentage">No Metadata Documentation available.</param>
        /// <param name="total">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<PaymentPlanDetail> SPPaymentPlanDetailsInsertUpdate(Nullable<global::System.Int64> code, Nullable<global::System.Int64> paymentPlanCode, global::System.String description, Nullable<global::System.Decimal> amount, Nullable<global::System.Decimal> discountedAmount, Nullable<global::System.Int32> discountedPercentage, Nullable<global::System.Decimal> total, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter paymentPlanCodeParameter;
            if (paymentPlanCode.HasValue)
            {
                paymentPlanCodeParameter = new ObjectParameter("PaymentPlanCode", paymentPlanCode);
            }
            else
            {
                paymentPlanCodeParameter = new ObjectParameter("PaymentPlanCode", typeof(global::System.Int64));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter amountParameter;
            if (amount.HasValue)
            {
                amountParameter = new ObjectParameter("Amount", amount);
            }
            else
            {
                amountParameter = new ObjectParameter("Amount", typeof(global::System.Decimal));
            }
    
            ObjectParameter discountedAmountParameter;
            if (discountedAmount.HasValue)
            {
                discountedAmountParameter = new ObjectParameter("DiscountedAmount", discountedAmount);
            }
            else
            {
                discountedAmountParameter = new ObjectParameter("DiscountedAmount", typeof(global::System.Decimal));
            }
    
            ObjectParameter discountedPercentageParameter;
            if (discountedPercentage.HasValue)
            {
                discountedPercentageParameter = new ObjectParameter("DiscountedPercentage", discountedPercentage);
            }
            else
            {
                discountedPercentageParameter = new ObjectParameter("DiscountedPercentage", typeof(global::System.Int32));
            }
    
            ObjectParameter totalParameter;
            if (total.HasValue)
            {
                totalParameter = new ObjectParameter("Total", total);
            }
            else
            {
                totalParameter = new ObjectParameter("Total", typeof(global::System.Decimal));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<PaymentPlanDetail>("SPPaymentPlanDetailsInsertUpdate", codeParameter, paymentPlanCodeParameter, descriptionParameter, amountParameter, discountedAmountParameter, discountedPercentageParameter, totalParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="paymentPlanCode">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="amount">No Metadata Documentation available.</param>
        /// <param name="discountedAmount">No Metadata Documentation available.</param>
        /// <param name="discountedPercentage">No Metadata Documentation available.</param>
        /// <param name="total">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<PaymentPlanDetail> SPPaymentPlanDetailsInsertUpdate(Nullable<global::System.Int64> code, Nullable<global::System.Int64> paymentPlanCode, global::System.String description, Nullable<global::System.Decimal> amount, Nullable<global::System.Decimal> discountedAmount, Nullable<global::System.Int32> discountedPercentage, Nullable<global::System.Decimal> total, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter paymentPlanCodeParameter;
            if (paymentPlanCode.HasValue)
            {
                paymentPlanCodeParameter = new ObjectParameter("PaymentPlanCode", paymentPlanCode);
            }
            else
            {
                paymentPlanCodeParameter = new ObjectParameter("PaymentPlanCode", typeof(global::System.Int64));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter amountParameter;
            if (amount.HasValue)
            {
                amountParameter = new ObjectParameter("Amount", amount);
            }
            else
            {
                amountParameter = new ObjectParameter("Amount", typeof(global::System.Decimal));
            }
    
            ObjectParameter discountedAmountParameter;
            if (discountedAmount.HasValue)
            {
                discountedAmountParameter = new ObjectParameter("DiscountedAmount", discountedAmount);
            }
            else
            {
                discountedAmountParameter = new ObjectParameter("DiscountedAmount", typeof(global::System.Decimal));
            }
    
            ObjectParameter discountedPercentageParameter;
            if (discountedPercentage.HasValue)
            {
                discountedPercentageParameter = new ObjectParameter("DiscountedPercentage", discountedPercentage);
            }
            else
            {
                discountedPercentageParameter = new ObjectParameter("DiscountedPercentage", typeof(global::System.Int32));
            }
    
            ObjectParameter totalParameter;
            if (total.HasValue)
            {
                totalParameter = new ObjectParameter("Total", total);
            }
            else
            {
                totalParameter = new ObjectParameter("Total", typeof(global::System.Decimal));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<PaymentPlanDetail>("SPPaymentPlanDetailsInsertUpdate", mergeOption, codeParameter, paymentPlanCodeParameter, descriptionParameter, amountParameter, discountedAmountParameter, discountedPercentageParameter, totalParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="paymentPlanCode">No Metadata Documentation available.</param>
        public ObjectResult<PaymentPlanDetail> SPPaymentPlanDetailsSelect(Nullable<global::System.Int64> code, Nullable<global::System.Int64> paymentPlanCode)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter paymentPlanCodeParameter;
            if (paymentPlanCode.HasValue)
            {
                paymentPlanCodeParameter = new ObjectParameter("PaymentPlanCode", paymentPlanCode);
            }
            else
            {
                paymentPlanCodeParameter = new ObjectParameter("PaymentPlanCode", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<PaymentPlanDetail>("SPPaymentPlanDetailsSelect", codeParameter, paymentPlanCodeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="paymentPlanCode">No Metadata Documentation available.</param>
        public ObjectResult<PaymentPlanDetail> SPPaymentPlanDetailsSelect(Nullable<global::System.Int64> code, Nullable<global::System.Int64> paymentPlanCode, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter paymentPlanCodeParameter;
            if (paymentPlanCode.HasValue)
            {
                paymentPlanCodeParameter = new ObjectParameter("PaymentPlanCode", paymentPlanCode);
            }
            else
            {
                paymentPlanCodeParameter = new ObjectParameter("PaymentPlanCode", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<PaymentPlanDetail>("SPPaymentPlanDetailsSelect", mergeOption, codeParameter, paymentPlanCodeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<PaymentPlan> SPPaymentPlansDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<PaymentPlan>("SPPaymentPlansDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<PaymentPlan> SPPaymentPlansDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<PaymentPlan>("SPPaymentPlansDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<PaymentPlan> SPPaymentPlansDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<PaymentPlan>("SPPaymentPlansDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<PaymentPlan> SPPaymentPlansDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<PaymentPlan>("SPPaymentPlansDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="sessionCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="noOfPaymentAllowed">No Metadata Documentation available.</param>
        /// <param name="dateX">No Metadata Documentation available.</param>
        /// <param name="statusCode">No Metadata Documentation available.</param>
        /// <param name="applicable">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<PaymentPlan> SPPaymentPlansInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> sessionCode, global::System.String semesterCode, Nullable<global::System.Int32> noOfPaymentAllowed, Nullable<global::System.DateTime> dateX, global::System.String statusCode, Nullable<global::System.Boolean> applicable, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter sessionCodeParameter;
            if (sessionCode.HasValue)
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", sessionCode);
            }
            else
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", typeof(global::System.Int64));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode != null)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.String));
            }
    
            ObjectParameter noOfPaymentAllowedParameter;
            if (noOfPaymentAllowed.HasValue)
            {
                noOfPaymentAllowedParameter = new ObjectParameter("NoOfPaymentAllowed", noOfPaymentAllowed);
            }
            else
            {
                noOfPaymentAllowedParameter = new ObjectParameter("NoOfPaymentAllowed", typeof(global::System.Int32));
            }
    
            ObjectParameter dateXParameter;
            if (dateX.HasValue)
            {
                dateXParameter = new ObjectParameter("DateX", dateX);
            }
            else
            {
                dateXParameter = new ObjectParameter("DateX", typeof(global::System.DateTime));
            }
    
            ObjectParameter statusCodeParameter;
            if (statusCode != null)
            {
                statusCodeParameter = new ObjectParameter("StatusCode", statusCode);
            }
            else
            {
                statusCodeParameter = new ObjectParameter("StatusCode", typeof(global::System.String));
            }
    
            ObjectParameter applicableParameter;
            if (applicable.HasValue)
            {
                applicableParameter = new ObjectParameter("Applicable", applicable);
            }
            else
            {
                applicableParameter = new ObjectParameter("Applicable", typeof(global::System.Boolean));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<PaymentPlan>("SPPaymentPlansInsertUpdate", codeParameter, universityCodeParameter, sessionCodeParameter, semesterCodeParameter, noOfPaymentAllowedParameter, dateXParameter, statusCodeParameter, applicableParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="sessionCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="noOfPaymentAllowed">No Metadata Documentation available.</param>
        /// <param name="dateX">No Metadata Documentation available.</param>
        /// <param name="statusCode">No Metadata Documentation available.</param>
        /// <param name="applicable">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<PaymentPlan> SPPaymentPlansInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> sessionCode, global::System.String semesterCode, Nullable<global::System.Int32> noOfPaymentAllowed, Nullable<global::System.DateTime> dateX, global::System.String statusCode, Nullable<global::System.Boolean> applicable, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter sessionCodeParameter;
            if (sessionCode.HasValue)
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", sessionCode);
            }
            else
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", typeof(global::System.Int64));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode != null)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.String));
            }
    
            ObjectParameter noOfPaymentAllowedParameter;
            if (noOfPaymentAllowed.HasValue)
            {
                noOfPaymentAllowedParameter = new ObjectParameter("NoOfPaymentAllowed", noOfPaymentAllowed);
            }
            else
            {
                noOfPaymentAllowedParameter = new ObjectParameter("NoOfPaymentAllowed", typeof(global::System.Int32));
            }
    
            ObjectParameter dateXParameter;
            if (dateX.HasValue)
            {
                dateXParameter = new ObjectParameter("DateX", dateX);
            }
            else
            {
                dateXParameter = new ObjectParameter("DateX", typeof(global::System.DateTime));
            }
    
            ObjectParameter statusCodeParameter;
            if (statusCode != null)
            {
                statusCodeParameter = new ObjectParameter("StatusCode", statusCode);
            }
            else
            {
                statusCodeParameter = new ObjectParameter("StatusCode", typeof(global::System.String));
            }
    
            ObjectParameter applicableParameter;
            if (applicable.HasValue)
            {
                applicableParameter = new ObjectParameter("Applicable", applicable);
            }
            else
            {
                applicableParameter = new ObjectParameter("Applicable", typeof(global::System.Boolean));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<PaymentPlan>("SPPaymentPlansInsertUpdate", mergeOption, codeParameter, universityCodeParameter, sessionCodeParameter, semesterCodeParameter, noOfPaymentAllowedParameter, dateXParameter, statusCodeParameter, applicableParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<PaymentPlan> SPPaymentPlansSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<PaymentPlan>("SPPaymentPlansSelect", codeParameter, universityCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<PaymentPlan> SPPaymentPlansSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<PaymentPlan>("SPPaymentPlansSelect", mergeOption, codeParameter, universityCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Refund> SPRefundsDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Refund>("SPRefundsDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Refund> SPRefundsDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Refund>("SPRefundsDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Refund> SPRefundsDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Refund>("SPRefundsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Refund> SPRefundsDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Refund>("SPRefundsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="matricNo">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="levelCode">No Metadata Documentation available.</param>
        /// <param name="feesCode">No Metadata Documentation available.</param>
        /// <param name="sessionCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="amount">No Metadata Documentation available.</param>
        /// <param name="refunded">No Metadata Documentation available.</param>
        /// <param name="refundedOn">No Metadata Documentation available.</param>
        /// <param name="refundedBy">No Metadata Documentation available.</param>
        /// <param name="approved">No Metadata Documentation available.</param>
        /// <param name="approveBy">No Metadata Documentation available.</param>
        /// <param name="approveOn">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Refund> SPRefundsInsertUpdate(Nullable<global::System.Int64> code, global::System.String matricNo, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, Nullable<global::System.Int32> levelCode, Nullable<global::System.Decimal> feesCode, Nullable<global::System.Int64> sessionCode, global::System.String semesterCode, Nullable<global::System.Decimal> amount, Nullable<global::System.Boolean> refunded, Nullable<global::System.DateTime> refundedOn, global::System.String refundedBy, Nullable<global::System.Boolean> approved, global::System.String approveBy, Nullable<global::System.DateTime> approveOn, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter matricNoParameter;
            if (matricNo != null)
            {
                matricNoParameter = new ObjectParameter("MatricNo", matricNo);
            }
            else
            {
                matricNoParameter = new ObjectParameter("MatricNo", typeof(global::System.String));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter levelCodeParameter;
            if (levelCode.HasValue)
            {
                levelCodeParameter = new ObjectParameter("LevelCode", levelCode);
            }
            else
            {
                levelCodeParameter = new ObjectParameter("LevelCode", typeof(global::System.Int32));
            }
    
            ObjectParameter feesCodeParameter;
            if (feesCode.HasValue)
            {
                feesCodeParameter = new ObjectParameter("FeesCode", feesCode);
            }
            else
            {
                feesCodeParameter = new ObjectParameter("FeesCode", typeof(global::System.Decimal));
            }
    
            ObjectParameter sessionCodeParameter;
            if (sessionCode.HasValue)
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", sessionCode);
            }
            else
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", typeof(global::System.Int64));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode != null)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.String));
            }
    
            ObjectParameter amountParameter;
            if (amount.HasValue)
            {
                amountParameter = new ObjectParameter("Amount", amount);
            }
            else
            {
                amountParameter = new ObjectParameter("Amount", typeof(global::System.Decimal));
            }
    
            ObjectParameter refundedParameter;
            if (refunded.HasValue)
            {
                refundedParameter = new ObjectParameter("Refunded", refunded);
            }
            else
            {
                refundedParameter = new ObjectParameter("Refunded", typeof(global::System.Boolean));
            }
    
            ObjectParameter refundedOnParameter;
            if (refundedOn.HasValue)
            {
                refundedOnParameter = new ObjectParameter("RefundedOn", refundedOn);
            }
            else
            {
                refundedOnParameter = new ObjectParameter("RefundedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter refundedByParameter;
            if (refundedBy != null)
            {
                refundedByParameter = new ObjectParameter("RefundedBy", refundedBy);
            }
            else
            {
                refundedByParameter = new ObjectParameter("RefundedBy", typeof(global::System.String));
            }
    
            ObjectParameter approvedParameter;
            if (approved.HasValue)
            {
                approvedParameter = new ObjectParameter("Approved", approved);
            }
            else
            {
                approvedParameter = new ObjectParameter("Approved", typeof(global::System.Boolean));
            }
    
            ObjectParameter approveByParameter;
            if (approveBy != null)
            {
                approveByParameter = new ObjectParameter("ApproveBy", approveBy);
            }
            else
            {
                approveByParameter = new ObjectParameter("ApproveBy", typeof(global::System.String));
            }
    
            ObjectParameter approveOnParameter;
            if (approveOn.HasValue)
            {
                approveOnParameter = new ObjectParameter("ApproveOn", approveOn);
            }
            else
            {
                approveOnParameter = new ObjectParameter("ApproveOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Refund>("SPRefundsInsertUpdate", codeParameter, matricNoParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, levelCodeParameter, feesCodeParameter, sessionCodeParameter, semesterCodeParameter, amountParameter, refundedParameter, refundedOnParameter, refundedByParameter, approvedParameter, approveByParameter, approveOnParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="matricNo">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="facultyCode">No Metadata Documentation available.</param>
        /// <param name="departmentCode">No Metadata Documentation available.</param>
        /// <param name="courseCode">No Metadata Documentation available.</param>
        /// <param name="programCode">No Metadata Documentation available.</param>
        /// <param name="levelCode">No Metadata Documentation available.</param>
        /// <param name="feesCode">No Metadata Documentation available.</param>
        /// <param name="sessionCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="amount">No Metadata Documentation available.</param>
        /// <param name="refunded">No Metadata Documentation available.</param>
        /// <param name="refundedOn">No Metadata Documentation available.</param>
        /// <param name="refundedBy">No Metadata Documentation available.</param>
        /// <param name="approved">No Metadata Documentation available.</param>
        /// <param name="approveBy">No Metadata Documentation available.</param>
        /// <param name="approveOn">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Refund> SPRefundsInsertUpdate(Nullable<global::System.Int64> code, global::System.String matricNo, global::System.String universityCode, Nullable<global::System.Int64> facultyCode, Nullable<global::System.Int64> departmentCode, Nullable<global::System.Int64> courseCode, Nullable<global::System.Int64> programCode, Nullable<global::System.Int32> levelCode, Nullable<global::System.Decimal> feesCode, Nullable<global::System.Int64> sessionCode, global::System.String semesterCode, Nullable<global::System.Decimal> amount, Nullable<global::System.Boolean> refunded, Nullable<global::System.DateTime> refundedOn, global::System.String refundedBy, Nullable<global::System.Boolean> approved, global::System.String approveBy, Nullable<global::System.DateTime> approveOn, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter matricNoParameter;
            if (matricNo != null)
            {
                matricNoParameter = new ObjectParameter("MatricNo", matricNo);
            }
            else
            {
                matricNoParameter = new ObjectParameter("MatricNo", typeof(global::System.String));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter facultyCodeParameter;
            if (facultyCode.HasValue)
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", facultyCode);
            }
            else
            {
                facultyCodeParameter = new ObjectParameter("FacultyCode", typeof(global::System.Int64));
            }
    
            ObjectParameter departmentCodeParameter;
            if (departmentCode.HasValue)
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", departmentCode);
            }
            else
            {
                departmentCodeParameter = new ObjectParameter("DepartmentCode", typeof(global::System.Int64));
            }
    
            ObjectParameter courseCodeParameter;
            if (courseCode.HasValue)
            {
                courseCodeParameter = new ObjectParameter("CourseCode", courseCode);
            }
            else
            {
                courseCodeParameter = new ObjectParameter("CourseCode", typeof(global::System.Int64));
            }
    
            ObjectParameter programCodeParameter;
            if (programCode.HasValue)
            {
                programCodeParameter = new ObjectParameter("ProgramCode", programCode);
            }
            else
            {
                programCodeParameter = new ObjectParameter("ProgramCode", typeof(global::System.Int64));
            }
    
            ObjectParameter levelCodeParameter;
            if (levelCode.HasValue)
            {
                levelCodeParameter = new ObjectParameter("LevelCode", levelCode);
            }
            else
            {
                levelCodeParameter = new ObjectParameter("LevelCode", typeof(global::System.Int32));
            }
    
            ObjectParameter feesCodeParameter;
            if (feesCode.HasValue)
            {
                feesCodeParameter = new ObjectParameter("FeesCode", feesCode);
            }
            else
            {
                feesCodeParameter = new ObjectParameter("FeesCode", typeof(global::System.Decimal));
            }
    
            ObjectParameter sessionCodeParameter;
            if (sessionCode.HasValue)
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", sessionCode);
            }
            else
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", typeof(global::System.Int64));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode != null)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.String));
            }
    
            ObjectParameter amountParameter;
            if (amount.HasValue)
            {
                amountParameter = new ObjectParameter("Amount", amount);
            }
            else
            {
                amountParameter = new ObjectParameter("Amount", typeof(global::System.Decimal));
            }
    
            ObjectParameter refundedParameter;
            if (refunded.HasValue)
            {
                refundedParameter = new ObjectParameter("Refunded", refunded);
            }
            else
            {
                refundedParameter = new ObjectParameter("Refunded", typeof(global::System.Boolean));
            }
    
            ObjectParameter refundedOnParameter;
            if (refundedOn.HasValue)
            {
                refundedOnParameter = new ObjectParameter("RefundedOn", refundedOn);
            }
            else
            {
                refundedOnParameter = new ObjectParameter("RefundedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter refundedByParameter;
            if (refundedBy != null)
            {
                refundedByParameter = new ObjectParameter("RefundedBy", refundedBy);
            }
            else
            {
                refundedByParameter = new ObjectParameter("RefundedBy", typeof(global::System.String));
            }
    
            ObjectParameter approvedParameter;
            if (approved.HasValue)
            {
                approvedParameter = new ObjectParameter("Approved", approved);
            }
            else
            {
                approvedParameter = new ObjectParameter("Approved", typeof(global::System.Boolean));
            }
    
            ObjectParameter approveByParameter;
            if (approveBy != null)
            {
                approveByParameter = new ObjectParameter("ApproveBy", approveBy);
            }
            else
            {
                approveByParameter = new ObjectParameter("ApproveBy", typeof(global::System.String));
            }
    
            ObjectParameter approveOnParameter;
            if (approveOn.HasValue)
            {
                approveOnParameter = new ObjectParameter("ApproveOn", approveOn);
            }
            else
            {
                approveOnParameter = new ObjectParameter("ApproveOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Refund>("SPRefundsInsertUpdate", mergeOption, codeParameter, matricNoParameter, universityCodeParameter, facultyCodeParameter, departmentCodeParameter, courseCodeParameter, programCodeParameter, levelCodeParameter, feesCodeParameter, sessionCodeParameter, semesterCodeParameter, amountParameter, refundedParameter, refundedOnParameter, refundedByParameter, approvedParameter, approveByParameter, approveOnParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Refund> SPRefundsSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Refund>("SPRefundsSelect", codeParameter, universityCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Refund> SPRefundsSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Refund>("SPRefundsSelect", mergeOption, codeParameter, universityCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Transaction> SPTransactionsDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Transaction>("SPTransactionsDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Transaction> SPTransactionsDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Transaction>("SPTransactionsDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Transaction> SPTransactionsDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Transaction>("SPTransactionsDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Transaction> SPTransactionsDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Transaction>("SPTransactionsDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<TransactionsDetail> SPTransactionsDetailDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<TransactionsDetail>("SPTransactionsDetailDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<TransactionsDetail> SPTransactionsDetailDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<TransactionsDetail>("SPTransactionsDetailDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="sessionCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="invoiceCode">No Metadata Documentation available.</param>
        /// <param name="itemDescription">No Metadata Documentation available.</param>
        /// <param name="quantity">No Metadata Documentation available.</param>
        /// <param name="unit">No Metadata Documentation available.</param>
        /// <param name="unitCost">No Metadata Documentation available.</param>
        /// <param name="discountPercentage">No Metadata Documentation available.</param>
        /// <param name="discountAmount">No Metadata Documentation available.</param>
        /// <param name="taxType">No Metadata Documentation available.</param>
        /// <param name="taxValue">No Metadata Documentation available.</param>
        /// <param name="totalCost">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<TransactionsDetail> SPTransactionsDetailInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> sessionCode, global::System.String semesterCode, Nullable<global::System.Decimal> invoiceCode, global::System.String itemDescription, Nullable<global::System.Int32> quantity, global::System.String unit, Nullable<global::System.Decimal> unitCost, Nullable<global::System.Decimal> discountPercentage, Nullable<global::System.Decimal> discountAmount, global::System.String taxType, Nullable<global::System.Decimal> taxValue, Nullable<global::System.Decimal> totalCost, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter sessionCodeParameter;
            if (sessionCode.HasValue)
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", sessionCode);
            }
            else
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", typeof(global::System.Int64));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode != null)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.String));
            }
    
            ObjectParameter invoiceCodeParameter;
            if (invoiceCode.HasValue)
            {
                invoiceCodeParameter = new ObjectParameter("InvoiceCode", invoiceCode);
            }
            else
            {
                invoiceCodeParameter = new ObjectParameter("InvoiceCode", typeof(global::System.Decimal));
            }
    
            ObjectParameter itemDescriptionParameter;
            if (itemDescription != null)
            {
                itemDescriptionParameter = new ObjectParameter("ItemDescription", itemDescription);
            }
            else
            {
                itemDescriptionParameter = new ObjectParameter("ItemDescription", typeof(global::System.String));
            }
    
            ObjectParameter quantityParameter;
            if (quantity.HasValue)
            {
                quantityParameter = new ObjectParameter("Quantity", quantity);
            }
            else
            {
                quantityParameter = new ObjectParameter("Quantity", typeof(global::System.Int32));
            }
    
            ObjectParameter unitParameter;
            if (unit != null)
            {
                unitParameter = new ObjectParameter("Unit", unit);
            }
            else
            {
                unitParameter = new ObjectParameter("Unit", typeof(global::System.String));
            }
    
            ObjectParameter unitCostParameter;
            if (unitCost.HasValue)
            {
                unitCostParameter = new ObjectParameter("UnitCost", unitCost);
            }
            else
            {
                unitCostParameter = new ObjectParameter("UnitCost", typeof(global::System.Decimal));
            }
    
            ObjectParameter discountPercentageParameter;
            if (discountPercentage.HasValue)
            {
                discountPercentageParameter = new ObjectParameter("DiscountPercentage", discountPercentage);
            }
            else
            {
                discountPercentageParameter = new ObjectParameter("DiscountPercentage", typeof(global::System.Decimal));
            }
    
            ObjectParameter discountAmountParameter;
            if (discountAmount.HasValue)
            {
                discountAmountParameter = new ObjectParameter("DiscountAmount", discountAmount);
            }
            else
            {
                discountAmountParameter = new ObjectParameter("DiscountAmount", typeof(global::System.Decimal));
            }
    
            ObjectParameter taxTypeParameter;
            if (taxType != null)
            {
                taxTypeParameter = new ObjectParameter("TaxType", taxType);
            }
            else
            {
                taxTypeParameter = new ObjectParameter("TaxType", typeof(global::System.String));
            }
    
            ObjectParameter taxValueParameter;
            if (taxValue.HasValue)
            {
                taxValueParameter = new ObjectParameter("TaxValue", taxValue);
            }
            else
            {
                taxValueParameter = new ObjectParameter("TaxValue", typeof(global::System.Decimal));
            }
    
            ObjectParameter totalCostParameter;
            if (totalCost.HasValue)
            {
                totalCostParameter = new ObjectParameter("TotalCost", totalCost);
            }
            else
            {
                totalCostParameter = new ObjectParameter("TotalCost", typeof(global::System.Decimal));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<TransactionsDetail>("SPTransactionsDetailInsertUpdate", codeParameter, universityCodeParameter, sessionCodeParameter, semesterCodeParameter, invoiceCodeParameter, itemDescriptionParameter, quantityParameter, unitParameter, unitCostParameter, discountPercentageParameter, discountAmountParameter, taxTypeParameter, taxValueParameter, totalCostParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="sessionCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="invoiceCode">No Metadata Documentation available.</param>
        /// <param name="itemDescription">No Metadata Documentation available.</param>
        /// <param name="quantity">No Metadata Documentation available.</param>
        /// <param name="unit">No Metadata Documentation available.</param>
        /// <param name="unitCost">No Metadata Documentation available.</param>
        /// <param name="discountPercentage">No Metadata Documentation available.</param>
        /// <param name="discountAmount">No Metadata Documentation available.</param>
        /// <param name="taxType">No Metadata Documentation available.</param>
        /// <param name="taxValue">No Metadata Documentation available.</param>
        /// <param name="totalCost">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<TransactionsDetail> SPTransactionsDetailInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> sessionCode, global::System.String semesterCode, Nullable<global::System.Decimal> invoiceCode, global::System.String itemDescription, Nullable<global::System.Int32> quantity, global::System.String unit, Nullable<global::System.Decimal> unitCost, Nullable<global::System.Decimal> discountPercentage, Nullable<global::System.Decimal> discountAmount, global::System.String taxType, Nullable<global::System.Decimal> taxValue, Nullable<global::System.Decimal> totalCost, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter sessionCodeParameter;
            if (sessionCode.HasValue)
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", sessionCode);
            }
            else
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", typeof(global::System.Int64));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode != null)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.String));
            }
    
            ObjectParameter invoiceCodeParameter;
            if (invoiceCode.HasValue)
            {
                invoiceCodeParameter = new ObjectParameter("InvoiceCode", invoiceCode);
            }
            else
            {
                invoiceCodeParameter = new ObjectParameter("InvoiceCode", typeof(global::System.Decimal));
            }
    
            ObjectParameter itemDescriptionParameter;
            if (itemDescription != null)
            {
                itemDescriptionParameter = new ObjectParameter("ItemDescription", itemDescription);
            }
            else
            {
                itemDescriptionParameter = new ObjectParameter("ItemDescription", typeof(global::System.String));
            }
    
            ObjectParameter quantityParameter;
            if (quantity.HasValue)
            {
                quantityParameter = new ObjectParameter("Quantity", quantity);
            }
            else
            {
                quantityParameter = new ObjectParameter("Quantity", typeof(global::System.Int32));
            }
    
            ObjectParameter unitParameter;
            if (unit != null)
            {
                unitParameter = new ObjectParameter("Unit", unit);
            }
            else
            {
                unitParameter = new ObjectParameter("Unit", typeof(global::System.String));
            }
    
            ObjectParameter unitCostParameter;
            if (unitCost.HasValue)
            {
                unitCostParameter = new ObjectParameter("UnitCost", unitCost);
            }
            else
            {
                unitCostParameter = new ObjectParameter("UnitCost", typeof(global::System.Decimal));
            }
    
            ObjectParameter discountPercentageParameter;
            if (discountPercentage.HasValue)
            {
                discountPercentageParameter = new ObjectParameter("DiscountPercentage", discountPercentage);
            }
            else
            {
                discountPercentageParameter = new ObjectParameter("DiscountPercentage", typeof(global::System.Decimal));
            }
    
            ObjectParameter discountAmountParameter;
            if (discountAmount.HasValue)
            {
                discountAmountParameter = new ObjectParameter("DiscountAmount", discountAmount);
            }
            else
            {
                discountAmountParameter = new ObjectParameter("DiscountAmount", typeof(global::System.Decimal));
            }
    
            ObjectParameter taxTypeParameter;
            if (taxType != null)
            {
                taxTypeParameter = new ObjectParameter("TaxType", taxType);
            }
            else
            {
                taxTypeParameter = new ObjectParameter("TaxType", typeof(global::System.String));
            }
    
            ObjectParameter taxValueParameter;
            if (taxValue.HasValue)
            {
                taxValueParameter = new ObjectParameter("TaxValue", taxValue);
            }
            else
            {
                taxValueParameter = new ObjectParameter("TaxValue", typeof(global::System.Decimal));
            }
    
            ObjectParameter totalCostParameter;
            if (totalCost.HasValue)
            {
                totalCostParameter = new ObjectParameter("TotalCost", totalCost);
            }
            else
            {
                totalCostParameter = new ObjectParameter("TotalCost", typeof(global::System.Decimal));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<TransactionsDetail>("SPTransactionsDetailInsertUpdate", mergeOption, codeParameter, universityCodeParameter, sessionCodeParameter, semesterCodeParameter, invoiceCodeParameter, itemDescriptionParameter, quantityParameter, unitParameter, unitCostParameter, discountPercentageParameter, discountAmountParameter, taxTypeParameter, taxValueParameter, totalCostParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<TransactionsDetail> SPTransactionsDetailSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<TransactionsDetail>("SPTransactionsDetailSelect", codeParameter, universityCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<TransactionsDetail> SPTransactionsDetailSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<TransactionsDetail>("SPTransactionsDetailSelect", mergeOption, codeParameter, universityCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="sessionCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="transactionActivityCode">No Metadata Documentation available.</param>
        /// <param name="invoiceTypeCode">No Metadata Documentation available.</param>
        /// <param name="lpoNo">No Metadata Documentation available.</param>
        /// <param name="poNo">No Metadata Documentation available.</param>
        /// <param name="categoryCode">No Metadata Documentation available.</param>
        /// <param name="amount">No Metadata Documentation available.</param>
        /// <param name="amountPaid">No Metadata Documentation available.</param>
        /// <param name="balance">No Metadata Documentation available.</param>
        /// <param name="total">No Metadata Documentation available.</param>
        /// <param name="companyCode">No Metadata Documentation available.</param>
        /// <param name="paymentStatus">No Metadata Documentation available.</param>
        /// <param name="dateX">No Metadata Documentation available.</param>
        /// <param name="amountInWords">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Transaction> SPTransactionsInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> sessionCode, global::System.String semesterCode, global::System.String transactionActivityCode, global::System.String invoiceTypeCode, Nullable<global::System.Decimal> lpoNo, Nullable<global::System.Decimal> poNo, global::System.String categoryCode, Nullable<global::System.Decimal> amount, Nullable<global::System.Decimal> amountPaid, Nullable<global::System.Decimal> balance, Nullable<global::System.Decimal> total, global::System.String companyCode, global::System.String paymentStatus, Nullable<global::System.DateTime> dateX, global::System.String amountInWords, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter sessionCodeParameter;
            if (sessionCode.HasValue)
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", sessionCode);
            }
            else
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", typeof(global::System.Int64));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode != null)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.String));
            }
    
            ObjectParameter transactionActivityCodeParameter;
            if (transactionActivityCode != null)
            {
                transactionActivityCodeParameter = new ObjectParameter("TransactionActivityCode", transactionActivityCode);
            }
            else
            {
                transactionActivityCodeParameter = new ObjectParameter("TransactionActivityCode", typeof(global::System.String));
            }
    
            ObjectParameter invoiceTypeCodeParameter;
            if (invoiceTypeCode != null)
            {
                invoiceTypeCodeParameter = new ObjectParameter("InvoiceTypeCode", invoiceTypeCode);
            }
            else
            {
                invoiceTypeCodeParameter = new ObjectParameter("InvoiceTypeCode", typeof(global::System.String));
            }
    
            ObjectParameter lpoNoParameter;
            if (lpoNo.HasValue)
            {
                lpoNoParameter = new ObjectParameter("LpoNo", lpoNo);
            }
            else
            {
                lpoNoParameter = new ObjectParameter("LpoNo", typeof(global::System.Decimal));
            }
    
            ObjectParameter poNoParameter;
            if (poNo.HasValue)
            {
                poNoParameter = new ObjectParameter("PoNo", poNo);
            }
            else
            {
                poNoParameter = new ObjectParameter("PoNo", typeof(global::System.Decimal));
            }
    
            ObjectParameter categoryCodeParameter;
            if (categoryCode != null)
            {
                categoryCodeParameter = new ObjectParameter("CategoryCode", categoryCode);
            }
            else
            {
                categoryCodeParameter = new ObjectParameter("CategoryCode", typeof(global::System.String));
            }
    
            ObjectParameter amountParameter;
            if (amount.HasValue)
            {
                amountParameter = new ObjectParameter("Amount", amount);
            }
            else
            {
                amountParameter = new ObjectParameter("Amount", typeof(global::System.Decimal));
            }
    
            ObjectParameter amountPaidParameter;
            if (amountPaid.HasValue)
            {
                amountPaidParameter = new ObjectParameter("AmountPaid", amountPaid);
            }
            else
            {
                amountPaidParameter = new ObjectParameter("AmountPaid", typeof(global::System.Decimal));
            }
    
            ObjectParameter balanceParameter;
            if (balance.HasValue)
            {
                balanceParameter = new ObjectParameter("Balance", balance);
            }
            else
            {
                balanceParameter = new ObjectParameter("Balance", typeof(global::System.Decimal));
            }
    
            ObjectParameter totalParameter;
            if (total.HasValue)
            {
                totalParameter = new ObjectParameter("Total", total);
            }
            else
            {
                totalParameter = new ObjectParameter("Total", typeof(global::System.Decimal));
            }
    
            ObjectParameter companyCodeParameter;
            if (companyCode != null)
            {
                companyCodeParameter = new ObjectParameter("CompanyCode", companyCode);
            }
            else
            {
                companyCodeParameter = new ObjectParameter("CompanyCode", typeof(global::System.String));
            }
    
            ObjectParameter paymentStatusParameter;
            if (paymentStatus != null)
            {
                paymentStatusParameter = new ObjectParameter("PaymentStatus", paymentStatus);
            }
            else
            {
                paymentStatusParameter = new ObjectParameter("PaymentStatus", typeof(global::System.String));
            }
    
            ObjectParameter dateXParameter;
            if (dateX.HasValue)
            {
                dateXParameter = new ObjectParameter("DateX", dateX);
            }
            else
            {
                dateXParameter = new ObjectParameter("DateX", typeof(global::System.DateTime));
            }
    
            ObjectParameter amountInWordsParameter;
            if (amountInWords != null)
            {
                amountInWordsParameter = new ObjectParameter("AmountInWords", amountInWords);
            }
            else
            {
                amountInWordsParameter = new ObjectParameter("AmountInWords", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Transaction>("SPTransactionsInsertUpdate", codeParameter, universityCodeParameter, sessionCodeParameter, semesterCodeParameter, transactionActivityCodeParameter, invoiceTypeCodeParameter, lpoNoParameter, poNoParameter, categoryCodeParameter, amountParameter, amountPaidParameter, balanceParameter, totalParameter, companyCodeParameter, paymentStatusParameter, dateXParameter, amountInWordsParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="sessionCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="transactionActivityCode">No Metadata Documentation available.</param>
        /// <param name="invoiceTypeCode">No Metadata Documentation available.</param>
        /// <param name="lpoNo">No Metadata Documentation available.</param>
        /// <param name="poNo">No Metadata Documentation available.</param>
        /// <param name="categoryCode">No Metadata Documentation available.</param>
        /// <param name="amount">No Metadata Documentation available.</param>
        /// <param name="amountPaid">No Metadata Documentation available.</param>
        /// <param name="balance">No Metadata Documentation available.</param>
        /// <param name="total">No Metadata Documentation available.</param>
        /// <param name="companyCode">No Metadata Documentation available.</param>
        /// <param name="paymentStatus">No Metadata Documentation available.</param>
        /// <param name="dateX">No Metadata Documentation available.</param>
        /// <param name="amountInWords">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Transaction> SPTransactionsInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> sessionCode, global::System.String semesterCode, global::System.String transactionActivityCode, global::System.String invoiceTypeCode, Nullable<global::System.Decimal> lpoNo, Nullable<global::System.Decimal> poNo, global::System.String categoryCode, Nullable<global::System.Decimal> amount, Nullable<global::System.Decimal> amountPaid, Nullable<global::System.Decimal> balance, Nullable<global::System.Decimal> total, global::System.String companyCode, global::System.String paymentStatus, Nullable<global::System.DateTime> dateX, global::System.String amountInWords, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter sessionCodeParameter;
            if (sessionCode.HasValue)
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", sessionCode);
            }
            else
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", typeof(global::System.Int64));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode != null)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.String));
            }
    
            ObjectParameter transactionActivityCodeParameter;
            if (transactionActivityCode != null)
            {
                transactionActivityCodeParameter = new ObjectParameter("TransactionActivityCode", transactionActivityCode);
            }
            else
            {
                transactionActivityCodeParameter = new ObjectParameter("TransactionActivityCode", typeof(global::System.String));
            }
    
            ObjectParameter invoiceTypeCodeParameter;
            if (invoiceTypeCode != null)
            {
                invoiceTypeCodeParameter = new ObjectParameter("InvoiceTypeCode", invoiceTypeCode);
            }
            else
            {
                invoiceTypeCodeParameter = new ObjectParameter("InvoiceTypeCode", typeof(global::System.String));
            }
    
            ObjectParameter lpoNoParameter;
            if (lpoNo.HasValue)
            {
                lpoNoParameter = new ObjectParameter("LpoNo", lpoNo);
            }
            else
            {
                lpoNoParameter = new ObjectParameter("LpoNo", typeof(global::System.Decimal));
            }
    
            ObjectParameter poNoParameter;
            if (poNo.HasValue)
            {
                poNoParameter = new ObjectParameter("PoNo", poNo);
            }
            else
            {
                poNoParameter = new ObjectParameter("PoNo", typeof(global::System.Decimal));
            }
    
            ObjectParameter categoryCodeParameter;
            if (categoryCode != null)
            {
                categoryCodeParameter = new ObjectParameter("CategoryCode", categoryCode);
            }
            else
            {
                categoryCodeParameter = new ObjectParameter("CategoryCode", typeof(global::System.String));
            }
    
            ObjectParameter amountParameter;
            if (amount.HasValue)
            {
                amountParameter = new ObjectParameter("Amount", amount);
            }
            else
            {
                amountParameter = new ObjectParameter("Amount", typeof(global::System.Decimal));
            }
    
            ObjectParameter amountPaidParameter;
            if (amountPaid.HasValue)
            {
                amountPaidParameter = new ObjectParameter("AmountPaid", amountPaid);
            }
            else
            {
                amountPaidParameter = new ObjectParameter("AmountPaid", typeof(global::System.Decimal));
            }
    
            ObjectParameter balanceParameter;
            if (balance.HasValue)
            {
                balanceParameter = new ObjectParameter("Balance", balance);
            }
            else
            {
                balanceParameter = new ObjectParameter("Balance", typeof(global::System.Decimal));
            }
    
            ObjectParameter totalParameter;
            if (total.HasValue)
            {
                totalParameter = new ObjectParameter("Total", total);
            }
            else
            {
                totalParameter = new ObjectParameter("Total", typeof(global::System.Decimal));
            }
    
            ObjectParameter companyCodeParameter;
            if (companyCode != null)
            {
                companyCodeParameter = new ObjectParameter("CompanyCode", companyCode);
            }
            else
            {
                companyCodeParameter = new ObjectParameter("CompanyCode", typeof(global::System.String));
            }
    
            ObjectParameter paymentStatusParameter;
            if (paymentStatus != null)
            {
                paymentStatusParameter = new ObjectParameter("PaymentStatus", paymentStatus);
            }
            else
            {
                paymentStatusParameter = new ObjectParameter("PaymentStatus", typeof(global::System.String));
            }
    
            ObjectParameter dateXParameter;
            if (dateX.HasValue)
            {
                dateXParameter = new ObjectParameter("DateX", dateX);
            }
            else
            {
                dateXParameter = new ObjectParameter("DateX", typeof(global::System.DateTime));
            }
    
            ObjectParameter amountInWordsParameter;
            if (amountInWords != null)
            {
                amountInWordsParameter = new ObjectParameter("AmountInWords", amountInWords);
            }
            else
            {
                amountInWordsParameter = new ObjectParameter("AmountInWords", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Transaction>("SPTransactionsInsertUpdate", mergeOption, codeParameter, universityCodeParameter, sessionCodeParameter, semesterCodeParameter, transactionActivityCodeParameter, invoiceTypeCodeParameter, lpoNoParameter, poNoParameter, categoryCodeParameter, amountParameter, amountPaidParameter, balanceParameter, totalParameter, companyCodeParameter, paymentStatusParameter, dateXParameter, amountInWordsParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Transaction> SPTransactionsSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Transaction>("SPTransactionsSelect", codeParameter, universityCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Transaction> SPTransactionsSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Transaction>("SPTransactionsSelect", mergeOption, codeParameter, universityCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Voucher> SPVouchersDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Voucher>("SPVouchersDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Voucher> SPVouchersDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Voucher>("SPVouchersDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Voucher> SPVouchersDeletePermanently(Nullable<global::System.Int64> code)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Voucher>("SPVouchersDeletePermanently", codeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        public ObjectResult<Voucher> SPVouchersDeletePermanently(Nullable<global::System.Int64> code, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<Voucher>("SPVouchersDeletePermanently", mergeOption, codeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="sessionCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="accountGroupCode">No Metadata Documentation available.</param>
        /// <param name="accountSubCode">No Metadata Documentation available.</param>
        /// <param name="accountTypeCode">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="voucherTypeCode">No Metadata Documentation available.</param>
        /// <param name="transactionTypeCode">No Metadata Documentation available.</param>
        /// <param name="entityTypeCode">No Metadata Documentation available.</param>
        /// <param name="particularsCode">No Metadata Documentation available.</param>
        /// <param name="dateX">No Metadata Documentation available.</param>
        /// <param name="debitAmount">No Metadata Documentation available.</param>
        /// <param name="creditAmount">No Metadata Documentation available.</param>
        /// <param name="narration">No Metadata Documentation available.</param>
        /// <param name="approved">No Metadata Documentation available.</param>
        /// <param name="approveBy">No Metadata Documentation available.</param>
        /// <param name="approveOn">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Voucher> SPVouchersInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> sessionCode, global::System.String semesterCode, global::System.String accountGroupCode, Nullable<global::System.Int32> accountSubCode, Nullable<global::System.Decimal> accountTypeCode, Nullable<global::System.Decimal> accountCode, global::System.String voucherTypeCode, global::System.String transactionTypeCode, global::System.String entityTypeCode, global::System.String particularsCode, Nullable<global::System.DateTime> dateX, Nullable<global::System.Decimal> debitAmount, Nullable<global::System.Decimal> creditAmount, global::System.String narration, Nullable<global::System.Boolean> approved, global::System.String approveBy, Nullable<global::System.DateTime> approveOn, global::System.String notes, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter sessionCodeParameter;
            if (sessionCode.HasValue)
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", sessionCode);
            }
            else
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", typeof(global::System.Int64));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode != null)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.String));
            }
    
            ObjectParameter accountGroupCodeParameter;
            if (accountGroupCode != null)
            {
                accountGroupCodeParameter = new ObjectParameter("AccountGroupCode", accountGroupCode);
            }
            else
            {
                accountGroupCodeParameter = new ObjectParameter("AccountGroupCode", typeof(global::System.String));
            }
    
            ObjectParameter accountSubCodeParameter;
            if (accountSubCode.HasValue)
            {
                accountSubCodeParameter = new ObjectParameter("AccountSubCode", accountSubCode);
            }
            else
            {
                accountSubCodeParameter = new ObjectParameter("AccountSubCode", typeof(global::System.Int32));
            }
    
            ObjectParameter accountTypeCodeParameter;
            if (accountTypeCode.HasValue)
            {
                accountTypeCodeParameter = new ObjectParameter("AccountTypeCode", accountTypeCode);
            }
            else
            {
                accountTypeCodeParameter = new ObjectParameter("AccountTypeCode", typeof(global::System.Decimal));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode.HasValue)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.Decimal));
            }
    
            ObjectParameter voucherTypeCodeParameter;
            if (voucherTypeCode != null)
            {
                voucherTypeCodeParameter = new ObjectParameter("VoucherTypeCode", voucherTypeCode);
            }
            else
            {
                voucherTypeCodeParameter = new ObjectParameter("VoucherTypeCode", typeof(global::System.String));
            }
    
            ObjectParameter transactionTypeCodeParameter;
            if (transactionTypeCode != null)
            {
                transactionTypeCodeParameter = new ObjectParameter("TransactionTypeCode", transactionTypeCode);
            }
            else
            {
                transactionTypeCodeParameter = new ObjectParameter("TransactionTypeCode", typeof(global::System.String));
            }
    
            ObjectParameter entityTypeCodeParameter;
            if (entityTypeCode != null)
            {
                entityTypeCodeParameter = new ObjectParameter("EntityTypeCode", entityTypeCode);
            }
            else
            {
                entityTypeCodeParameter = new ObjectParameter("EntityTypeCode", typeof(global::System.String));
            }
    
            ObjectParameter particularsCodeParameter;
            if (particularsCode != null)
            {
                particularsCodeParameter = new ObjectParameter("ParticularsCode", particularsCode);
            }
            else
            {
                particularsCodeParameter = new ObjectParameter("ParticularsCode", typeof(global::System.String));
            }
    
            ObjectParameter dateXParameter;
            if (dateX.HasValue)
            {
                dateXParameter = new ObjectParameter("DateX", dateX);
            }
            else
            {
                dateXParameter = new ObjectParameter("DateX", typeof(global::System.DateTime));
            }
    
            ObjectParameter debitAmountParameter;
            if (debitAmount.HasValue)
            {
                debitAmountParameter = new ObjectParameter("DebitAmount", debitAmount);
            }
            else
            {
                debitAmountParameter = new ObjectParameter("DebitAmount", typeof(global::System.Decimal));
            }
    
            ObjectParameter creditAmountParameter;
            if (creditAmount.HasValue)
            {
                creditAmountParameter = new ObjectParameter("CreditAmount", creditAmount);
            }
            else
            {
                creditAmountParameter = new ObjectParameter("CreditAmount", typeof(global::System.Decimal));
            }
    
            ObjectParameter narrationParameter;
            if (narration != null)
            {
                narrationParameter = new ObjectParameter("Narration", narration);
            }
            else
            {
                narrationParameter = new ObjectParameter("Narration", typeof(global::System.String));
            }
    
            ObjectParameter approvedParameter;
            if (approved.HasValue)
            {
                approvedParameter = new ObjectParameter("Approved", approved);
            }
            else
            {
                approvedParameter = new ObjectParameter("Approved", typeof(global::System.Boolean));
            }
    
            ObjectParameter approveByParameter;
            if (approveBy != null)
            {
                approveByParameter = new ObjectParameter("ApproveBy", approveBy);
            }
            else
            {
                approveByParameter = new ObjectParameter("ApproveBy", typeof(global::System.String));
            }
    
            ObjectParameter approveOnParameter;
            if (approveOn.HasValue)
            {
                approveOnParameter = new ObjectParameter("ApproveOn", approveOn);
            }
            else
            {
                approveOnParameter = new ObjectParameter("ApproveOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Voucher>("SPVouchersInsertUpdate", codeParameter, universityCodeParameter, sessionCodeParameter, semesterCodeParameter, accountGroupCodeParameter, accountSubCodeParameter, accountTypeCodeParameter, accountCodeParameter, voucherTypeCodeParameter, transactionTypeCodeParameter, entityTypeCodeParameter, particularsCodeParameter, dateXParameter, debitAmountParameter, creditAmountParameter, narrationParameter, approvedParameter, approveByParameter, approveOnParameter, notesParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="sessionCode">No Metadata Documentation available.</param>
        /// <param name="semesterCode">No Metadata Documentation available.</param>
        /// <param name="accountGroupCode">No Metadata Documentation available.</param>
        /// <param name="accountSubCode">No Metadata Documentation available.</param>
        /// <param name="accountTypeCode">No Metadata Documentation available.</param>
        /// <param name="accountCode">No Metadata Documentation available.</param>
        /// <param name="voucherTypeCode">No Metadata Documentation available.</param>
        /// <param name="transactionTypeCode">No Metadata Documentation available.</param>
        /// <param name="entityTypeCode">No Metadata Documentation available.</param>
        /// <param name="particularsCode">No Metadata Documentation available.</param>
        /// <param name="dateX">No Metadata Documentation available.</param>
        /// <param name="debitAmount">No Metadata Documentation available.</param>
        /// <param name="creditAmount">No Metadata Documentation available.</param>
        /// <param name="narration">No Metadata Documentation available.</param>
        /// <param name="approved">No Metadata Documentation available.</param>
        /// <param name="approveBy">No Metadata Documentation available.</param>
        /// <param name="approveOn">No Metadata Documentation available.</param>
        /// <param name="notes">No Metadata Documentation available.</param>
        /// <param name="createdOn">No Metadata Documentation available.</param>
        /// <param name="createdBy">No Metadata Documentation available.</param>
        /// <param name="modifiedOn">No Metadata Documentation available.</param>
        /// <param name="modifiedBy">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<Voucher> SPVouchersInsertUpdate(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Int64> sessionCode, global::System.String semesterCode, global::System.String accountGroupCode, Nullable<global::System.Int32> accountSubCode, Nullable<global::System.Decimal> accountTypeCode, Nullable<global::System.Decimal> accountCode, global::System.String voucherTypeCode, global::System.String transactionTypeCode, global::System.String entityTypeCode, global::System.String particularsCode, Nullable<global::System.DateTime> dateX, Nullable<global::System.Decimal> debitAmount, Nullable<global::System.Decimal> creditAmount, global::System.String narration, Nullable<global::System.Boolean> approved, global::System.String approveBy, Nullable<global::System.DateTime> approveOn, global::System.String notes, Nullable<global::System.DateTime> createdOn, global::System.String createdBy, Nullable<global::System.DateTime> modifiedOn, global::System.String modifiedBy, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter sessionCodeParameter;
            if (sessionCode.HasValue)
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", sessionCode);
            }
            else
            {
                sessionCodeParameter = new ObjectParameter("SessionCode", typeof(global::System.Int64));
            }
    
            ObjectParameter semesterCodeParameter;
            if (semesterCode != null)
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", semesterCode);
            }
            else
            {
                semesterCodeParameter = new ObjectParameter("SemesterCode", typeof(global::System.String));
            }
    
            ObjectParameter accountGroupCodeParameter;
            if (accountGroupCode != null)
            {
                accountGroupCodeParameter = new ObjectParameter("AccountGroupCode", accountGroupCode);
            }
            else
            {
                accountGroupCodeParameter = new ObjectParameter("AccountGroupCode", typeof(global::System.String));
            }
    
            ObjectParameter accountSubCodeParameter;
            if (accountSubCode.HasValue)
            {
                accountSubCodeParameter = new ObjectParameter("AccountSubCode", accountSubCode);
            }
            else
            {
                accountSubCodeParameter = new ObjectParameter("AccountSubCode", typeof(global::System.Int32));
            }
    
            ObjectParameter accountTypeCodeParameter;
            if (accountTypeCode.HasValue)
            {
                accountTypeCodeParameter = new ObjectParameter("AccountTypeCode", accountTypeCode);
            }
            else
            {
                accountTypeCodeParameter = new ObjectParameter("AccountTypeCode", typeof(global::System.Decimal));
            }
    
            ObjectParameter accountCodeParameter;
            if (accountCode.HasValue)
            {
                accountCodeParameter = new ObjectParameter("AccountCode", accountCode);
            }
            else
            {
                accountCodeParameter = new ObjectParameter("AccountCode", typeof(global::System.Decimal));
            }
    
            ObjectParameter voucherTypeCodeParameter;
            if (voucherTypeCode != null)
            {
                voucherTypeCodeParameter = new ObjectParameter("VoucherTypeCode", voucherTypeCode);
            }
            else
            {
                voucherTypeCodeParameter = new ObjectParameter("VoucherTypeCode", typeof(global::System.String));
            }
    
            ObjectParameter transactionTypeCodeParameter;
            if (transactionTypeCode != null)
            {
                transactionTypeCodeParameter = new ObjectParameter("TransactionTypeCode", transactionTypeCode);
            }
            else
            {
                transactionTypeCodeParameter = new ObjectParameter("TransactionTypeCode", typeof(global::System.String));
            }
    
            ObjectParameter entityTypeCodeParameter;
            if (entityTypeCode != null)
            {
                entityTypeCodeParameter = new ObjectParameter("EntityTypeCode", entityTypeCode);
            }
            else
            {
                entityTypeCodeParameter = new ObjectParameter("EntityTypeCode", typeof(global::System.String));
            }
    
            ObjectParameter particularsCodeParameter;
            if (particularsCode != null)
            {
                particularsCodeParameter = new ObjectParameter("ParticularsCode", particularsCode);
            }
            else
            {
                particularsCodeParameter = new ObjectParameter("ParticularsCode", typeof(global::System.String));
            }
    
            ObjectParameter dateXParameter;
            if (dateX.HasValue)
            {
                dateXParameter = new ObjectParameter("DateX", dateX);
            }
            else
            {
                dateXParameter = new ObjectParameter("DateX", typeof(global::System.DateTime));
            }
    
            ObjectParameter debitAmountParameter;
            if (debitAmount.HasValue)
            {
                debitAmountParameter = new ObjectParameter("DebitAmount", debitAmount);
            }
            else
            {
                debitAmountParameter = new ObjectParameter("DebitAmount", typeof(global::System.Decimal));
            }
    
            ObjectParameter creditAmountParameter;
            if (creditAmount.HasValue)
            {
                creditAmountParameter = new ObjectParameter("CreditAmount", creditAmount);
            }
            else
            {
                creditAmountParameter = new ObjectParameter("CreditAmount", typeof(global::System.Decimal));
            }
    
            ObjectParameter narrationParameter;
            if (narration != null)
            {
                narrationParameter = new ObjectParameter("Narration", narration);
            }
            else
            {
                narrationParameter = new ObjectParameter("Narration", typeof(global::System.String));
            }
    
            ObjectParameter approvedParameter;
            if (approved.HasValue)
            {
                approvedParameter = new ObjectParameter("Approved", approved);
            }
            else
            {
                approvedParameter = new ObjectParameter("Approved", typeof(global::System.Boolean));
            }
    
            ObjectParameter approveByParameter;
            if (approveBy != null)
            {
                approveByParameter = new ObjectParameter("ApproveBy", approveBy);
            }
            else
            {
                approveByParameter = new ObjectParameter("ApproveBy", typeof(global::System.String));
            }
    
            ObjectParameter approveOnParameter;
            if (approveOn.HasValue)
            {
                approveOnParameter = new ObjectParameter("ApproveOn", approveOn);
            }
            else
            {
                approveOnParameter = new ObjectParameter("ApproveOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter notesParameter;
            if (notes != null)
            {
                notesParameter = new ObjectParameter("Notes", notes);
            }
            else
            {
                notesParameter = new ObjectParameter("Notes", typeof(global::System.String));
            }
    
            ObjectParameter createdOnParameter;
            if (createdOn.HasValue)
            {
                createdOnParameter = new ObjectParameter("CreatedOn", createdOn);
            }
            else
            {
                createdOnParameter = new ObjectParameter("CreatedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter createdByParameter;
            if (createdBy != null)
            {
                createdByParameter = new ObjectParameter("CreatedBy", createdBy);
            }
            else
            {
                createdByParameter = new ObjectParameter("CreatedBy", typeof(global::System.String));
            }
    
            ObjectParameter modifiedOnParameter;
            if (modifiedOn.HasValue)
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", modifiedOn);
            }
            else
            {
                modifiedOnParameter = new ObjectParameter("ModifiedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter modifiedByParameter;
            if (modifiedBy != null)
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
            }
            else
            {
                modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Voucher>("SPVouchersInsertUpdate", mergeOption, codeParameter, universityCodeParameter, sessionCodeParameter, semesterCodeParameter, accountGroupCodeParameter, accountSubCodeParameter, accountTypeCodeParameter, accountCodeParameter, voucherTypeCodeParameter, transactionTypeCodeParameter, entityTypeCodeParameter, particularsCodeParameter, dateXParameter, debitAmountParameter, creditAmountParameter, narrationParameter, approvedParameter, approveByParameter, approveOnParameter, notesParameter, createdOnParameter, createdByParameter, modifiedOnParameter, modifiedByParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Voucher> SPVouchersSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Voucher>("SPVouchersSelect", codeParameter, universityCodeParameter, deletedParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="universityCode">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        public ObjectResult<Voucher> SPVouchersSelect(Nullable<global::System.Int64> code, global::System.String universityCode, Nullable<global::System.Boolean> deleted, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter universityCodeParameter;
            if (universityCode != null)
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", universityCode);
            }
            else
            {
                universityCodeParameter = new ObjectParameter("UniversityCode", typeof(global::System.String));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Voucher>("SPVouchersSelect", mergeOption, codeParameter, universityCodeParameter, deletedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<FeesDetail> SPFeesDetailDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<FeesDetail>("SPFeesDetailDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<FeesDetail> SPFeesDetailDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<FeesDetail>("SPFeesDetailDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<TransactionsDetail> SPTransactionsDetailDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<TransactionsDetail>("SPTransactionsDetailDelete", codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="code">No Metadata Documentation available.</param>
        /// <param name="deleted">No Metadata Documentation available.</param>
        /// <param name="deletedOn">No Metadata Documentation available.</param>
        /// <param name="deletedBy">No Metadata Documentation available.</param>
        public ObjectResult<TransactionsDetail> SPTransactionsDetailDelete(Nullable<global::System.Int64> code, Nullable<global::System.Boolean> deleted, Nullable<global::System.DateTime> deletedOn, global::System.String deletedBy, MergeOption mergeOption)
        {
            ObjectParameter codeParameter;
            if (code.HasValue)
            {
                codeParameter = new ObjectParameter("Code", code);
            }
            else
            {
                codeParameter = new ObjectParameter("Code", typeof(global::System.Int64));
            }
    
            ObjectParameter deletedParameter;
            if (deleted.HasValue)
            {
                deletedParameter = new ObjectParameter("Deleted", deleted);
            }
            else
            {
                deletedParameter = new ObjectParameter("Deleted", typeof(global::System.Boolean));
            }
    
            ObjectParameter deletedOnParameter;
            if (deletedOn.HasValue)
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", deletedOn);
            }
            else
            {
                deletedOnParameter = new ObjectParameter("DeletedOn", typeof(global::System.DateTime));
            }
    
            ObjectParameter deletedByParameter;
            if (deletedBy != null)
            {
                deletedByParameter = new ObjectParameter("DeletedBy", deletedBy);
            }
            else
            {
                deletedByParameter = new ObjectParameter("DeletedBy", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<TransactionsDetail>("SPTransactionsDetailDelete", mergeOption, codeParameter, deletedParameter, deletedOnParameter, deletedByParameter);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Finance", Name="Account")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Account : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Account object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Account CreateAccount(global::System.Decimal code)
        {
            Account account = new Account();
            account.Code = code;
            return account;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Decimal _Code;
        partial void OnCodeChanging(global::System.Decimal value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> AccountTypeCode
        {
            get
            {
                return _AccountTypeCode;
            }
            set
            {
                OnAccountTypeCodeChanging(value);
                ReportPropertyChanging("AccountTypeCode");
                _AccountTypeCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AccountTypeCode");
                OnAccountTypeCodeChanged();
            }
        }
        private Nullable<global::System.Decimal> _AccountTypeCode;
        partial void OnAccountTypeCodeChanging(Nullable<global::System.Decimal> value);
        partial void OnAccountTypeCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> AccountSubCode
        {
            get
            {
                return _AccountSubCode;
            }
            set
            {
                OnAccountSubCodeChanging(value);
                ReportPropertyChanging("AccountSubCode");
                _AccountSubCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AccountSubCode");
                OnAccountSubCodeChanged();
            }
        }
        private Nullable<global::System.Int32> _AccountSubCode;
        partial void OnAccountSubCodeChanging(Nullable<global::System.Int32> value);
        partial void OnAccountSubCodeChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Finance", Name="AccountSub")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class AccountSub : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new AccountSub object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static AccountSub CreateAccountSub(global::System.Int32 code)
        {
            AccountSub accountSub = new AccountSub();
            accountSub.Code = code;
            return accountSub;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int32 _Code;
        partial void OnCodeChanging(global::System.Int32 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DescriptionCode
        {
            get
            {
                return _DescriptionCode;
            }
            set
            {
                OnDescriptionCodeChanging(value);
                ReportPropertyChanging("DescriptionCode");
                _DescriptionCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DescriptionCode");
                OnDescriptionCodeChanged();
            }
        }
        private global::System.String _DescriptionCode;
        partial void OnDescriptionCodeChanging(global::System.String value);
        partial void OnDescriptionCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ParameterCode
        {
            get
            {
                return _ParameterCode;
            }
            set
            {
                OnParameterCodeChanging(value);
                ReportPropertyChanging("ParameterCode");
                _ParameterCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ParameterCode");
                OnParameterCodeChanged();
            }
        }
        private global::System.String _ParameterCode;
        partial void OnParameterCodeChanging(global::System.String value);
        partial void OnParameterCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Finance", Name="AccountType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class AccountType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new AccountType object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static AccountType CreateAccountType(global::System.Decimal code)
        {
            AccountType accountType = new AccountType();
            accountType.Code = code;
            return accountType;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Decimal _Code;
        partial void OnCodeChanging(global::System.Decimal value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountSubCode
        {
            get
            {
                return _AccountSubCode;
            }
            set
            {
                OnAccountSubCodeChanging(value);
                ReportPropertyChanging("AccountSubCode");
                _AccountSubCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountSubCode");
                OnAccountSubCodeChanged();
            }
        }
        private global::System.String _AccountSubCode;
        partial void OnAccountSubCodeChanging(global::System.String value);
        partial void OnAccountSubCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DescriptionCode
        {
            get
            {
                return _DescriptionCode;
            }
            set
            {
                OnDescriptionCodeChanging(value);
                ReportPropertyChanging("DescriptionCode");
                _DescriptionCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DescriptionCode");
                OnDescriptionCodeChanged();
            }
        }
        private global::System.String _DescriptionCode;
        partial void OnDescriptionCodeChanging(global::System.String value);
        partial void OnDescriptionCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Finance", Name="Fee")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Fee : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Fee object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Fee CreateFee(global::System.Int64 code)
        {
            Fee fee = new Fee();
            fee.Code = code;
            return fee;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MatricNo
        {
            get
            {
                return _MatricNo;
            }
            set
            {
                OnMatricNoChanging(value);
                ReportPropertyChanging("MatricNo");
                _MatricNo = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MatricNo");
                OnMatricNoChanged();
            }
        }
        private global::System.String _MatricNo;
        partial void OnMatricNoChanging(global::System.String value);
        partial void OnMatricNoChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> FacultyCode
        {
            get
            {
                return _FacultyCode;
            }
            set
            {
                OnFacultyCodeChanging(value);
                ReportPropertyChanging("FacultyCode");
                _FacultyCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FacultyCode");
                OnFacultyCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _FacultyCode;
        partial void OnFacultyCodeChanging(Nullable<global::System.Int64> value);
        partial void OnFacultyCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> DepartmentCode
        {
            get
            {
                return _DepartmentCode;
            }
            set
            {
                OnDepartmentCodeChanging(value);
                ReportPropertyChanging("DepartmentCode");
                _DepartmentCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DepartmentCode");
                OnDepartmentCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _DepartmentCode;
        partial void OnDepartmentCodeChanging(Nullable<global::System.Int64> value);
        partial void OnDepartmentCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CourseCode
        {
            get
            {
                return _CourseCode;
            }
            set
            {
                OnCourseCodeChanging(value);
                ReportPropertyChanging("CourseCode");
                _CourseCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CourseCode");
                OnCourseCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _CourseCode;
        partial void OnCourseCodeChanging(Nullable<global::System.Int64> value);
        partial void OnCourseCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ProgramCode
        {
            get
            {
                return _ProgramCode;
            }
            set
            {
                OnProgramCodeChanging(value);
                ReportPropertyChanging("ProgramCode");
                _ProgramCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ProgramCode");
                OnProgramCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _ProgramCode;
        partial void OnProgramCodeChanging(Nullable<global::System.Int64> value);
        partial void OnProgramCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> LevelCode
        {
            get
            {
                return _LevelCode;
            }
            set
            {
                OnLevelCodeChanging(value);
                ReportPropertyChanging("LevelCode");
                _LevelCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LevelCode");
                OnLevelCodeChanged();
            }
        }
        private Nullable<global::System.Int32> _LevelCode;
        partial void OnLevelCodeChanging(Nullable<global::System.Int32> value);
        partial void OnLevelCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> SessionCode
        {
            get
            {
                return _SessionCode;
            }
            set
            {
                OnSessionCodeChanging(value);
                ReportPropertyChanging("SessionCode");
                _SessionCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SessionCode");
                OnSessionCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _SessionCode;
        partial void OnSessionCodeChanging(Nullable<global::System.Int64> value);
        partial void OnSessionCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SemesterCode
        {
            get
            {
                return _SemesterCode;
            }
            set
            {
                OnSemesterCodeChanging(value);
                ReportPropertyChanging("SemesterCode");
                _SemesterCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SemesterCode");
                OnSemesterCodeChanged();
            }
        }
        private global::System.String _SemesterCode;
        partial void OnSemesterCodeChanging(global::System.String value);
        partial void OnSemesterCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountTitle
        {
            get
            {
                return _AccountTitle;
            }
            set
            {
                OnAccountTitleChanging(value);
                ReportPropertyChanging("AccountTitle");
                _AccountTitle = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountTitle");
                OnAccountTitleChanged();
            }
        }
        private global::System.String _AccountTitle;
        partial void OnAccountTitleChanging(global::System.String value);
        partial void OnAccountTitleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountNo
        {
            get
            {
                return _AccountNo;
            }
            set
            {
                OnAccountNoChanging(value);
                ReportPropertyChanging("AccountNo");
                _AccountNo = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountNo");
                OnAccountNoChanged();
            }
        }
        private global::System.String _AccountNo;
        partial void OnAccountNoChanging(global::System.String value);
        partial void OnAccountNoChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String BankCode
        {
            get
            {
                return _BankCode;
            }
            set
            {
                OnBankCodeChanging(value);
                ReportPropertyChanging("BankCode");
                _BankCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("BankCode");
                OnBankCodeChanged();
            }
        }
        private global::System.String _BankCode;
        partial void OnBankCodeChanging(global::System.String value);
        partial void OnBankCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String BankBranch
        {
            get
            {
                return _BankBranch;
            }
            set
            {
                OnBankBranchChanging(value);
                ReportPropertyChanging("BankBranch");
                _BankBranch = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("BankBranch");
                OnBankBranchChanged();
            }
        }
        private global::System.String _BankBranch;
        partial void OnBankBranchChanging(global::System.String value);
        partial void OnBankBranchChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PaymentMode
        {
            get
            {
                return _PaymentMode;
            }
            set
            {
                OnPaymentModeChanging(value);
                ReportPropertyChanging("PaymentMode");
                _PaymentMode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PaymentMode");
                OnPaymentModeChanged();
            }
        }
        private global::System.String _PaymentMode;
        partial void OnPaymentModeChanging(global::System.String value);
        partial void OnPaymentModeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateX
        {
            get
            {
                return _DateX;
            }
            set
            {
                OnDateXChanging(value);
                ReportPropertyChanging("DateX");
                _DateX = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateX");
                OnDateXChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateX;
        partial void OnDateXChanging(Nullable<global::System.DateTime> value);
        partial void OnDateXChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> Amount
        {
            get
            {
                return _Amount;
            }
            set
            {
                OnAmountChanging(value);
                ReportPropertyChanging("Amount");
                _Amount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Amount");
                OnAmountChanged();
            }
        }
        private Nullable<global::System.Decimal> _Amount;
        partial void OnAmountChanging(Nullable<global::System.Decimal> value);
        partial void OnAmountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> Balance
        {
            get
            {
                return _Balance;
            }
            set
            {
                OnBalanceChanging(value);
                ReportPropertyChanging("Balance");
                _Balance = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Balance");
                OnBalanceChanged();
            }
        }
        private Nullable<global::System.Decimal> _Balance;
        partial void OnBalanceChanging(Nullable<global::System.Decimal> value);
        partial void OnBalanceChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PaymentStatus
        {
            get
            {
                return _PaymentStatus;
            }
            set
            {
                OnPaymentStatusChanging(value);
                ReportPropertyChanging("PaymentStatus");
                _PaymentStatus = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PaymentStatus");
                OnPaymentStatusChanged();
            }
        }
        private global::System.String _PaymentStatus;
        partial void OnPaymentStatusChanging(global::System.String value);
        partial void OnPaymentStatusChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Finance", "FK_FeesDetail_Fees", "FeesDetail")]
        public EntityCollection<FeesDetail> FeesDetails
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<FeesDetail>("Finance.FK_FeesDetail_Fees", "FeesDetail");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<FeesDetail>("Finance.FK_FeesDetail_Fees", "FeesDetail", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Finance", Name="FeeAllotment")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class FeeAllotment : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new FeeAllotment object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static FeeAllotment CreateFeeAllotment(global::System.Int64 code)
        {
            FeeAllotment feeAllotment = new FeeAllotment();
            feeAllotment.Code = code;
            return feeAllotment;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> FacultyCode
        {
            get
            {
                return _FacultyCode;
            }
            set
            {
                OnFacultyCodeChanging(value);
                ReportPropertyChanging("FacultyCode");
                _FacultyCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FacultyCode");
                OnFacultyCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _FacultyCode;
        partial void OnFacultyCodeChanging(Nullable<global::System.Int64> value);
        partial void OnFacultyCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> DepartmentCode
        {
            get
            {
                return _DepartmentCode;
            }
            set
            {
                OnDepartmentCodeChanging(value);
                ReportPropertyChanging("DepartmentCode");
                _DepartmentCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DepartmentCode");
                OnDepartmentCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _DepartmentCode;
        partial void OnDepartmentCodeChanging(Nullable<global::System.Int64> value);
        partial void OnDepartmentCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CourseCode
        {
            get
            {
                return _CourseCode;
            }
            set
            {
                OnCourseCodeChanging(value);
                ReportPropertyChanging("CourseCode");
                _CourseCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CourseCode");
                OnCourseCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _CourseCode;
        partial void OnCourseCodeChanging(Nullable<global::System.Int64> value);
        partial void OnCourseCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ProgramCode
        {
            get
            {
                return _ProgramCode;
            }
            set
            {
                OnProgramCodeChanging(value);
                ReportPropertyChanging("ProgramCode");
                _ProgramCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ProgramCode");
                OnProgramCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _ProgramCode;
        partial void OnProgramCodeChanging(Nullable<global::System.Int64> value);
        partial void OnProgramCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> LevelCode
        {
            get
            {
                return _LevelCode;
            }
            set
            {
                OnLevelCodeChanging(value);
                ReportPropertyChanging("LevelCode");
                _LevelCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LevelCode");
                OnLevelCodeChanged();
            }
        }
        private Nullable<global::System.Int32> _LevelCode;
        partial void OnLevelCodeChanging(Nullable<global::System.Int32> value);
        partial void OnLevelCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FeeDefinitionCode
        {
            get
            {
                return _FeeDefinitionCode;
            }
            set
            {
                OnFeeDefinitionCodeChanging(value);
                ReportPropertyChanging("FeeDefinitionCode");
                _FeeDefinitionCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FeeDefinitionCode");
                OnFeeDefinitionCodeChanged();
            }
        }
        private global::System.String _FeeDefinitionCode;
        partial void OnFeeDefinitionCodeChanging(global::System.String value);
        partial void OnFeeDefinitionCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> SessionCode
        {
            get
            {
                return _SessionCode;
            }
            set
            {
                OnSessionCodeChanging(value);
                ReportPropertyChanging("SessionCode");
                _SessionCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SessionCode");
                OnSessionCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _SessionCode;
        partial void OnSessionCodeChanging(Nullable<global::System.Int64> value);
        partial void OnSessionCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SemesterCode
        {
            get
            {
                return _SemesterCode;
            }
            set
            {
                OnSemesterCodeChanging(value);
                ReportPropertyChanging("SemesterCode");
                _SemesterCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SemesterCode");
                OnSemesterCodeChanged();
            }
        }
        private global::System.String _SemesterCode;
        partial void OnSemesterCodeChanging(global::System.String value);
        partial void OnSemesterCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String EntryMode
        {
            get
            {
                return _EntryMode;
            }
            set
            {
                OnEntryModeChanging(value);
                ReportPropertyChanging("EntryMode");
                _EntryMode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("EntryMode");
                OnEntryModeChanged();
            }
        }
        private global::System.String _EntryMode;
        partial void OnEntryModeChanging(global::System.String value);
        partial void OnEntryModeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String StudyMode
        {
            get
            {
                return _StudyMode;
            }
            set
            {
                OnStudyModeChanging(value);
                ReportPropertyChanging("StudyMode");
                _StudyMode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("StudyMode");
                OnStudyModeChanged();
            }
        }
        private global::System.String _StudyMode;
        partial void OnStudyModeChanging(global::System.String value);
        partial void OnStudyModeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> Amount
        {
            get
            {
                return _Amount;
            }
            set
            {
                OnAmountChanging(value);
                ReportPropertyChanging("Amount");
                _Amount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Amount");
                OnAmountChanged();
            }
        }
        private Nullable<global::System.Decimal> _Amount;
        partial void OnAmountChanging(Nullable<global::System.Decimal> value);
        partial void OnAmountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> DiscountPercentage
        {
            get
            {
                return _DiscountPercentage;
            }
            set
            {
                OnDiscountPercentageChanging(value);
                ReportPropertyChanging("DiscountPercentage");
                _DiscountPercentage = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DiscountPercentage");
                OnDiscountPercentageChanged();
            }
        }
        private Nullable<global::System.Int32> _DiscountPercentage;
        partial void OnDiscountPercentageChanging(Nullable<global::System.Int32> value);
        partial void OnDiscountPercentageChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> DiscountedAmount
        {
            get
            {
                return _DiscountedAmount;
            }
            set
            {
                OnDiscountedAmountChanging(value);
                ReportPropertyChanging("DiscountedAmount");
                _DiscountedAmount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DiscountedAmount");
                OnDiscountedAmountChanged();
            }
        }
        private Nullable<global::System.Decimal> _DiscountedAmount;
        partial void OnDiscountedAmountChanging(Nullable<global::System.Decimal> value);
        partial void OnDiscountedAmountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Approved
        {
            get
            {
                return _Approved;
            }
            set
            {
                OnApprovedChanging(value);
                ReportPropertyChanging("Approved");
                _Approved = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Approved");
                OnApprovedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Approved;
        partial void OnApprovedChanging(Nullable<global::System.Boolean> value);
        partial void OnApprovedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ApproveBy
        {
            get
            {
                return _ApproveBy;
            }
            set
            {
                OnApproveByChanging(value);
                ReportPropertyChanging("ApproveBy");
                _ApproveBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ApproveBy");
                OnApproveByChanged();
            }
        }
        private global::System.String _ApproveBy;
        partial void OnApproveByChanging(global::System.String value);
        partial void OnApproveByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ApproveOn
        {
            get
            {
                return _ApproveOn;
            }
            set
            {
                OnApproveOnChanging(value);
                ReportPropertyChanging("ApproveOn");
                _ApproveOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ApproveOn");
                OnApproveOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ApproveOn;
        partial void OnApproveOnChanging(Nullable<global::System.DateTime> value);
        partial void OnApproveOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Notes
        {
            get
            {
                return _Notes;
            }
            set
            {
                OnNotesChanging(value);
                ReportPropertyChanging("Notes");
                _Notes = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Notes");
                OnNotesChanged();
            }
        }
        private global::System.String _Notes;
        partial void OnNotesChanging(global::System.String value);
        partial void OnNotesChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Finance", Name="FeeDefinition")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class FeeDefinition : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new FeeDefinition object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static FeeDefinition CreateFeeDefinition(global::System.String code)
        {
            FeeDefinition feeDefinition = new FeeDefinition();
            feeDefinition.Code = code;
            return feeDefinition;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.String _Code;
        partial void OnCodeChanging(global::System.String value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FeeStatusCode
        {
            get
            {
                return _FeeStatusCode;
            }
            set
            {
                OnFeeStatusCodeChanging(value);
                ReportPropertyChanging("FeeStatusCode");
                _FeeStatusCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FeeStatusCode");
                OnFeeStatusCodeChanged();
            }
        }
        private global::System.String _FeeStatusCode;
        partial void OnFeeStatusCodeChanging(global::System.String value);
        partial void OnFeeStatusCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Finance", Name="FeesDetail")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class FeesDetail : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new FeesDetail object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static FeesDetail CreateFeesDetail(global::System.Int64 code)
        {
            FeesDetail feesDetail = new FeesDetail();
            feesDetail.Code = code;
            return feesDetail;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MatricNo
        {
            get
            {
                return _MatricNo;
            }
            set
            {
                OnMatricNoChanging(value);
                ReportPropertyChanging("MatricNo");
                _MatricNo = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MatricNo");
                OnMatricNoChanged();
            }
        }
        private global::System.String _MatricNo;
        partial void OnMatricNoChanging(global::System.String value);
        partial void OnMatricNoChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> FacultyCode
        {
            get
            {
                return _FacultyCode;
            }
            set
            {
                OnFacultyCodeChanging(value);
                ReportPropertyChanging("FacultyCode");
                _FacultyCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FacultyCode");
                OnFacultyCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _FacultyCode;
        partial void OnFacultyCodeChanging(Nullable<global::System.Int64> value);
        partial void OnFacultyCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> DepartmentCode
        {
            get
            {
                return _DepartmentCode;
            }
            set
            {
                OnDepartmentCodeChanging(value);
                ReportPropertyChanging("DepartmentCode");
                _DepartmentCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DepartmentCode");
                OnDepartmentCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _DepartmentCode;
        partial void OnDepartmentCodeChanging(Nullable<global::System.Int64> value);
        partial void OnDepartmentCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CourseCode
        {
            get
            {
                return _CourseCode;
            }
            set
            {
                OnCourseCodeChanging(value);
                ReportPropertyChanging("CourseCode");
                _CourseCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CourseCode");
                OnCourseCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _CourseCode;
        partial void OnCourseCodeChanging(Nullable<global::System.Int64> value);
        partial void OnCourseCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ProgramCode
        {
            get
            {
                return _ProgramCode;
            }
            set
            {
                OnProgramCodeChanging(value);
                ReportPropertyChanging("ProgramCode");
                _ProgramCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ProgramCode");
                OnProgramCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _ProgramCode;
        partial void OnProgramCodeChanging(Nullable<global::System.Int64> value);
        partial void OnProgramCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> LevelCode
        {
            get
            {
                return _LevelCode;
            }
            set
            {
                OnLevelCodeChanging(value);
                ReportPropertyChanging("LevelCode");
                _LevelCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LevelCode");
                OnLevelCodeChanged();
            }
        }
        private Nullable<global::System.Int32> _LevelCode;
        partial void OnLevelCodeChanging(Nullable<global::System.Int32> value);
        partial void OnLevelCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> FeesCode
        {
            get
            {
                return _FeesCode;
            }
            set
            {
                OnFeesCodeChanging(value);
                ReportPropertyChanging("FeesCode");
                _FeesCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FeesCode");
                OnFeesCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _FeesCode;
        partial void OnFeesCodeChanging(Nullable<global::System.Int64> value);
        partial void OnFeesCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FeeDefinitionCode
        {
            get
            {
                return _FeeDefinitionCode;
            }
            set
            {
                OnFeeDefinitionCodeChanging(value);
                ReportPropertyChanging("FeeDefinitionCode");
                _FeeDefinitionCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FeeDefinitionCode");
                OnFeeDefinitionCodeChanged();
            }
        }
        private global::System.String _FeeDefinitionCode;
        partial void OnFeeDefinitionCodeChanging(global::System.String value);
        partial void OnFeeDefinitionCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> FeeAllotmentCode
        {
            get
            {
                return _FeeAllotmentCode;
            }
            set
            {
                OnFeeAllotmentCodeChanging(value);
                ReportPropertyChanging("FeeAllotmentCode");
                _FeeAllotmentCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FeeAllotmentCode");
                OnFeeAllotmentCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _FeeAllotmentCode;
        partial void OnFeeAllotmentCodeChanging(Nullable<global::System.Int64> value);
        partial void OnFeeAllotmentCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> Amount
        {
            get
            {
                return _Amount;
            }
            set
            {
                OnAmountChanging(value);
                ReportPropertyChanging("Amount");
                _Amount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Amount");
                OnAmountChanged();
            }
        }
        private Nullable<global::System.Decimal> _Amount;
        partial void OnAmountChanging(Nullable<global::System.Decimal> value);
        partial void OnAmountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ExtraDiscount
        {
            get
            {
                return _ExtraDiscount;
            }
            set
            {
                OnExtraDiscountChanging(value);
                ReportPropertyChanging("ExtraDiscount");
                _ExtraDiscount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ExtraDiscount");
                OnExtraDiscountChanged();
            }
        }
        private Nullable<global::System.Int32> _ExtraDiscount;
        partial void OnExtraDiscountChanging(Nullable<global::System.Int32> value);
        partial void OnExtraDiscountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> FinalAmount
        {
            get
            {
                return _FinalAmount;
            }
            set
            {
                OnFinalAmountChanging(value);
                ReportPropertyChanging("FinalAmount");
                _FinalAmount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FinalAmount");
                OnFinalAmountChanged();
            }
        }
        private Nullable<global::System.Decimal> _FinalAmount;
        partial void OnFinalAmountChanging(Nullable<global::System.Decimal> value);
        partial void OnFinalAmountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Finance", "FK_FeesDetail_Fees", "Fees")]
        public Fee Fee
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Fee>("Finance.FK_FeesDetail_Fees", "Fees").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Fee>("Finance.FK_FeesDetail_Fees", "Fees").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Fee> FeeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Fee>("Finance.FK_FeesDetail_Fees", "Fees");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Fee>("Finance.FK_FeesDetail_Fees", "Fees", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Finance", Name="PaymentPlan")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PaymentPlan : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new PaymentPlan object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static PaymentPlan CreatePaymentPlan(global::System.Int64 code)
        {
            PaymentPlan paymentPlan = new PaymentPlan();
            paymentPlan.Code = code;
            return paymentPlan;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> SessionCode
        {
            get
            {
                return _SessionCode;
            }
            set
            {
                OnSessionCodeChanging(value);
                ReportPropertyChanging("SessionCode");
                _SessionCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SessionCode");
                OnSessionCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _SessionCode;
        partial void OnSessionCodeChanging(Nullable<global::System.Int64> value);
        partial void OnSessionCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SemesterCode
        {
            get
            {
                return _SemesterCode;
            }
            set
            {
                OnSemesterCodeChanging(value);
                ReportPropertyChanging("SemesterCode");
                _SemesterCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SemesterCode");
                OnSemesterCodeChanged();
            }
        }
        private global::System.String _SemesterCode;
        partial void OnSemesterCodeChanging(global::System.String value);
        partial void OnSemesterCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> NoOfPaymentAllowed
        {
            get
            {
                return _NoOfPaymentAllowed;
            }
            set
            {
                OnNoOfPaymentAllowedChanging(value);
                ReportPropertyChanging("NoOfPaymentAllowed");
                _NoOfPaymentAllowed = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("NoOfPaymentAllowed");
                OnNoOfPaymentAllowedChanged();
            }
        }
        private Nullable<global::System.Int32> _NoOfPaymentAllowed;
        partial void OnNoOfPaymentAllowedChanging(Nullable<global::System.Int32> value);
        partial void OnNoOfPaymentAllowedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateX
        {
            get
            {
                return _DateX;
            }
            set
            {
                OnDateXChanging(value);
                ReportPropertyChanging("DateX");
                _DateX = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateX");
                OnDateXChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateX;
        partial void OnDateXChanging(Nullable<global::System.DateTime> value);
        partial void OnDateXChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String StatusCode
        {
            get
            {
                return _StatusCode;
            }
            set
            {
                OnStatusCodeChanging(value);
                ReportPropertyChanging("StatusCode");
                _StatusCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("StatusCode");
                OnStatusCodeChanged();
            }
        }
        private global::System.String _StatusCode;
        partial void OnStatusCodeChanging(global::System.String value);
        partial void OnStatusCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Applicable
        {
            get
            {
                return _Applicable;
            }
            set
            {
                OnApplicableChanging(value);
                ReportPropertyChanging("Applicable");
                _Applicable = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Applicable");
                OnApplicableChanged();
            }
        }
        private Nullable<global::System.Boolean> _Applicable;
        partial void OnApplicableChanging(Nullable<global::System.Boolean> value);
        partial void OnApplicableChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Finance", "FK_PaymentPlanDetails_PaymentPlans", "PaymentPlanDetails")]
        public EntityCollection<PaymentPlanDetail> PaymentPlanDetails
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PaymentPlanDetail>("Finance.FK_PaymentPlanDetails_PaymentPlans", "PaymentPlanDetails");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PaymentPlanDetail>("Finance.FK_PaymentPlanDetails_PaymentPlans", "PaymentPlanDetails", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Finance", Name="PaymentPlanDetail")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PaymentPlanDetail : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new PaymentPlanDetail object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static PaymentPlanDetail CreatePaymentPlanDetail(global::System.Int64 code)
        {
            PaymentPlanDetail paymentPlanDetail = new PaymentPlanDetail();
            paymentPlanDetail.Code = code;
            return paymentPlanDetail;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> PaymentPlanCode
        {
            get
            {
                return _PaymentPlanCode;
            }
            set
            {
                OnPaymentPlanCodeChanging(value);
                ReportPropertyChanging("PaymentPlanCode");
                _PaymentPlanCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PaymentPlanCode");
                OnPaymentPlanCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _PaymentPlanCode;
        partial void OnPaymentPlanCodeChanging(Nullable<global::System.Int64> value);
        partial void OnPaymentPlanCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> Amount
        {
            get
            {
                return _Amount;
            }
            set
            {
                OnAmountChanging(value);
                ReportPropertyChanging("Amount");
                _Amount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Amount");
                OnAmountChanged();
            }
        }
        private Nullable<global::System.Decimal> _Amount;
        partial void OnAmountChanging(Nullable<global::System.Decimal> value);
        partial void OnAmountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> DiscountedAmount
        {
            get
            {
                return _DiscountedAmount;
            }
            set
            {
                OnDiscountedAmountChanging(value);
                ReportPropertyChanging("DiscountedAmount");
                _DiscountedAmount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DiscountedAmount");
                OnDiscountedAmountChanged();
            }
        }
        private Nullable<global::System.Decimal> _DiscountedAmount;
        partial void OnDiscountedAmountChanging(Nullable<global::System.Decimal> value);
        partial void OnDiscountedAmountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> DiscountedPercentage
        {
            get
            {
                return _DiscountedPercentage;
            }
            set
            {
                OnDiscountedPercentageChanging(value);
                ReportPropertyChanging("DiscountedPercentage");
                _DiscountedPercentage = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DiscountedPercentage");
                OnDiscountedPercentageChanged();
            }
        }
        private Nullable<global::System.Int32> _DiscountedPercentage;
        partial void OnDiscountedPercentageChanging(Nullable<global::System.Int32> value);
        partial void OnDiscountedPercentageChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> Total
        {
            get
            {
                return _Total;
            }
            set
            {
                OnTotalChanging(value);
                ReportPropertyChanging("Total");
                _Total = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Total");
                OnTotalChanged();
            }
        }
        private Nullable<global::System.Decimal> _Total;
        partial void OnTotalChanging(Nullable<global::System.Decimal> value);
        partial void OnTotalChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Finance", "FK_PaymentPlanDetails_PaymentPlans", "PaymentPlans")]
        public PaymentPlan PaymentPlan
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PaymentPlan>("Finance.FK_PaymentPlanDetails_PaymentPlans", "PaymentPlans").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PaymentPlan>("Finance.FK_PaymentPlanDetails_PaymentPlans", "PaymentPlans").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<PaymentPlan> PaymentPlanReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PaymentPlan>("Finance.FK_PaymentPlanDetails_PaymentPlans", "PaymentPlans");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<PaymentPlan>("Finance.FK_PaymentPlanDetails_PaymentPlans", "PaymentPlans", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Finance", Name="Refund")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Refund : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Refund object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Refund CreateRefund(global::System.Int64 code)
        {
            Refund refund = new Refund();
            refund.Code = code;
            return refund;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MatricNo
        {
            get
            {
                return _MatricNo;
            }
            set
            {
                OnMatricNoChanging(value);
                ReportPropertyChanging("MatricNo");
                _MatricNo = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MatricNo");
                OnMatricNoChanged();
            }
        }
        private global::System.String _MatricNo;
        partial void OnMatricNoChanging(global::System.String value);
        partial void OnMatricNoChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> FacultyCode
        {
            get
            {
                return _FacultyCode;
            }
            set
            {
                OnFacultyCodeChanging(value);
                ReportPropertyChanging("FacultyCode");
                _FacultyCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FacultyCode");
                OnFacultyCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _FacultyCode;
        partial void OnFacultyCodeChanging(Nullable<global::System.Int64> value);
        partial void OnFacultyCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> DepartmentCode
        {
            get
            {
                return _DepartmentCode;
            }
            set
            {
                OnDepartmentCodeChanging(value);
                ReportPropertyChanging("DepartmentCode");
                _DepartmentCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DepartmentCode");
                OnDepartmentCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _DepartmentCode;
        partial void OnDepartmentCodeChanging(Nullable<global::System.Int64> value);
        partial void OnDepartmentCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CourseCode
        {
            get
            {
                return _CourseCode;
            }
            set
            {
                OnCourseCodeChanging(value);
                ReportPropertyChanging("CourseCode");
                _CourseCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CourseCode");
                OnCourseCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _CourseCode;
        partial void OnCourseCodeChanging(Nullable<global::System.Int64> value);
        partial void OnCourseCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ProgramCode
        {
            get
            {
                return _ProgramCode;
            }
            set
            {
                OnProgramCodeChanging(value);
                ReportPropertyChanging("ProgramCode");
                _ProgramCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ProgramCode");
                OnProgramCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _ProgramCode;
        partial void OnProgramCodeChanging(Nullable<global::System.Int64> value);
        partial void OnProgramCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> LevelCode
        {
            get
            {
                return _LevelCode;
            }
            set
            {
                OnLevelCodeChanging(value);
                ReportPropertyChanging("LevelCode");
                _LevelCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LevelCode");
                OnLevelCodeChanged();
            }
        }
        private Nullable<global::System.Int32> _LevelCode;
        partial void OnLevelCodeChanging(Nullable<global::System.Int32> value);
        partial void OnLevelCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> FeesCode
        {
            get
            {
                return _FeesCode;
            }
            set
            {
                OnFeesCodeChanging(value);
                ReportPropertyChanging("FeesCode");
                _FeesCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FeesCode");
                OnFeesCodeChanged();
            }
        }
        private Nullable<global::System.Decimal> _FeesCode;
        partial void OnFeesCodeChanging(Nullable<global::System.Decimal> value);
        partial void OnFeesCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> SessionCode
        {
            get
            {
                return _SessionCode;
            }
            set
            {
                OnSessionCodeChanging(value);
                ReportPropertyChanging("SessionCode");
                _SessionCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SessionCode");
                OnSessionCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _SessionCode;
        partial void OnSessionCodeChanging(Nullable<global::System.Int64> value);
        partial void OnSessionCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SemesterCode
        {
            get
            {
                return _SemesterCode;
            }
            set
            {
                OnSemesterCodeChanging(value);
                ReportPropertyChanging("SemesterCode");
                _SemesterCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SemesterCode");
                OnSemesterCodeChanged();
            }
        }
        private global::System.String _SemesterCode;
        partial void OnSemesterCodeChanging(global::System.String value);
        partial void OnSemesterCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> Amount
        {
            get
            {
                return _Amount;
            }
            set
            {
                OnAmountChanging(value);
                ReportPropertyChanging("Amount");
                _Amount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Amount");
                OnAmountChanged();
            }
        }
        private Nullable<global::System.Decimal> _Amount;
        partial void OnAmountChanging(Nullable<global::System.Decimal> value);
        partial void OnAmountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Refunded
        {
            get
            {
                return _Refunded;
            }
            set
            {
                OnRefundedChanging(value);
                ReportPropertyChanging("Refunded");
                _Refunded = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Refunded");
                OnRefundedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Refunded;
        partial void OnRefundedChanging(Nullable<global::System.Boolean> value);
        partial void OnRefundedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> RefundedOn
        {
            get
            {
                return _RefundedOn;
            }
            set
            {
                OnRefundedOnChanging(value);
                ReportPropertyChanging("RefundedOn");
                _RefundedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RefundedOn");
                OnRefundedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _RefundedOn;
        partial void OnRefundedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnRefundedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String RefundedBy
        {
            get
            {
                return _RefundedBy;
            }
            set
            {
                OnRefundedByChanging(value);
                ReportPropertyChanging("RefundedBy");
                _RefundedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("RefundedBy");
                OnRefundedByChanged();
            }
        }
        private global::System.String _RefundedBy;
        partial void OnRefundedByChanging(global::System.String value);
        partial void OnRefundedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Approved
        {
            get
            {
                return _Approved;
            }
            set
            {
                OnApprovedChanging(value);
                ReportPropertyChanging("Approved");
                _Approved = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Approved");
                OnApprovedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Approved;
        partial void OnApprovedChanging(Nullable<global::System.Boolean> value);
        partial void OnApprovedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ApproveBy
        {
            get
            {
                return _ApproveBy;
            }
            set
            {
                OnApproveByChanging(value);
                ReportPropertyChanging("ApproveBy");
                _ApproveBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ApproveBy");
                OnApproveByChanged();
            }
        }
        private global::System.String _ApproveBy;
        partial void OnApproveByChanging(global::System.String value);
        partial void OnApproveByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ApproveOn
        {
            get
            {
                return _ApproveOn;
            }
            set
            {
                OnApproveOnChanging(value);
                ReportPropertyChanging("ApproveOn");
                _ApproveOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ApproveOn");
                OnApproveOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ApproveOn;
        partial void OnApproveOnChanging(Nullable<global::System.DateTime> value);
        partial void OnApproveOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Finance", Name="Transaction")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Transaction : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Transaction object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Transaction CreateTransaction(global::System.Int64 code)
        {
            Transaction transaction = new Transaction();
            transaction.Code = code;
            return transaction;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> SessionCode
        {
            get
            {
                return _SessionCode;
            }
            set
            {
                OnSessionCodeChanging(value);
                ReportPropertyChanging("SessionCode");
                _SessionCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SessionCode");
                OnSessionCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _SessionCode;
        partial void OnSessionCodeChanging(Nullable<global::System.Int64> value);
        partial void OnSessionCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SemesterCode
        {
            get
            {
                return _SemesterCode;
            }
            set
            {
                OnSemesterCodeChanging(value);
                ReportPropertyChanging("SemesterCode");
                _SemesterCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SemesterCode");
                OnSemesterCodeChanged();
            }
        }
        private global::System.String _SemesterCode;
        partial void OnSemesterCodeChanging(global::System.String value);
        partial void OnSemesterCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String TransactionActivityCode
        {
            get
            {
                return _TransactionActivityCode;
            }
            set
            {
                OnTransactionActivityCodeChanging(value);
                ReportPropertyChanging("TransactionActivityCode");
                _TransactionActivityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("TransactionActivityCode");
                OnTransactionActivityCodeChanged();
            }
        }
        private global::System.String _TransactionActivityCode;
        partial void OnTransactionActivityCodeChanging(global::System.String value);
        partial void OnTransactionActivityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String InvoiceTypeCode
        {
            get
            {
                return _InvoiceTypeCode;
            }
            set
            {
                OnInvoiceTypeCodeChanging(value);
                ReportPropertyChanging("InvoiceTypeCode");
                _InvoiceTypeCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("InvoiceTypeCode");
                OnInvoiceTypeCodeChanged();
            }
        }
        private global::System.String _InvoiceTypeCode;
        partial void OnInvoiceTypeCodeChanging(global::System.String value);
        partial void OnInvoiceTypeCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> LpoNo
        {
            get
            {
                return _LpoNo;
            }
            set
            {
                OnLpoNoChanging(value);
                ReportPropertyChanging("LpoNo");
                _LpoNo = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LpoNo");
                OnLpoNoChanged();
            }
        }
        private Nullable<global::System.Decimal> _LpoNo;
        partial void OnLpoNoChanging(Nullable<global::System.Decimal> value);
        partial void OnLpoNoChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> PoNo
        {
            get
            {
                return _PoNo;
            }
            set
            {
                OnPoNoChanging(value);
                ReportPropertyChanging("PoNo");
                _PoNo = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PoNo");
                OnPoNoChanged();
            }
        }
        private Nullable<global::System.Decimal> _PoNo;
        partial void OnPoNoChanging(Nullable<global::System.Decimal> value);
        partial void OnPoNoChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CategoryCode
        {
            get
            {
                return _CategoryCode;
            }
            set
            {
                OnCategoryCodeChanging(value);
                ReportPropertyChanging("CategoryCode");
                _CategoryCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CategoryCode");
                OnCategoryCodeChanged();
            }
        }
        private global::System.String _CategoryCode;
        partial void OnCategoryCodeChanging(global::System.String value);
        partial void OnCategoryCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> Amount
        {
            get
            {
                return _Amount;
            }
            set
            {
                OnAmountChanging(value);
                ReportPropertyChanging("Amount");
                _Amount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Amount");
                OnAmountChanged();
            }
        }
        private Nullable<global::System.Decimal> _Amount;
        partial void OnAmountChanging(Nullable<global::System.Decimal> value);
        partial void OnAmountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> AmountPaid
        {
            get
            {
                return _AmountPaid;
            }
            set
            {
                OnAmountPaidChanging(value);
                ReportPropertyChanging("AmountPaid");
                _AmountPaid = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AmountPaid");
                OnAmountPaidChanged();
            }
        }
        private Nullable<global::System.Decimal> _AmountPaid;
        partial void OnAmountPaidChanging(Nullable<global::System.Decimal> value);
        partial void OnAmountPaidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> Balance
        {
            get
            {
                return _Balance;
            }
            set
            {
                OnBalanceChanging(value);
                ReportPropertyChanging("Balance");
                _Balance = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Balance");
                OnBalanceChanged();
            }
        }
        private Nullable<global::System.Decimal> _Balance;
        partial void OnBalanceChanging(Nullable<global::System.Decimal> value);
        partial void OnBalanceChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> Total
        {
            get
            {
                return _Total;
            }
            set
            {
                OnTotalChanging(value);
                ReportPropertyChanging("Total");
                _Total = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Total");
                OnTotalChanged();
            }
        }
        private Nullable<global::System.Decimal> _Total;
        partial void OnTotalChanging(Nullable<global::System.Decimal> value);
        partial void OnTotalChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CompanyCode
        {
            get
            {
                return _CompanyCode;
            }
            set
            {
                OnCompanyCodeChanging(value);
                ReportPropertyChanging("CompanyCode");
                _CompanyCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CompanyCode");
                OnCompanyCodeChanged();
            }
        }
        private global::System.String _CompanyCode;
        partial void OnCompanyCodeChanging(global::System.String value);
        partial void OnCompanyCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PaymentStatus
        {
            get
            {
                return _PaymentStatus;
            }
            set
            {
                OnPaymentStatusChanging(value);
                ReportPropertyChanging("PaymentStatus");
                _PaymentStatus = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PaymentStatus");
                OnPaymentStatusChanged();
            }
        }
        private global::System.String _PaymentStatus;
        partial void OnPaymentStatusChanging(global::System.String value);
        partial void OnPaymentStatusChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateX
        {
            get
            {
                return _DateX;
            }
            set
            {
                OnDateXChanging(value);
                ReportPropertyChanging("DateX");
                _DateX = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateX");
                OnDateXChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateX;
        partial void OnDateXChanging(Nullable<global::System.DateTime> value);
        partial void OnDateXChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AmountInWords
        {
            get
            {
                return _AmountInWords;
            }
            set
            {
                OnAmountInWordsChanging(value);
                ReportPropertyChanging("AmountInWords");
                _AmountInWords = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AmountInWords");
                OnAmountInWordsChanged();
            }
        }
        private global::System.String _AmountInWords;
        partial void OnAmountInWordsChanging(global::System.String value);
        partial void OnAmountInWordsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Finance", Name="TransactionsDetail")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TransactionsDetail : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new TransactionsDetail object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static TransactionsDetail CreateTransactionsDetail(global::System.Int64 code)
        {
            TransactionsDetail transactionsDetail = new TransactionsDetail();
            transactionsDetail.Code = code;
            return transactionsDetail;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> SessionCode
        {
            get
            {
                return _SessionCode;
            }
            set
            {
                OnSessionCodeChanging(value);
                ReportPropertyChanging("SessionCode");
                _SessionCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SessionCode");
                OnSessionCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _SessionCode;
        partial void OnSessionCodeChanging(Nullable<global::System.Int64> value);
        partial void OnSessionCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SemesterCode
        {
            get
            {
                return _SemesterCode;
            }
            set
            {
                OnSemesterCodeChanging(value);
                ReportPropertyChanging("SemesterCode");
                _SemesterCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SemesterCode");
                OnSemesterCodeChanged();
            }
        }
        private global::System.String _SemesterCode;
        partial void OnSemesterCodeChanging(global::System.String value);
        partial void OnSemesterCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> InvoiceCode
        {
            get
            {
                return _InvoiceCode;
            }
            set
            {
                OnInvoiceCodeChanging(value);
                ReportPropertyChanging("InvoiceCode");
                _InvoiceCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("InvoiceCode");
                OnInvoiceCodeChanged();
            }
        }
        private Nullable<global::System.Decimal> _InvoiceCode;
        partial void OnInvoiceCodeChanging(Nullable<global::System.Decimal> value);
        partial void OnInvoiceCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ItemDescription
        {
            get
            {
                return _ItemDescription;
            }
            set
            {
                OnItemDescriptionChanging(value);
                ReportPropertyChanging("ItemDescription");
                _ItemDescription = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ItemDescription");
                OnItemDescriptionChanged();
            }
        }
        private global::System.String _ItemDescription;
        partial void OnItemDescriptionChanging(global::System.String value);
        partial void OnItemDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Quantity
        {
            get
            {
                return _Quantity;
            }
            set
            {
                OnQuantityChanging(value);
                ReportPropertyChanging("Quantity");
                _Quantity = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Quantity");
                OnQuantityChanged();
            }
        }
        private Nullable<global::System.Int32> _Quantity;
        partial void OnQuantityChanging(Nullable<global::System.Int32> value);
        partial void OnQuantityChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Unit
        {
            get
            {
                return _Unit;
            }
            set
            {
                OnUnitChanging(value);
                ReportPropertyChanging("Unit");
                _Unit = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Unit");
                OnUnitChanged();
            }
        }
        private global::System.String _Unit;
        partial void OnUnitChanging(global::System.String value);
        partial void OnUnitChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> UnitCost
        {
            get
            {
                return _UnitCost;
            }
            set
            {
                OnUnitCostChanging(value);
                ReportPropertyChanging("UnitCost");
                _UnitCost = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UnitCost");
                OnUnitCostChanged();
            }
        }
        private Nullable<global::System.Decimal> _UnitCost;
        partial void OnUnitCostChanging(Nullable<global::System.Decimal> value);
        partial void OnUnitCostChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> DiscountPercentage
        {
            get
            {
                return _DiscountPercentage;
            }
            set
            {
                OnDiscountPercentageChanging(value);
                ReportPropertyChanging("DiscountPercentage");
                _DiscountPercentage = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DiscountPercentage");
                OnDiscountPercentageChanged();
            }
        }
        private Nullable<global::System.Decimal> _DiscountPercentage;
        partial void OnDiscountPercentageChanging(Nullable<global::System.Decimal> value);
        partial void OnDiscountPercentageChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> DiscountAmount
        {
            get
            {
                return _DiscountAmount;
            }
            set
            {
                OnDiscountAmountChanging(value);
                ReportPropertyChanging("DiscountAmount");
                _DiscountAmount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DiscountAmount");
                OnDiscountAmountChanged();
            }
        }
        private Nullable<global::System.Decimal> _DiscountAmount;
        partial void OnDiscountAmountChanging(Nullable<global::System.Decimal> value);
        partial void OnDiscountAmountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String TaxType
        {
            get
            {
                return _TaxType;
            }
            set
            {
                OnTaxTypeChanging(value);
                ReportPropertyChanging("TaxType");
                _TaxType = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("TaxType");
                OnTaxTypeChanged();
            }
        }
        private global::System.String _TaxType;
        partial void OnTaxTypeChanging(global::System.String value);
        partial void OnTaxTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> TaxValue
        {
            get
            {
                return _TaxValue;
            }
            set
            {
                OnTaxValueChanging(value);
                ReportPropertyChanging("TaxValue");
                _TaxValue = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TaxValue");
                OnTaxValueChanged();
            }
        }
        private Nullable<global::System.Decimal> _TaxValue;
        partial void OnTaxValueChanging(Nullable<global::System.Decimal> value);
        partial void OnTaxValueChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> TotalCost
        {
            get
            {
                return _TotalCost;
            }
            set
            {
                OnTotalCostChanging(value);
                ReportPropertyChanging("TotalCost");
                _TotalCost = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TotalCost");
                OnTotalCostChanged();
            }
        }
        private Nullable<global::System.Decimal> _TotalCost;
        partial void OnTotalCostChanging(Nullable<global::System.Decimal> value);
        partial void OnTotalCostChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Finance", Name="Voucher")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Voucher : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Voucher object.
        /// </summary>
        /// <param name="code">Initial value of the Code property.</param>
        public static Voucher CreateVoucher(global::System.Int64 code)
        {
            Voucher voucher = new Voucher();
            voucher.Code = code;
            return voucher;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Code
        {
            get
            {
                return _Code;
            }
            set
            {
                if (_Code != value)
                {
                    OnCodeChanging(value);
                    ReportPropertyChanging("Code");
                    _Code = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Code");
                    OnCodeChanged();
                }
            }
        }
        private global::System.Int64 _Code;
        partial void OnCodeChanging(global::System.Int64 value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UniversityCode
        {
            get
            {
                return _UniversityCode;
            }
            set
            {
                OnUniversityCodeChanging(value);
                ReportPropertyChanging("UniversityCode");
                _UniversityCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UniversityCode");
                OnUniversityCodeChanged();
            }
        }
        private global::System.String _UniversityCode;
        partial void OnUniversityCodeChanging(global::System.String value);
        partial void OnUniversityCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> SessionCode
        {
            get
            {
                return _SessionCode;
            }
            set
            {
                OnSessionCodeChanging(value);
                ReportPropertyChanging("SessionCode");
                _SessionCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SessionCode");
                OnSessionCodeChanged();
            }
        }
        private Nullable<global::System.Int64> _SessionCode;
        partial void OnSessionCodeChanging(Nullable<global::System.Int64> value);
        partial void OnSessionCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SemesterCode
        {
            get
            {
                return _SemesterCode;
            }
            set
            {
                OnSemesterCodeChanging(value);
                ReportPropertyChanging("SemesterCode");
                _SemesterCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SemesterCode");
                OnSemesterCodeChanged();
            }
        }
        private global::System.String _SemesterCode;
        partial void OnSemesterCodeChanging(global::System.String value);
        partial void OnSemesterCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountGroupCode
        {
            get
            {
                return _AccountGroupCode;
            }
            set
            {
                OnAccountGroupCodeChanging(value);
                ReportPropertyChanging("AccountGroupCode");
                _AccountGroupCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountGroupCode");
                OnAccountGroupCodeChanged();
            }
        }
        private global::System.String _AccountGroupCode;
        partial void OnAccountGroupCodeChanging(global::System.String value);
        partial void OnAccountGroupCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> AccountSubCode
        {
            get
            {
                return _AccountSubCode;
            }
            set
            {
                OnAccountSubCodeChanging(value);
                ReportPropertyChanging("AccountSubCode");
                _AccountSubCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AccountSubCode");
                OnAccountSubCodeChanged();
            }
        }
        private Nullable<global::System.Int32> _AccountSubCode;
        partial void OnAccountSubCodeChanging(Nullable<global::System.Int32> value);
        partial void OnAccountSubCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> AccountTypeCode
        {
            get
            {
                return _AccountTypeCode;
            }
            set
            {
                OnAccountTypeCodeChanging(value);
                ReportPropertyChanging("AccountTypeCode");
                _AccountTypeCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AccountTypeCode");
                OnAccountTypeCodeChanged();
            }
        }
        private Nullable<global::System.Decimal> _AccountTypeCode;
        partial void OnAccountTypeCodeChanging(Nullable<global::System.Decimal> value);
        partial void OnAccountTypeCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> AccountCode
        {
            get
            {
                return _AccountCode;
            }
            set
            {
                OnAccountCodeChanging(value);
                ReportPropertyChanging("AccountCode");
                _AccountCode = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AccountCode");
                OnAccountCodeChanged();
            }
        }
        private Nullable<global::System.Decimal> _AccountCode;
        partial void OnAccountCodeChanging(Nullable<global::System.Decimal> value);
        partial void OnAccountCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String VoucherTypeCode
        {
            get
            {
                return _VoucherTypeCode;
            }
            set
            {
                OnVoucherTypeCodeChanging(value);
                ReportPropertyChanging("VoucherTypeCode");
                _VoucherTypeCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("VoucherTypeCode");
                OnVoucherTypeCodeChanged();
            }
        }
        private global::System.String _VoucherTypeCode;
        partial void OnVoucherTypeCodeChanging(global::System.String value);
        partial void OnVoucherTypeCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String TransactionTypeCode
        {
            get
            {
                return _TransactionTypeCode;
            }
            set
            {
                OnTransactionTypeCodeChanging(value);
                ReportPropertyChanging("TransactionTypeCode");
                _TransactionTypeCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("TransactionTypeCode");
                OnTransactionTypeCodeChanged();
            }
        }
        private global::System.String _TransactionTypeCode;
        partial void OnTransactionTypeCodeChanging(global::System.String value);
        partial void OnTransactionTypeCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String EntityTypeCode
        {
            get
            {
                return _EntityTypeCode;
            }
            set
            {
                OnEntityTypeCodeChanging(value);
                ReportPropertyChanging("EntityTypeCode");
                _EntityTypeCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("EntityTypeCode");
                OnEntityTypeCodeChanged();
            }
        }
        private global::System.String _EntityTypeCode;
        partial void OnEntityTypeCodeChanging(global::System.String value);
        partial void OnEntityTypeCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ParticularsCode
        {
            get
            {
                return _ParticularsCode;
            }
            set
            {
                OnParticularsCodeChanging(value);
                ReportPropertyChanging("ParticularsCode");
                _ParticularsCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ParticularsCode");
                OnParticularsCodeChanged();
            }
        }
        private global::System.String _ParticularsCode;
        partial void OnParticularsCodeChanging(global::System.String value);
        partial void OnParticularsCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateX
        {
            get
            {
                return _DateX;
            }
            set
            {
                OnDateXChanging(value);
                ReportPropertyChanging("DateX");
                _DateX = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateX");
                OnDateXChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateX;
        partial void OnDateXChanging(Nullable<global::System.DateTime> value);
        partial void OnDateXChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> DebitAmount
        {
            get
            {
                return _DebitAmount;
            }
            set
            {
                OnDebitAmountChanging(value);
                ReportPropertyChanging("DebitAmount");
                _DebitAmount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DebitAmount");
                OnDebitAmountChanged();
            }
        }
        private Nullable<global::System.Decimal> _DebitAmount;
        partial void OnDebitAmountChanging(Nullable<global::System.Decimal> value);
        partial void OnDebitAmountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> CreditAmount
        {
            get
            {
                return _CreditAmount;
            }
            set
            {
                OnCreditAmountChanging(value);
                ReportPropertyChanging("CreditAmount");
                _CreditAmount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreditAmount");
                OnCreditAmountChanged();
            }
        }
        private Nullable<global::System.Decimal> _CreditAmount;
        partial void OnCreditAmountChanging(Nullable<global::System.Decimal> value);
        partial void OnCreditAmountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Narration
        {
            get
            {
                return _Narration;
            }
            set
            {
                OnNarrationChanging(value);
                ReportPropertyChanging("Narration");
                _Narration = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Narration");
                OnNarrationChanged();
            }
        }
        private global::System.String _Narration;
        partial void OnNarrationChanging(global::System.String value);
        partial void OnNarrationChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Approved
        {
            get
            {
                return _Approved;
            }
            set
            {
                OnApprovedChanging(value);
                ReportPropertyChanging("Approved");
                _Approved = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Approved");
                OnApprovedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Approved;
        partial void OnApprovedChanging(Nullable<global::System.Boolean> value);
        partial void OnApprovedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ApproveBy
        {
            get
            {
                return _ApproveBy;
            }
            set
            {
                OnApproveByChanging(value);
                ReportPropertyChanging("ApproveBy");
                _ApproveBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ApproveBy");
                OnApproveByChanged();
            }
        }
        private global::System.String _ApproveBy;
        partial void OnApproveByChanging(global::System.String value);
        partial void OnApproveByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ApproveOn
        {
            get
            {
                return _ApproveOn;
            }
            set
            {
                OnApproveOnChanging(value);
                ReportPropertyChanging("ApproveOn");
                _ApproveOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ApproveOn");
                OnApproveOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ApproveOn;
        partial void OnApproveOnChanging(Nullable<global::System.DateTime> value);
        partial void OnApproveOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreatedOn;
        partial void OnCreatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CreatedBy
        {
            get
            {
                return _CreatedBy;
            }
            set
            {
                OnCreatedByChanging(value);
                ReportPropertyChanging("CreatedBy");
                _CreatedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CreatedBy");
                OnCreatedByChanged();
            }
        }
        private global::System.String _CreatedBy;
        partial void OnCreatedByChanging(global::System.String value);
        partial void OnCreatedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ModifiedOn
        {
            get
            {
                return _ModifiedOn;
            }
            set
            {
                OnModifiedOnChanging(value);
                ReportPropertyChanging("ModifiedOn");
                _ModifiedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModifiedOn");
                OnModifiedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _ModifiedOn;
        partial void OnModifiedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnModifiedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModifiedBy
        {
            get
            {
                return _ModifiedBy;
            }
            set
            {
                OnModifiedByChanging(value);
                ReportPropertyChanging("ModifiedBy");
                _ModifiedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModifiedBy");
                OnModifiedByChanged();
            }
        }
        private global::System.String _ModifiedBy;
        partial void OnModifiedByChanging(global::System.String value);
        partial void OnModifiedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Deleted
        {
            get
            {
                return _Deleted;
            }
            set
            {
                OnDeletedChanging(value);
                ReportPropertyChanging("Deleted");
                _Deleted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deleted");
                OnDeletedChanged();
            }
        }
        private Nullable<global::System.Boolean> _Deleted;
        partial void OnDeletedChanging(Nullable<global::System.Boolean> value);
        partial void OnDeletedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeletedOn
        {
            get
            {
                return _DeletedOn;
            }
            set
            {
                OnDeletedOnChanging(value);
                ReportPropertyChanging("DeletedOn");
                _DeletedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeletedOn");
                OnDeletedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeletedOn;
        partial void OnDeletedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeletedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DeletedBy
        {
            get
            {
                return _DeletedBy;
            }
            set
            {
                OnDeletedByChanging(value);
                ReportPropertyChanging("DeletedBy");
                _DeletedBy = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DeletedBy");
                OnDeletedByChanged();
            }
        }
        private global::System.String _DeletedBy;
        partial void OnDeletedByChanging(global::System.String value);
        partial void OnDeletedByChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Notes
        {
            get
            {
                return _Notes;
            }
            set
            {
                OnNotesChanging(value);
                ReportPropertyChanging("Notes");
                _Notes = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Notes");
                OnNotesChanged();
            }
        }
        private global::System.String _Notes;
        partial void OnNotesChanging(global::System.String value);
        partial void OnNotesChanged();

        #endregion
    
    }

    #endregion
    
}
